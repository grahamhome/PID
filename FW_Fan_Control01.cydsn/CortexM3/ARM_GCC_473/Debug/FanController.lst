ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"FanController.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	FanController_initVar
  19              		.bss
  20              		.type	FanController_initVar, %object
  21              		.size	FanController_initVar, 1
  22              	FanController_initVar:
  23 0000 00       		.space	1
  24              	FanController_TachOutDMA_channel:
  25 0001 00       		.space	1
  26              		.section	.text.FanController_Start,"ax",%progbits
  27              		.align	2
  28              		.global	FanController_Start
  29              		.thumb
  30              		.thumb_func
  31              		.type	FanController_Start, %function
  32              	FanController_Start:
  33              	.LFB0:
  34              		.file 1 ".\\Generated_Source\\PSoC5\\FanController.c"
   1:.\Generated_Source\PSoC5/FanController.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/FanController.c **** * File Name: FanController.c
   3:.\Generated_Source\PSoC5/FanController.c **** * Version 3.10
   4:.\Generated_Source\PSoC5/FanController.c **** *
   5:.\Generated_Source\PSoC5/FanController.c **** * Description:
   6:.\Generated_Source\PSoC5/FanController.c **** *  This file contains the API files for the FanController component.
   7:.\Generated_Source\PSoC5/FanController.c **** *  The FanController component supports up to 16 pulse width modulator (PWM)
   8:.\Generated_Source\PSoC5/FanController.c **** *  controlled 4-wire fans and through an intuitive graphical interface,
   9:.\Generated_Source\PSoC5/FanController.c **** *  enabling designers to quickly configure the number of fans, their electro-
  10:.\Generated_Source\PSoC5/FanController.c **** *  mechanical properties, organization into banks (if desired) and the control
  11:.\Generated_Source\PSoC5/FanController.c **** *  algorithm type: firmware or hardware based.
  12:.\Generated_Source\PSoC5/FanController.c **** *
  13:.\Generated_Source\PSoC5/FanController.c **** *  Refer to AN66627 "PSoC(R) 3 and PSoC 5 - Intelligent Fan Controller" for
  14:.\Generated_Source\PSoC5/FanController.c **** *  more details and example projects.
  15:.\Generated_Source\PSoC5/FanController.c **** *
  16:.\Generated_Source\PSoC5/FanController.c **** * Note:
  17:.\Generated_Source\PSoC5/FanController.c **** *
  18:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
  19:.\Generated_Source\PSoC5/FanController.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  20:.\Generated_Source\PSoC5/FanController.c **** * You may use this file only in accordance with the license, terms, conditions,
  21:.\Generated_Source\PSoC5/FanController.c **** * disclaimers, and limitations in the end user license agreement accompanying
  22:.\Generated_Source\PSoC5/FanController.c **** * the software package with which this file was provided.
  23:.\Generated_Source\PSoC5/FanController.c **** ********************************************************************************/
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 2


  24:.\Generated_Source\PSoC5/FanController.c **** 
  25:.\Generated_Source\PSoC5/FanController.c **** #include "FanController.h"
  26:.\Generated_Source\PSoC5/FanController.c **** #include "CyLib.h"
  27:.\Generated_Source\PSoC5/FanController.c **** 
  28:.\Generated_Source\PSoC5/FanController.c **** #if(CY_PSOC4)
  29:.\Generated_Source\PSoC5/FanController.c ****     #include "FanController_DataSend.h"
  30:.\Generated_Source\PSoC5/FanController.c **** 
  31:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_NUMBER_OF_FAN_OUTPUTS == 1u)
  32:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM1.h"
  33:.\Generated_Source\PSoC5/FanController.c ****     #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 2u)
  34:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM1.h"
  35:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM2.h"
  36:.\Generated_Source\PSoC5/FanController.c ****     #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 3u)
  37:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM1.h"
  38:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM2.h"
  39:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM3.h"
  40:.\Generated_Source\PSoC5/FanController.c ****     #else
  41:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM1.h"
  42:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM2.h"
  43:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM3.h"
  44:.\Generated_Source\PSoC5/FanController.c ****         #include "FanController_FW_PWM4.h"
  45:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (FanController_NUMBER_OF_FAN_OUTPUTS == 1u) */
  46:.\Generated_Source\PSoC5/FanController.c **** 
  47:.\Generated_Source\PSoC5/FanController.c **** #endif /* (CY_PSOC4) */
  48:.\Generated_Source\PSoC5/FanController.c **** 
  49:.\Generated_Source\PSoC5/FanController.c **** #if(FanController_IS_AUTO_FIRMWARE_MODE)
  50:.\Generated_Source\PSoC5/FanController.c ****     #include "FanController_PID_ISR.h"
  51:.\Generated_Source\PSoC5/FanController.c **** #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
  52:.\Generated_Source\PSoC5/FanController.c **** 
  53:.\Generated_Source\PSoC5/FanController.c **** 
  54:.\Generated_Source\PSoC5/FanController.c **** /*******************************************************************************
  55:.\Generated_Source\PSoC5/FanController.c **** * Variables
  56:.\Generated_Source\PSoC5/FanController.c **** *
  57:.\Generated_Source\PSoC5/FanController.c **** * Fan Control Data Structure declaration and initialization can be found at the
  58:.\Generated_Source\PSoC5/FanController.c **** * end of this file due to its large size.
  59:.\Generated_Source\PSoC5/FanController.c **** ********************************************************************************/
  60:.\Generated_Source\PSoC5/FanController.c **** uint8   FanController_initVar = 0u;
  61:.\Generated_Source\PSoC5/FanController.c **** 
  62:.\Generated_Source\PSoC5/FanController.c **** #if (!CY_PSOC4)
  63:.\Generated_Source\PSoC5/FanController.c **** 
  64:.\Generated_Source\PSoC5/FanController.c ****     /* Stores channel number of Tachometer out DMA */
  65:.\Generated_Source\PSoC5/FanController.c ****     static uint8 FanController_TachOutDMA_channel = 0u;
  66:.\Generated_Source\PSoC5/FanController.c **** 
  67:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_IS_AUTO_HARDWARE_MODE)
  68:.\Generated_Source\PSoC5/FanController.c ****         
  69:.\Generated_Source\PSoC5/FanController.c ****         /* Stores channel number of Tachometer in DMA */
  70:.\Generated_Source\PSoC5/FanController.c ****         static uint8 FanController_TachInDMA_channel = 0u;
  71:.\Generated_Source\PSoC5/FanController.c ****         
  72:.\Generated_Source\PSoC5/FanController.c ****         /* DMA transfer descriptors used by the tachometer block for fan speed 
  73:.\Generated_Source\PSoC5/FanController.c ****         * tunning. 
  74:.\Generated_Source\PSoC5/FanController.c ****         */
  75:.\Generated_Source\PSoC5/FanController.c ****         static FanController_fanTdInStruct FanController_fanInTds[FanController_NUMBER_OF_FANS];
  76:.\Generated_Source\PSoC5/FanController.c **** 
  77:.\Generated_Source\PSoC5/FanController.c ****     #endif /* FanController_IS_AUTO_HARDWARE_MODE */
  78:.\Generated_Source\PSoC5/FanController.c **** 
  79:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!CY_PSOC4) */
  80:.\Generated_Source\PSoC5/FanController.c **** 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 3


  81:.\Generated_Source\PSoC5/FanController.c **** /* Arrays for storing PID parameters and saturation ranges */
  82:.\Generated_Source\PSoC5/FanController.c **** #if(FanController_IS_AUTO_FIRMWARE_MODE)
  83:.\Generated_Source\PSoC5/FanController.c ****     int16 FanController_pidA1[FanController_NUMBER_OF_FANS];
  84:.\Generated_Source\PSoC5/FanController.c ****     int16 FanController_pidA2[FanController_NUMBER_OF_FANS];
  85:.\Generated_Source\PSoC5/FanController.c ****     int16 FanController_pidA3[FanController_NUMBER_OF_FANS];
  86:.\Generated_Source\PSoC5/FanController.c **** 
  87:.\Generated_Source\PSoC5/FanController.c ****     uint32 FanController_outputSatL[FanController_NUMBER_OF_FANS];
  88:.\Generated_Source\PSoC5/FanController.c ****     uint32 FanController_outputSatH[FanController_NUMBER_OF_FANS];
  89:.\Generated_Source\PSoC5/FanController.c **** #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
  90:.\Generated_Source\PSoC5/FanController.c **** 
  91:.\Generated_Source\PSoC5/FanController.c **** #if(!FanController_IS_MANUAL_MODE)
  92:.\Generated_Source\PSoC5/FanController.c ****     /* An array to store desired fans speeds */
  93:.\Generated_Source\PSoC5/FanController.c ****     uint16 FanController_desiredFansSpeed[FanController_NUMBER_OF_FANS];
  94:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!FanController_IS_MANUAL_MODE) */
  95:.\Generated_Source\PSoC5/FanController.c **** 
  96:.\Generated_Source\PSoC5/FanController.c **** 
  97:.\Generated_Source\PSoC5/FanController.c **** /*******************************************************************************
  98:.\Generated_Source\PSoC5/FanController.c **** * Private API Prototypes
  99:.\Generated_Source\PSoC5/FanController.c **** ********************************************************************************/
 100:.\Generated_Source\PSoC5/FanController.c **** #if (!CY_PSOC4)
 101:.\Generated_Source\PSoC5/FanController.c ****     static void  FanController_SetupDMA(void) CYREENTRANT;
 102:.\Generated_Source\PSoC5/FanController.c ****     static uint8 FanController_TachOutDMA_DmaInitialize(uint8 burstCount, uint8 requestPerBurst,
 103:.\Generated_Source\PSoC5/FanController.c ****                                                     uint16 upperSrcAddress, uint16 upperDestAddress
 104:.\Generated_Source\PSoC5/FanController.c ****     static void  FanController_TachOutDMA_DmaRelease(void) CYREENTRANT;
 105:.\Generated_Source\PSoC5/FanController.c **** 
 106:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_IS_AUTO_HARDWARE_MODE)
 107:.\Generated_Source\PSoC5/FanController.c **** 
 108:.\Generated_Source\PSoC5/FanController.c ****         static uint8 FanController_TachInDMA_DmaInitialize(uint8 burstCount, uint8 requestPerBurst,
 109:.\Generated_Source\PSoC5/FanController.c ****                                                         uint16 upperSrcAddress, uint16 upperDestAdd
 110:.\Generated_Source\PSoC5/FanController.c ****         static void  FanController_TachInDMA_DmaRelease(void) CYREENTRANT;
 111:.\Generated_Source\PSoC5/FanController.c **** 
 112:.\Generated_Source\PSoC5/FanController.c ****     #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 113:.\Generated_Source\PSoC5/FanController.c **** 
 114:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!CY_PSOC4) */
 115:.\Generated_Source\PSoC5/FanController.c **** 
 116:.\Generated_Source\PSoC5/FanController.c **** 
 117:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 118:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_Start
 119:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 120:.\Generated_Source\PSoC5/FanController.c **** *
 121:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 122:.\Generated_Source\PSoC5/FanController.c **** *  Initializes component if not already initialized, then re-enables it.
 123:.\Generated_Source\PSoC5/FanController.c **** *
 124:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 125:.\Generated_Source\PSoC5/FanController.c **** *  None
 126:.\Generated_Source\PSoC5/FanController.c **** *
 127:.\Generated_Source\PSoC5/FanController.c **** * Return:
 128:.\Generated_Source\PSoC5/FanController.c **** *  None
 129:.\Generated_Source\PSoC5/FanController.c **** *
 130:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 131:.\Generated_Source\PSoC5/FanController.c **** *  None
 132:.\Generated_Source\PSoC5/FanController.c **** *
 133:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 134:.\Generated_Source\PSoC5/FanController.c **** void FanController_Start(void) 
 135:.\Generated_Source\PSoC5/FanController.c **** {
  35              		.loc 1 135 0
  36              		.cfi_startproc
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 4


  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 00AF     		add	r7, sp, #0
  45              	.LCFI1:
  46              		.cfi_def_cfa_register 7
 136:.\Generated_Source\PSoC5/FanController.c ****     /* If not already initialized, then initialize hardware and variables */
 137:.\Generated_Source\PSoC5/FanController.c ****     if(FanController_initVar == 0u)
  47              		.loc 1 137 0
  48 0004 40F20003 		movw	r3, #:lower16:FanController_initVar
  49 0008 C0F20003 		movt	r3, #:upper16:FanController_initVar
  50 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51 000e 002B     		cmp	r3, #0
  52 0010 08D1     		bne	.L2
 138:.\Generated_Source\PSoC5/FanController.c ****     {
 139:.\Generated_Source\PSoC5/FanController.c ****         FanController_Init();
  53              		.loc 1 139 0
  54 0012 FFF7FEFF 		bl	FanController_Init
 140:.\Generated_Source\PSoC5/FanController.c ****         FanController_initVar = 1u;
  55              		.loc 1 140 0
  56 0016 40F20003 		movw	r3, #:lower16:FanController_initVar
  57 001a C0F20003 		movt	r3, #:upper16:FanController_initVar
  58 001e 4FF00102 		mov	r2, #1
  59 0022 1A70     		strb	r2, [r3, #0]
  60              	.L2:
 141:.\Generated_Source\PSoC5/FanController.c ****     }
 142:.\Generated_Source\PSoC5/FanController.c ****     FanController_Enable();
  61              		.loc 1 142 0
  62 0024 FFF7FEFF 		bl	FanController_Enable
 143:.\Generated_Source\PSoC5/FanController.c **** }
  63              		.loc 1 143 0
  64 0028 80BD     		pop	{r7, pc}
  65              		.cfi_endproc
  66              	.LFE0:
  67              		.size	FanController_Start, .-FanController_Start
  68 002a 00BF     		.section	.text.FanController_Stop,"ax",%progbits
  69              		.align	2
  70              		.global	FanController_Stop
  71              		.thumb
  72              		.thumb_func
  73              		.type	FanController_Stop, %function
  74              	FanController_Stop:
  75              	.LFB1:
 144:.\Generated_Source\PSoC5/FanController.c **** 
 145:.\Generated_Source\PSoC5/FanController.c **** 
 146:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 147:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_Stop
 148:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 149:.\Generated_Source\PSoC5/FanController.c **** *
 150:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 151:.\Generated_Source\PSoC5/FanController.c **** *  Stop the fan controller component.  Disables all hardware sub-components,
 152:.\Generated_Source\PSoC5/FanController.c **** *  drives fan outputs high and de-asserts the alert pin.
 153:.\Generated_Source\PSoC5/FanController.c **** *
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 5


 154:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 155:.\Generated_Source\PSoC5/FanController.c **** *  None
 156:.\Generated_Source\PSoC5/FanController.c **** *
 157:.\Generated_Source\PSoC5/FanController.c **** * Return:
 158:.\Generated_Source\PSoC5/FanController.c **** *  None
 159:.\Generated_Source\PSoC5/FanController.c **** *
 160:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 161:.\Generated_Source\PSoC5/FanController.c **** *  All PWM outputs to fans will be driven high (100% duty cycle).
 162:.\Generated_Source\PSoC5/FanController.c **** *  Alert output de-asserted.
 163:.\Generated_Source\PSoC5/FanController.c **** *
 164:.\Generated_Source\PSoC5/FanController.c **** ******************************************************************************/
 165:.\Generated_Source\PSoC5/FanController.c **** void FanController_Stop(void) 
 166:.\Generated_Source\PSoC5/FanController.c **** {
  76              		.loc 1 166 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              	.LCFI2:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 00AF     		add	r7, sp, #0
  86              	.LCFI3:
  87              		.cfi_def_cfa_register 7
 167:.\Generated_Source\PSoC5/FanController.c ****     /* Turn off the hardware sub-components */
 168:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG = 0u;
  88              		.loc 1 168 0
  89 0004 46F27743 		movw	r3, #25719
  90 0008 C4F20003 		movt	r3, 16384
  91 000c 4FF00002 		mov	r2, #0
  92 0010 1A70     		strb	r2, [r3, #0]
 169:.\Generated_Source\PSoC5/FanController.c **** 
 170:.\Generated_Source\PSoC5/FanController.c ****     /* De-assert the alert pin */
 171:.\Generated_Source\PSoC5/FanController.c ****     FanController_DisableAlert();
  93              		.loc 1 171 0
  94 0012 FFF7FEFF 		bl	FanController_DisableAlert
 172:.\Generated_Source\PSoC5/FanController.c **** 
 173:.\Generated_Source\PSoC5/FanController.c ****     #if (!CY_PSOC4)
 174:.\Generated_Source\PSoC5/FanController.c **** 
 175:.\Generated_Source\PSoC5/FanController.c ****         /* Release DMA resources */
 176:.\Generated_Source\PSoC5/FanController.c ****         FanController_TachOutDMA_DmaRelease();
  95              		.loc 1 176 0
  96 0016 FFF7FEFF 		bl	FanController_TachOutDMA_DmaRelease
 177:.\Generated_Source\PSoC5/FanController.c **** 
 178:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_IS_AUTO_HARDWARE_MODE)
 179:.\Generated_Source\PSoC5/FanController.c ****             FanController_TachInDMA_DmaRelease();
 180:.\Generated_Source\PSoC5/FanController.c ****         #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 181:.\Generated_Source\PSoC5/FanController.c **** 
 182:.\Generated_Source\PSoC5/FanController.c ****     #else
 183:.\Generated_Source\PSoC5/FanController.c **** 
 184:.\Generated_Source\PSoC5/FanController.c ****         /* Disable PWMs */
 185:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_NUMBER_OF_FAN_OUTPUTS == 1u)
 186:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Stop();
 187:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 2u)
 188:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Stop();
 189:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Stop();
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 6


 190:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 3u)
 191:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Stop();
 192:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Stop();
 193:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Stop();
 194:.\Generated_Source\PSoC5/FanController.c ****         #else
 195:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Stop();
 196:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Stop();
 197:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Stop();
 198:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM4_Stop();
 199:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (FanController_NUMBER_OF_FAN_OUTPUTS == 1u) */
 200:.\Generated_Source\PSoC5/FanController.c **** 
 201:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (!CY_PSOC4) */
 202:.\Generated_Source\PSoC5/FanController.c **** }
  97              		.loc 1 202 0
  98 001a 80BD     		pop	{r7, pc}
  99              		.cfi_endproc
 100              	.LFE1:
 101              		.size	FanController_Stop, .-FanController_Stop
 102              		.section	.text.FanController_Init,"ax",%progbits
 103              		.align	2
 104              		.global	FanController_Init
 105              		.thumb
 106              		.thumb_func
 107              		.type	FanController_Init, %function
 108              	FanController_Init:
 109              	.LFB2:
 203:.\Generated_Source\PSoC5/FanController.c **** 
 204:.\Generated_Source\PSoC5/FanController.c **** 
 205:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 206:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_Init
 207:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 208:.\Generated_Source\PSoC5/FanController.c **** *
 209:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 210:.\Generated_Source\PSoC5/FanController.c **** *  Sets up DMA channels and transaction descriptors. Configures PWMs and
 211:.\Generated_Source\PSoC5/FanController.c **** *  Tachometer hardware blocks. Also it configures interrupts if they are used
 212:.\Generated_Source\PSoC5/FanController.c **** *  in the component.
 213:.\Generated_Source\PSoC5/FanController.c **** *
 214:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 215:.\Generated_Source\PSoC5/FanController.c **** *  None
 216:.\Generated_Source\PSoC5/FanController.c **** *
 217:.\Generated_Source\PSoC5/FanController.c **** *Return:
 218:.\Generated_Source\PSoC5/FanController.c **** *  None
 219:.\Generated_Source\PSoC5/FanController.c **** *
 220:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 221:.\Generated_Source\PSoC5/FanController.c **** *  Allocates DMA channels and transaction descriptors (TDs)
 222:.\Generated_Source\PSoC5/FanController.c **** *
 223:.\Generated_Source\PSoC5/FanController.c **** ******************************************************************************/
 224:.\Generated_Source\PSoC5/FanController.c **** void FanController_Init(void) 
 225:.\Generated_Source\PSoC5/FanController.c **** {
 110              		.loc 1 225 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI4:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 7


 118              		.cfi_offset 14, -4
 119 0002 82B0     		sub	sp, sp, #8
 120              	.LCFI5:
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI6:
 124              		.cfi_def_cfa_register 7
 226:.\Generated_Source\PSoC5/FanController.c ****     uint8 counti;
 227:.\Generated_Source\PSoC5/FanController.c ****     uint8 interruptState;
 228:.\Generated_Source\PSoC5/FanController.c **** 
 229:.\Generated_Source\PSoC5/FanController.c ****     #if (!CY_PSOC4)
 230:.\Generated_Source\PSoC5/FanController.c ****         
 231:.\Generated_Source\PSoC5/FanController.c ****         /* Performs configuration of DMA used in the component */
 232:.\Generated_Source\PSoC5/FanController.c ****         FanController_SetupDMA();
 125              		.loc 1 232 0
 126 0006 FFF7FEFF 		bl	FanController_SetupDMA
 233:.\Generated_Source\PSoC5/FanController.c **** 
 234:.\Generated_Source\PSoC5/FanController.c ****         /***********************************************************************
 235:.\Generated_Source\PSoC5/FanController.c ****         * Initialize the PWMs
 236:.\Generated_Source\PSoC5/FanController.c ****         ***********************************************************************/
 237:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_IS_AUTO_HARDWARE_MODE)
 238:.\Generated_Source\PSoC5/FanController.c **** 
 239:.\Generated_Source\PSoC5/FanController.c ****             /* Configure hardware controlled PWMs */
 240:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 241:.\Generated_Source\PSoC5/FanController.c ****             {
 242:.\Generated_Source\PSoC5/FanController.c ****                 /* 8-bit hardware controlled PWM */
 243:.\Generated_Source\PSoC5/FanController.c ****                 #if(FanController_PWMRES == FanController_PWMRES_EIGHTBIT)
 244:.\Generated_Source\PSoC5/FanController.c ****                     /* Set max PWM period */
 245:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG8(FanController_fanDriverRegs[counti].pwmPeriodReg, FanController_PWM
 246:.\Generated_Source\PSoC5/FanController.c ****                     /* Set max PWM duty cycle (must be <= PWM period) */
 247:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG8(FanController_fanDriverRegs[counti].pwmMaxDutyReg, FanController_PW
 248:.\Generated_Source\PSoC5/FanController.c ****                 /* 10-bit hardware controlled PWM */
 249:.\Generated_Source\PSoC5/FanController.c ****                 #else
 250:.\Generated_Source\PSoC5/FanController.c ****                     /* Set max PWM period */
 251:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG16(FanController_fanDriverRegs[counti].pwmPeriodReg, FanController_PW
 252:.\Generated_Source\PSoC5/FanController.c ****                     /* Set max PWM duty cycle (must be <= PWM period) */
 253:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG16(FanController_fanDriverRegs[counti].pwmMaxDutyReg, FanController_P
 254:.\Generated_Source\PSoC5/FanController.c ****                 #endif /* FanController_PWMRES == FanController_PWMRES_EIGHTBIT */
 255:.\Generated_Source\PSoC5/FanController.c **** 
 256:.\Generated_Source\PSoC5/FanController.c ****                 /* Set initial duty cycle */
 257:.\Generated_Source\PSoC5/FanController.c ****                 FanController_SetDutyCycle((counti + 1u), FanController_fanProperties[counti].initD
 258:.\Generated_Source\PSoC5/FanController.c ****                 /* Set initial speed */
 259:.\Generated_Source\PSoC5/FanController.c ****                 FanController_SetDesiredSpeed((counti + 1u), FanController_fanProperties[counti].in
 260:.\Generated_Source\PSoC5/FanController.c **** 
 261:.\Generated_Source\PSoC5/FanController.c ****                 /* Enable cnt7 to track speed regulation errors */
 262:.\Generated_Source\PSoC5/FanController.c ****                 CY_SET_REG8(FanController_fanDriverRegs[counti].errorCountReg,
 263:.\Generated_Source\PSoC5/FanController.c ****                     CY_GET_REG8(FanController_fanDriverRegs[counti].errorCountReg) | FanController_
 264:.\Generated_Source\PSoC5/FanController.c ****             }
 265:.\Generated_Source\PSoC5/FanController.c **** 
 266:.\Generated_Source\PSoC5/FanController.c ****         #else
 267:.\Generated_Source\PSoC5/FanController.c **** 
 268:.\Generated_Source\PSoC5/FanController.c ****             /* Configure firmware controlled PWMs */
 269:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_FANPWM_COUNT; counti++)
 127              		.loc 1 269 0
 128 000a 4FF00003 		mov	r3, #0
 129 000e FB71     		strb	r3, [r7, #7]
 130 0010 30E0     		b	.L5
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 8


 131              	.L6:
 270:.\Generated_Source\PSoC5/FanController.c ****             {
 271:.\Generated_Source\PSoC5/FanController.c ****                 /* 8-bit firmware controlled PWM */
 272:.\Generated_Source\PSoC5/FanController.c ****                 #if (FanController_PWMRES == FanController_PWMRES_EIGHTBIT)
 273:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG8(FanController_fanPwmInitRegs[counti].pwmPeriodReg, FanController_PW
 274:.\Generated_Source\PSoC5/FanController.c **** 
 275:.\Generated_Source\PSoC5/FanController.c ****                     interruptState = CyEnterCriticalSection();
 276:.\Generated_Source\PSoC5/FanController.c **** 
 277:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG8(FanController_fanPwmInitRegs[counti].pwmAuxControlReg,
 278:.\Generated_Source\PSoC5/FanController.c ****                         CY_GET_REG8(FanController_fanPwmInitRegs[counti].pwmAuxControlReg) |
 279:.\Generated_Source\PSoC5/FanController.c ****                             FanController_FANPWM_AUX_CTRL_FIFO0_CLR_8);
 280:.\Generated_Source\PSoC5/FanController.c **** 
 281:.\Generated_Source\PSoC5/FanController.c ****                     CyExitCriticalSection(interruptState);
 282:.\Generated_Source\PSoC5/FanController.c **** 
 283:.\Generated_Source\PSoC5/FanController.c ****                 /* 10-bit firmware controlled PWM */
 284:.\Generated_Source\PSoC5/FanController.c ****                 #else
 285:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG16(FanController_fanPwmInitRegs[counti].pwmPeriodReg, FanController_P
 132              		.loc 1 285 0 discriminator 2
 133 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 134 0014 40F20003 		movw	r3, #:lower16:FanController_fanPwmInitRegs
 135 0018 C0F20003 		movt	r3, #:upper16:FanController_fanPwmInitRegs
 136 001c 53F83230 		ldr	r3, [r3, r2, lsl #3]
 137 0020 4FF47072 		mov	r2, #960
 138 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 286:.\Generated_Source\PSoC5/FanController.c **** 
 287:.\Generated_Source\PSoC5/FanController.c ****                     interruptState = CyEnterCriticalSection();
 139              		.loc 1 287 0 discriminator 2
 140 0026 FFF7FEFF 		bl	CyEnterCriticalSection
 141 002a 0346     		mov	r3, r0
 142 002c BB71     		strb	r3, [r7, #6]
 288:.\Generated_Source\PSoC5/FanController.c **** 
 289:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG16(FanController_fanPwmInitRegs[counti].pwmAuxControlReg,
 143              		.loc 1 289 0 discriminator 2
 144 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 145 0030 40F20002 		movw	r2, #:lower16:FanController_fanPwmInitRegs
 146 0034 C0F20002 		movt	r2, #:upper16:FanController_fanPwmInitRegs
 147 0038 4FEAC303 		lsl	r3, r3, #3
 148 003c D318     		adds	r3, r2, r3
 149 003e 5B68     		ldr	r3, [r3, #4]
 150 0040 1946     		mov	r1, r3
 151 0042 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 152 0044 40F20002 		movw	r2, #:lower16:FanController_fanPwmInitRegs
 153 0048 C0F20002 		movt	r2, #:upper16:FanController_fanPwmInitRegs
 154 004c 4FEAC303 		lsl	r3, r3, #3
 155 0050 D318     		adds	r3, r2, r3
 156 0052 5B68     		ldr	r3, [r3, #4]
 157 0054 1B88     		ldrh	r3, [r3, #0]	@ movhi
 158 0056 9BB2     		uxth	r3, r3
 159 0058 43F44073 		orr	r3, r3, #768
 160 005c 43F00303 		orr	r3, r3, #3
 161 0060 9BB2     		uxth	r3, r3
 162 0062 0B80     		strh	r3, [r1, #0]	@ movhi
 290:.\Generated_Source\PSoC5/FanController.c ****                         CY_GET_REG16(FanController_fanPwmInitRegs[counti].pwmAuxControlReg) |
 291:.\Generated_Source\PSoC5/FanController.c ****                             FanController_FANPWM_AUX_CTRL_FIFO0_CLR_10);
 292:.\Generated_Source\PSoC5/FanController.c **** 
 293:.\Generated_Source\PSoC5/FanController.c ****                     CyExitCriticalSection(interruptState);
 163              		.loc 1 293 0 discriminator 2
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 9


 164 0064 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 165 0066 1846     		mov	r0, r3
 166 0068 FFF7FEFF 		bl	CyExitCriticalSection
 269:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_FANPWM_COUNT; counti++)
 167              		.loc 1 269 0 discriminator 2
 168 006c FB79     		ldrb	r3, [r7, #7]
 169 006e 03F10103 		add	r3, r3, #1
 170 0072 FB71     		strb	r3, [r7, #7]
 171              	.L5:
 269:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_FANPWM_COUNT; counti++)
 172              		.loc 1 269 0 is_stmt 0 discriminator 1
 173 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 174 0076 002B     		cmp	r3, #0
 175 0078 CBD0     		beq	.L6
 294:.\Generated_Source\PSoC5/FanController.c **** 
 295:.\Generated_Source\PSoC5/FanController.c ****                 #endif /* FanController_PWMRES == FanController_PWMRES_EIGHTBIT */
 296:.\Generated_Source\PSoC5/FanController.c ****             }
 297:.\Generated_Source\PSoC5/FanController.c **** 
 298:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_NUMBER_OF_FAN_OUTPUTS; counti++)
 176              		.loc 1 298 0 is_stmt 1
 177 007a 4FF00003 		mov	r3, #0
 178 007e FB71     		strb	r3, [r7, #7]
 179 0080 19E0     		b	.L7
 180              	.L8:
 299:.\Generated_Source\PSoC5/FanController.c ****             {
 300:.\Generated_Source\PSoC5/FanController.c ****                 /* Set Desired speed to initial RPM from the customizer */
 301:.\Generated_Source\PSoC5/FanController.c ****                 FanController_SetDesiredSpeed((counti + 1u), FanController_fanProperties[counti].in
 181              		.loc 1 301 0 discriminator 2
 182 0082 FB79     		ldrb	r3, [r7, #7]
 183 0084 03F10103 		add	r3, r3, #1
 184 0088 D8B2     		uxtb	r0, r3
 185 008a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 186 008c 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 187 0090 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 188 0094 0B46     		mov	r3, r1
 189 0096 4FEAC303 		lsl	r3, r3, #3
 190 009a 5B1A     		subs	r3, r3, r1
 191 009c 4FEA4303 		lsl	r3, r3, #1
 192 00a0 D318     		adds	r3, r2, r3
 193 00a2 03F10803 		add	r3, r3, #8
 194 00a6 5B88     		ldrh	r3, [r3, #2]
 195 00a8 1946     		mov	r1, r3
 196 00aa FFF7FEFF 		bl	FanController_SetDesiredSpeed
 298:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_NUMBER_OF_FAN_OUTPUTS; counti++)
 197              		.loc 1 298 0 discriminator 2
 198 00ae FB79     		ldrb	r3, [r7, #7]
 199 00b0 03F10103 		add	r3, r3, #1
 200 00b4 FB71     		strb	r3, [r7, #7]
 201              	.L7:
 298:.\Generated_Source\PSoC5/FanController.c ****             for (counti = 0u; counti < FanController_NUMBER_OF_FAN_OUTPUTS; counti++)
 202              		.loc 1 298 0 is_stmt 0 discriminator 1
 203 00b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 204 00b8 002B     		cmp	r3, #0
 205 00ba E2D0     		beq	.L8
 302:.\Generated_Source\PSoC5/FanController.c ****             }
 303:.\Generated_Source\PSoC5/FanController.c **** 
 304:.\Generated_Source\PSoC5/FanController.c ****         #endif /* ((FanController_IS_AUTO_HARDWARE_MODE) || (FanController_IS_AUTO_FIRMWARE_MODE)) 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 10


 305:.\Generated_Source\PSoC5/FanController.c **** 
 306:.\Generated_Source\PSoC5/FanController.c ****     #else
 307:.\Generated_Source\PSoC5/FanController.c **** 
 308:.\Generated_Source\PSoC5/FanController.c ****         /***********************************************************************
 309:.\Generated_Source\PSoC5/FanController.c ****         * Configure the PWMs (TCPWMs)
 310:.\Generated_Source\PSoC5/FanController.c ****         ***********************************************************************/
 311:.\Generated_Source\PSoC5/FanController.c **** 
 312:.\Generated_Source\PSoC5/FanController.c ****         /* Initialize PWMs */
 313:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_NUMBER_OF_FAN_OUTPUTS == 1u)
 314:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Init();
 315:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 2u)
 316:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Init();
 317:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Init();
 318:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 3u)
 319:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Init();
 320:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Init();
 321:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Init();
 322:.\Generated_Source\PSoC5/FanController.c ****         #else
 323:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Init();
 324:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Init();
 325:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Init();
 326:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM4_Init();
 327:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (FanController_NUMBER_OF_FAN_OUTPUTS == 1u) */
 328:.\Generated_Source\PSoC5/FanController.c **** 
 329:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FAN_OUTPUTS; counti++)
 330:.\Generated_Source\PSoC5/FanController.c ****         {
 331:.\Generated_Source\PSoC5/FanController.c ****             /* Set the hardcoded PWM period */
 332:.\Generated_Source\PSoC5/FanController.c ****             CY_SET_REG32(FanController_fanPwmInitRegs[counti].pwmPeriodReg, FanController_PWM_PERIO
 333:.\Generated_Source\PSoC5/FanController.c **** 
 334:.\Generated_Source\PSoC5/FanController.c ****             #if(FanController_IS_AUTO_FIRMWARE_MODE)
 335:.\Generated_Source\PSoC5/FanController.c ****                 /* In Auto Firmware Mode it is required to set duty cycle directly on the
 336:.\Generated_Source\PSoC5/FanController.c ****                 * start.
 337:.\Generated_Source\PSoC5/FanController.c ****                 */
 338:.\Generated_Source\PSoC5/FanController.c ****                 FanController_SetDutyCycle((counti + 1u), FanController_fanProperties[counti].initD
 339:.\Generated_Source\PSoC5/FanController.c ****             #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
 340:.\Generated_Source\PSoC5/FanController.c **** 
 341:.\Generated_Source\PSoC5/FanController.c ****             /* Set Desired speed to initial RPM from the customizer */
 342:.\Generated_Source\PSoC5/FanController.c ****             FanController_SetDesiredSpeed((counti + 1u), FanController_fanProperties[counti].initRp
 343:.\Generated_Source\PSoC5/FanController.c ****         }
 344:.\Generated_Source\PSoC5/FanController.c **** 
 345:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (!CY_PSOC4) */
 346:.\Generated_Source\PSoC5/FanController.c **** 
 347:.\Generated_Source\PSoC5/FanController.c ****     /***********************************************************************
 348:.\Generated_Source\PSoC5/FanController.c ****     * Initialize the Tachometer
 349:.\Generated_Source\PSoC5/FanController.c ****     ***********************************************************************/
 350:.\Generated_Source\PSoC5/FanController.c ****     interruptState = CyEnterCriticalSection();
 206              		.loc 1 350 0 is_stmt 1
 207 00bc FFF7FEFF 		bl	CyEnterCriticalSection
 208 00c0 0346     		mov	r3, r0
 209 00c2 BB71     		strb	r3, [r7, #6]
 351:.\Generated_Source\PSoC5/FanController.c **** 
 352:.\Generated_Source\PSoC5/FanController.c ****     /* Enable count7 hardware block to drive fan address */
 353:.\Generated_Source\PSoC5/FanController.c ****     FanController_TACH_FAN_COUNTR_AUX_CTL_REG   |= FanController_COUNT7_ENABLE;
 210              		.loc 1 353 0
 211 00c4 46F29653 		movw	r3, #26006
 212 00c8 C4F20003 		movt	r3, 16384
 213 00cc 46F29652 		movw	r2, #26006
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 11


 214 00d0 C4F20002 		movt	r2, 16384
 215 00d4 1278     		ldrb	r2, [r2, #0]
 216 00d6 D2B2     		uxtb	r2, r2
 217 00d8 42F02002 		orr	r2, r2, #32
 218 00dc D2B2     		uxtb	r2, r2
 219 00de 1A70     		strb	r2, [r3, #0]
 354:.\Generated_Source\PSoC5/FanController.c **** 
 355:.\Generated_Source\PSoC5/FanController.c ****     (void)CyExitCriticalSection(interruptState);
 220              		.loc 1 355 0
 221 00e0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 222 00e2 1846     		mov	r0, r3
 223 00e4 FFF7FEFF 		bl	CyExitCriticalSection
 356:.\Generated_Source\PSoC5/FanController.c **** 
 357:.\Generated_Source\PSoC5/FanController.c ****     /* Initialize glitch filter counter */
 358:.\Generated_Source\PSoC5/FanController.c ****     FanController_TACH_GLITCH_FILTER_PERIOD_REG = FanController_GLITCH_FILTER_VAL;
 224              		.loc 1 358 0
 225 00e8 46F22753 		movw	r3, #25895
 226 00ec C4F20003 		movt	r3, 16384
 227 00f0 4FF03C02 		mov	r2, #60
 228 00f4 1A70     		strb	r2, [r3, #0]
 359:.\Generated_Source\PSoC5/FanController.c **** 
 360:.\Generated_Source\PSoC5/FanController.c ****     #if((!FanController_IS_MANUAL_MODE) && (FanController_DAMPING_FACTOR > 0u))
 361:.\Generated_Source\PSoC5/FanController.c **** 
 362:.\Generated_Source\PSoC5/FanController.c ****         /* Set the divider by 10 */
 363:.\Generated_Source\PSoC5/FanController.c ****         FanController_DAMPING_COUNTER_DIVIDER_REG = FanController_DAMPING_FACTOR_DIVIDER_VAL;
 364:.\Generated_Source\PSoC5/FanController.c **** 
 365:.\Generated_Source\PSoC5/FanController.c ****         /* Init lower 8 bits of 16-bit Damping Factor Counter */
 366:.\Generated_Source\PSoC5/FanController.c ****          FanController_TACH_DAMPING_PERIOD_LOW_LSB_REG = FanController_DAMPING_FACTOR_PERIOD_LOW;
 367:.\Generated_Source\PSoC5/FanController.c **** 
 368:.\Generated_Source\PSoC5/FanController.c ****         /* Init high 8 bits of 16-bit Damping Factor Counter */
 369:.\Generated_Source\PSoC5/FanController.c ****         FanController_TACH_DAMPING_PERIOD_HIGH_LSB_REG = FanController_DAMPING_FACTOR_PERIOD_HIGH;
 370:.\Generated_Source\PSoC5/FanController.c **** 
 371:.\Generated_Source\PSoC5/FanController.c ****     #endif /* ((!FanController_IS_MANUAL_MODE) && (FanController_DAMPING_FACTOR > 0u)) */
 372:.\Generated_Source\PSoC5/FanController.c **** 
 373:.\Generated_Source\PSoC5/FanController.c ****     /***********************************************************************
 374:.\Generated_Source\PSoC5/FanController.c ****     * Initialize the Alert Mask Register based on customizer defaults
 375:.\Generated_Source\PSoC5/FanController.c ****     ***********************************************************************/
 376:.\Generated_Source\PSoC5/FanController.c ****     FanController_SetAlertMask(FanController_INIT_ALERT_MASK);
 229              		.loc 1 376 0
 230 00f6 4FF00100 		mov	r0, #1
 231 00fa FFF7FEFF 		bl	FanController_SetAlertMask
 377:.\Generated_Source\PSoC5/FanController.c **** 
 378:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_IS_AUTO_FIRMWARE_MODE)
 379:.\Generated_Source\PSoC5/FanController.c ****         /***********************************************************************
 380:.\Generated_Source\PSoC5/FanController.c ****         * Set PID coefficients for fans
 381:.\Generated_Source\PSoC5/FanController.c ****         ***********************************************************************/
 382:.\Generated_Source\PSoC5/FanController.c ****         for(counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 383:.\Generated_Source\PSoC5/FanController.c ****         {
 384:.\Generated_Source\PSoC5/FanController.c ****             /* Disable interrupts while updating PID constants */
 385:.\Generated_Source\PSoC5/FanController.c ****             interruptState = CyEnterCriticalSection();
 386:.\Generated_Source\PSoC5/FanController.c **** 
 387:.\Generated_Source\PSoC5/FanController.c ****             /* Initialize both PID parameters and output saturation with
 388:.\Generated_Source\PSoC5/FanController.c ****             * default values from the customizer.
 389:.\Generated_Source\PSoC5/FanController.c ****             */
 390:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA1[counti] = FanController_PID_A1;
 391:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA2[counti] = FanController_PID_A2;
 392:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA3[counti] = FanController_PID_A3;
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 12


 393:.\Generated_Source\PSoC5/FanController.c **** 
 394:.\Generated_Source\PSoC5/FanController.c ****             FanController_outputSatL[counti] = FanController_PID_OUTPUT_SAT_L;
 395:.\Generated_Source\PSoC5/FanController.c ****             FanController_outputSatH[counti] = FanController_PID_OUTPUT_SAT_H;
 396:.\Generated_Source\PSoC5/FanController.c ****             CyExitCriticalSection(interruptState);
 397:.\Generated_Source\PSoC5/FanController.c ****         }
 398:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
 399:.\Generated_Source\PSoC5/FanController.c **** 
 400:.\Generated_Source\PSoC5/FanController.c ****     /***********************************************************************
 401:.\Generated_Source\PSoC5/FanController.c ****     * Set up required interrupts
 402:.\Generated_Source\PSoC5/FanController.c ****     ***********************************************************************/
 403:.\Generated_Source\PSoC5/FanController.c ****     #if(CY_PSOC4)
 404:.\Generated_Source\PSoC5/FanController.c ****         FanController_DataSend_StartEx(&FanController_DATA_SEND_ISR);
 405:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (CY_PSOC4) */
 406:.\Generated_Source\PSoC5/FanController.c **** 
 407:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_IS_AUTO_FIRMWARE_MODE)
 408:.\Generated_Source\PSoC5/FanController.c ****         FanController_PID_ISR_StartEx(&FanController_PID_CONTROL_ISR);
 409:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
 410:.\Generated_Source\PSoC5/FanController.c **** }
 232              		.loc 1 410 0
 233 00fe 07F10807 		add	r7, r7, #8
 234 0102 BD46     		mov	sp, r7
 235 0104 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE2:
 238              		.size	FanController_Init, .-FanController_Init
 239              		.section	.text.FanController_Enable,"ax",%progbits
 240              		.align	2
 241              		.global	FanController_Enable
 242              		.thumb
 243              		.thumb_func
 244              		.type	FanController_Enable, %function
 245              	FanController_Enable:
 246              	.LFB3:
 411:.\Generated_Source\PSoC5/FanController.c **** 
 412:.\Generated_Source\PSoC5/FanController.c **** 
 413:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 414:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_Enable
 415:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 416:.\Generated_Source\PSoC5/FanController.c **** *
 417:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 418:.\Generated_Source\PSoC5/FanController.c **** *  Enables hardware blocks in the component.
 419:.\Generated_Source\PSoC5/FanController.c **** *
 420:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 421:.\Generated_Source\PSoC5/FanController.c **** *  None
 422:.\Generated_Source\PSoC5/FanController.c **** *
 423:.\Generated_Source\PSoC5/FanController.c **** * Return:
 424:.\Generated_Source\PSoC5/FanController.c **** *  None
 425:.\Generated_Source\PSoC5/FanController.c **** *
 426:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 427:.\Generated_Source\PSoC5/FanController.c **** *  None
 428:.\Generated_Source\PSoC5/FanController.c **** *
 429:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 430:.\Generated_Source\PSoC5/FanController.c **** void FanController_Enable(void) 
 431:.\Generated_Source\PSoC5/FanController.c **** {
 247              		.loc 1 431 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 8
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 13


 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              	.LCFI7:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 82B0     		sub	sp, sp, #8
 257              	.LCFI8:
 258              		.cfi_def_cfa_offset 16
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI9:
 261              		.cfi_def_cfa_register 7
 432:.\Generated_Source\PSoC5/FanController.c ****     uint8 interruptState;
 433:.\Generated_Source\PSoC5/FanController.c **** 
 434:.\Generated_Source\PSoC5/FanController.c ****     #if(CY_PSOC4)
 435:.\Generated_Source\PSoC5/FanController.c ****         /* Ehable PWMs */
 436:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_NUMBER_OF_FAN_OUTPUTS == 1u)
 437:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Enable();
 438:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 2u)
 439:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Enable();
 440:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Enable();
 441:.\Generated_Source\PSoC5/FanController.c ****         #elif(FanController_NUMBER_OF_FAN_OUTPUTS == 3u)
 442:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Enable();
 443:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Enable();
 444:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Enable();
 445:.\Generated_Source\PSoC5/FanController.c ****         #else
 446:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM1_Enable();
 447:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM2_Enable();
 448:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM3_Enable();
 449:.\Generated_Source\PSoC5/FanController.c ****             FanController_FW_PWM4_Enable();
 450:.\Generated_Source\PSoC5/FanController.c ****         #endif /*(FanController_NUMBER_OF_FAN_OUTPUTS == 1u) */
 451:.\Generated_Source\PSoC5/FanController.c **** 
 452:.\Generated_Source\PSoC5/FanController.c ****     #endif /* (CY_PSOC4) */
 453:.\Generated_Source\PSoC5/FanController.c **** 
 454:.\Generated_Source\PSoC5/FanController.c ****     /* Write to control register based on customizer defaults */
 455:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG = FanController_ENABLE | FanController_ALERT_PIN_ENABLE |
 262              		.loc 1 455 0
 263 0006 46F27743 		movw	r3, #25719
 264 000a C4F20003 		movt	r3, 16384
 265 000e 4FF02302 		mov	r2, #35
 266 0012 1A70     		strb	r2, [r3, #0]
 456:.\Generated_Source\PSoC5/FanController.c ****         ((uint8) (FanController_INIT_ALERT_ENABLE << FanController_ALERT_ENABLE_SHIFT));
 457:.\Generated_Source\PSoC5/FanController.c **** 
 458:.\Generated_Source\PSoC5/FanController.c ****     interruptState = CyEnterCriticalSection();
 267              		.loc 1 458 0
 268 0014 FFF7FEFF 		bl	CyEnterCriticalSection
 269 0018 0346     		mov	r3, r0
 270 001a FB71     		strb	r3, [r7, #7]
 459:.\Generated_Source\PSoC5/FanController.c **** 
 460:.\Generated_Source\PSoC5/FanController.c ****     /* Enable alerts from the Alert Status register */
 461:.\Generated_Source\PSoC5/FanController.c ****     FanController_STATUS_ALERT_AUX_CTL_REG |= FanController_STATUS_ALERT_ENABLE ;
 271              		.loc 1 461 0
 272 001c 46F29443 		movw	r3, #25748
 273 0020 C4F20003 		movt	r3, 16384
 274 0024 46F29442 		movw	r2, #25748
 275 0028 C4F20002 		movt	r2, 16384
 276 002c 1278     		ldrb	r2, [r2, #0]
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 14


 277 002e D2B2     		uxtb	r2, r2
 278 0030 42F01002 		orr	r2, r2, #16
 279 0034 D2B2     		uxtb	r2, r2
 280 0036 1A70     		strb	r2, [r3, #0]
 462:.\Generated_Source\PSoC5/FanController.c ****     
 463:.\Generated_Source\PSoC5/FanController.c ****     #if(!CY_PSOC4)
 464:.\Generated_Source\PSoC5/FanController.c ****         
 465:.\Generated_Source\PSoC5/FanController.c ****         /* Enable DMA channels for operation */
 466:.\Generated_Source\PSoC5/FanController.c ****         (void) CyDmaChEnable(FanController_TachOutDMA_channel, 1u);
 281              		.loc 1 466 0
 282 0038 40F20003 		movw	r3, #:lower16:FanController_TachOutDMA_channel
 283 003c C0F20003 		movt	r3, #:upper16:FanController_TachOutDMA_channel
 284 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 285 0042 1846     		mov	r0, r3
 286 0044 4FF00101 		mov	r1, #1
 287 0048 FFF7FEFF 		bl	CyDmaChEnable
 467:.\Generated_Source\PSoC5/FanController.c ****         
 468:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_IS_AUTO_HARDWARE_MODE)
 469:.\Generated_Source\PSoC5/FanController.c ****             (void) CyDmaChEnable(FanController_TachInDMA_channel, 1u);
 470:.\Generated_Source\PSoC5/FanController.c **** 
 471:.\Generated_Source\PSoC5/FanController.c ****         #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 472:.\Generated_Source\PSoC5/FanController.c ****     #endif /* !CY_PSOC4 */
 473:.\Generated_Source\PSoC5/FanController.c ****         
 474:.\Generated_Source\PSoC5/FanController.c ****     (void) CyExitCriticalSection(interruptState);
 288              		.loc 1 474 0
 289 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 290 004e 1846     		mov	r0, r3
 291 0050 FFF7FEFF 		bl	CyExitCriticalSection
 475:.\Generated_Source\PSoC5/FanController.c **** }
 292              		.loc 1 475 0
 293 0054 07F10807 		add	r7, r7, #8
 294 0058 BD46     		mov	sp, r7
 295 005a 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE3:
 298              		.size	FanController_Enable, .-FanController_Enable
 299              		.section	.text.FanController_EnableAlert,"ax",%progbits
 300              		.align	2
 301              		.global	FanController_EnableAlert
 302              		.thumb
 303              		.thumb_func
 304              		.type	FanController_EnableAlert, %function
 305              	FanController_EnableAlert:
 306              	.LFB4:
 476:.\Generated_Source\PSoC5/FanController.c **** 
 477:.\Generated_Source\PSoC5/FanController.c **** 
 478:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 479:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_EnableAlert
 480:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 481:.\Generated_Source\PSoC5/FanController.c **** *
 482:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 483:.\Generated_Source\PSoC5/FanController.c **** *  Enables alerts from this component. Specifically which alert sources are
 484:.\Generated_Source\PSoC5/FanController.c **** *  enabled is configured using SetAlertMode() API.  This API only
 485:.\Generated_Source\PSoC5/FanController.c **** *  enables alert conditions to propagate to the Fan Controller component
 486:.\Generated_Source\PSoC5/FanController.c **** *  Alert output pin.
 487:.\Generated_Source\PSoC5/FanController.c **** *
 488:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 15


 489:.\Generated_Source\PSoC5/FanController.c **** *  None
 490:.\Generated_Source\PSoC5/FanController.c **** *
 491:.\Generated_Source\PSoC5/FanController.c **** * Return:
 492:.\Generated_Source\PSoC5/FanController.c **** *  None
 493:.\Generated_Source\PSoC5/FanController.c **** *
 494:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 495:.\Generated_Source\PSoC5/FanController.c **** *  None
 496:.\Generated_Source\PSoC5/FanController.c **** *
 497:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 498:.\Generated_Source\PSoC5/FanController.c **** void FanController_EnableAlert(void) 
 499:.\Generated_Source\PSoC5/FanController.c **** {
 307              		.loc 1 499 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 8
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311 0000 80B5     		push	{r7, lr}
 312              	.LCFI10:
 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 14, -4
 316 0002 82B0     		sub	sp, sp, #8
 317              	.LCFI11:
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI12:
 321              		.cfi_def_cfa_register 7
 500:.\Generated_Source\PSoC5/FanController.c ****     uint8 interruptState = CyEnterCriticalSection();
 322              		.loc 1 500 0
 323 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 324 000a 0346     		mov	r3, r0
 325 000c FB71     		strb	r3, [r7, #7]
 501:.\Generated_Source\PSoC5/FanController.c **** 
 502:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG |= FanController_ALERT_PIN_ENABLE;
 326              		.loc 1 502 0
 327 000e 46F27743 		movw	r3, #25719
 328 0012 C4F20003 		movt	r3, 16384
 329 0016 46F27742 		movw	r2, #25719
 330 001a C4F20002 		movt	r2, 16384
 331 001e 1278     		ldrb	r2, [r2, #0]
 332 0020 D2B2     		uxtb	r2, r2
 333 0022 42F00102 		orr	r2, r2, #1
 334 0026 D2B2     		uxtb	r2, r2
 335 0028 1A70     		strb	r2, [r3, #0]
 503:.\Generated_Source\PSoC5/FanController.c **** 
 504:.\Generated_Source\PSoC5/FanController.c ****     (void) CyExitCriticalSection(interruptState);
 336              		.loc 1 504 0
 337 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 338 002c 1846     		mov	r0, r3
 339 002e FFF7FEFF 		bl	CyExitCriticalSection
 505:.\Generated_Source\PSoC5/FanController.c **** }
 340              		.loc 1 505 0
 341 0032 07F10807 		add	r7, r7, #8
 342 0036 BD46     		mov	sp, r7
 343 0038 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE4:
 346              		.size	FanController_EnableAlert, .-FanController_EnableAlert
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 16


 347 003a 00BF     		.section	.text.FanController_DisableAlert,"ax",%progbits
 348              		.align	2
 349              		.global	FanController_DisableAlert
 350              		.thumb
 351              		.thumb_func
 352              		.type	FanController_DisableAlert, %function
 353              	FanController_DisableAlert:
 354              	.LFB5:
 506:.\Generated_Source\PSoC5/FanController.c **** 
 507:.\Generated_Source\PSoC5/FanController.c **** 
 508:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 509:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_DisableAlert
 510:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 511:.\Generated_Source\PSoC5/FanController.c **** *
 512:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 513:.\Generated_Source\PSoC5/FanController.c **** *  Disables alerts from this component. This API only disables alert
 514:.\Generated_Source\PSoC5/FanController.c **** *  conditions from propagating to the fan controller component Alert output/pin
 515:.\Generated_Source\PSoC5/FanController.c **** *
 516:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 517:.\Generated_Source\PSoC5/FanController.c **** *  None
 518:.\Generated_Source\PSoC5/FanController.c **** *
 519:.\Generated_Source\PSoC5/FanController.c **** * Return:
 520:.\Generated_Source\PSoC5/FanController.c **** *  None
 521:.\Generated_Source\PSoC5/FanController.c **** *
 522:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 523:.\Generated_Source\PSoC5/FanController.c **** *  None
 524:.\Generated_Source\PSoC5/FanController.c **** *
 525:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 526:.\Generated_Source\PSoC5/FanController.c **** void FanController_DisableAlert(void) 
 527:.\Generated_Source\PSoC5/FanController.c **** {
 355              		.loc 1 527 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI13:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 82B0     		sub	sp, sp, #8
 365              	.LCFI14:
 366              		.cfi_def_cfa_offset 16
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI15:
 369              		.cfi_def_cfa_register 7
 528:.\Generated_Source\PSoC5/FanController.c ****     uint8 interruptState = CyEnterCriticalSection();
 370              		.loc 1 528 0
 371 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 372 000a 0346     		mov	r3, r0
 373 000c FB71     		strb	r3, [r7, #7]
 529:.\Generated_Source\PSoC5/FanController.c **** 
 530:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG &= (uint8) ~FanController_ALERT_PIN_ENABLE;
 374              		.loc 1 530 0
 375 000e 46F27743 		movw	r3, #25719
 376 0012 C4F20003 		movt	r3, 16384
 377 0016 46F27742 		movw	r2, #25719
 378 001a C4F20002 		movt	r2, 16384
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 17


 379 001e 1278     		ldrb	r2, [r2, #0]
 380 0020 D2B2     		uxtb	r2, r2
 381 0022 22F00102 		bic	r2, r2, #1
 382 0026 D2B2     		uxtb	r2, r2
 383 0028 1A70     		strb	r2, [r3, #0]
 531:.\Generated_Source\PSoC5/FanController.c **** 
 532:.\Generated_Source\PSoC5/FanController.c ****     (void) CyExitCriticalSection(interruptState);
 384              		.loc 1 532 0
 385 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 386 002c 1846     		mov	r0, r3
 387 002e FFF7FEFF 		bl	CyExitCriticalSection
 533:.\Generated_Source\PSoC5/FanController.c **** }
 388              		.loc 1 533 0
 389 0032 07F10807 		add	r7, r7, #8
 390 0036 BD46     		mov	sp, r7
 391 0038 80BD     		pop	{r7, pc}
 392              		.cfi_endproc
 393              	.LFE5:
 394              		.size	FanController_DisableAlert, .-FanController_DisableAlert
 395 003a 00BF     		.section	.text.FanController_SetAlertMode,"ax",%progbits
 396              		.align	2
 397              		.global	FanController_SetAlertMode
 398              		.thumb
 399              		.thumb_func
 400              		.type	FanController_SetAlertMode, %function
 401              	FanController_SetAlertMode:
 402              	.LFB6:
 534:.\Generated_Source\PSoC5/FanController.c **** 
 535:.\Generated_Source\PSoC5/FanController.c **** 
 536:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 537:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_SetAlertMode
 538:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 539:.\Generated_Source\PSoC5/FanController.c **** *
 540:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 541:.\Generated_Source\PSoC5/FanController.c **** *  Enables alert sources from the component.
 542:.\Generated_Source\PSoC5/FanController.c **** *
 543:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 544:.\Generated_Source\PSoC5/FanController.c **** *  alertMode:
 545:.\Generated_Source\PSoC5/FanController.c **** *   b0:   STALL_ALERT_ENABLE (1==Enable, 0==Disable)
 546:.\Generated_Source\PSoC5/FanController.c **** *   b1:   SPEED_ALERT_ENABLE (1==Enable, 0==Disable)
 547:.\Generated_Source\PSoC5/FanController.c **** *   b7-2: RESERVED (write with zeroes)
 548:.\Generated_Source\PSoC5/FanController.c **** *
 549:.\Generated_Source\PSoC5/FanController.c **** * Return:
 550:.\Generated_Source\PSoC5/FanController.c **** *  None
 551:.\Generated_Source\PSoC5/FanController.c **** *
 552:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 553:.\Generated_Source\PSoC5/FanController.c **** *  None
 554:.\Generated_Source\PSoC5/FanController.c **** *
 555:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 556:.\Generated_Source\PSoC5/FanController.c **** void FanController_SetAlertMode(uint8 alertMode) 
 557:.\Generated_Source\PSoC5/FanController.c **** {
 403              		.loc 1 557 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 16
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 0000 80B5     		push	{r7, lr}
 408              	.LCFI16:
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 18


 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412 0002 84B0     		sub	sp, sp, #16
 413              	.LCFI17:
 414              		.cfi_def_cfa_offset 24
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI18:
 417              		.cfi_def_cfa_register 7
 418 0006 0346     		mov	r3, r0
 419 0008 FB71     		strb	r3, [r7, #7]
 558:.\Generated_Source\PSoC5/FanController.c ****     uint8 interruptState = CyEnterCriticalSection();
 420              		.loc 1 558 0
 421 000a FFF7FEFF 		bl	CyEnterCriticalSection
 422 000e 0346     		mov	r3, r0
 423 0010 FB73     		strb	r3, [r7, #15]
 559:.\Generated_Source\PSoC5/FanController.c **** 
 560:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG = (FanController_GLOBAL_CONTROL_REG &
 424              		.loc 1 560 0
 425 0012 46F27743 		movw	r3, #25719
 426 0016 C4F20003 		movt	r3, 16384
 427 001a 46F27742 		movw	r2, #25719
 428 001e C4F20002 		movt	r2, 16384
 429 0022 1278     		ldrb	r2, [r2, #0]
 430 0024 D2B2     		uxtb	r2, r2
 431 0026 D2B2     		uxtb	r2, r2
 432 0028 22F00602 		bic	r2, r2, #6
 433 002c D1B2     		uxtb	r1, r2
 561:.\Generated_Source\PSoC5/FanController.c ****             (uint8) ~FanController_ALERT_ENABLE_MASK) |
 562:.\Generated_Source\PSoC5/FanController.c ****                ((uint8) (alertMode << FanController_ALERT_ENABLE_SHIFT) & FanController_ALERT_ENABL
 434              		.loc 1 562 0
 435 002e FA79     		ldrb	r2, [r7, #7]
 436 0030 4FEA4202 		lsl	r2, r2, #1
 437 0034 D2B2     		uxtb	r2, r2
 560:.\Generated_Source\PSoC5/FanController.c ****     FanController_GLOBAL_CONTROL_REG = (FanController_GLOBAL_CONTROL_REG &
 438              		.loc 1 560 0
 439 0036 D2B2     		uxtb	r2, r2
 440 0038 02F00602 		and	r2, r2, #6
 441 003c D2B2     		uxtb	r2, r2
 442 003e 0A43     		orrs	r2, r2, r1
 443 0040 D2B2     		uxtb	r2, r2
 444 0042 D2B2     		uxtb	r2, r2
 445 0044 1A70     		strb	r2, [r3, #0]
 563:.\Generated_Source\PSoC5/FanController.c **** 
 564:.\Generated_Source\PSoC5/FanController.c ****     (void) CyExitCriticalSection(interruptState);
 446              		.loc 1 564 0
 447 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 448 0048 1846     		mov	r0, r3
 449 004a FFF7FEFF 		bl	CyExitCriticalSection
 565:.\Generated_Source\PSoC5/FanController.c **** }
 450              		.loc 1 565 0
 451 004e 07F11007 		add	r7, r7, #16
 452 0052 BD46     		mov	sp, r7
 453 0054 80BD     		pop	{r7, pc}
 454              		.cfi_endproc
 455              	.LFE6:
 456              		.size	FanController_SetAlertMode, .-FanController_SetAlertMode
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 19


 457 0056 00BF     		.section	.text.FanController_GetAlertMode,"ax",%progbits
 458              		.align	2
 459              		.global	FanController_GetAlertMode
 460              		.thumb
 461              		.thumb_func
 462              		.type	FanController_GetAlertMode, %function
 463              	FanController_GetAlertMode:
 464              	.LFB7:
 566:.\Generated_Source\PSoC5/FanController.c **** 
 567:.\Generated_Source\PSoC5/FanController.c **** 
 568:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 569:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetAlertMode
 570:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 571:.\Generated_Source\PSoC5/FanController.c **** *
 572:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 573:.\Generated_Source\PSoC5/FanController.c **** * Returns enabled alert sources from this component.
 574:.\Generated_Source\PSoC5/FanController.c **** *
 575:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 576:.\Generated_Source\PSoC5/FanController.c **** *  None
 577:.\Generated_Source\PSoC5/FanController.c **** *
 578:.\Generated_Source\PSoC5/FanController.c **** * Return:
 579:.\Generated_Source\PSoC5/FanController.c **** *  alertMode:
 580:.\Generated_Source\PSoC5/FanController.c **** *   b0:   STALL_ALERT_ENABLE (1==Enable, 0==Disable)
 581:.\Generated_Source\PSoC5/FanController.c **** *   b1:   SPEED_ALERT_ENABLE (1==Enable, 0==Disable)
 582:.\Generated_Source\PSoC5/FanController.c **** *   b7-2: RESERVED (write with zeroes)
 583:.\Generated_Source\PSoC5/FanController.c **** *
 584:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 585:.\Generated_Source\PSoC5/FanController.c **** *  None
 586:.\Generated_Source\PSoC5/FanController.c **** *
 587:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 588:.\Generated_Source\PSoC5/FanController.c **** uint8 FanController_GetAlertMode(void) 
 589:.\Generated_Source\PSoC5/FanController.c **** {
 465              		.loc 1 589 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0000 80B4     		push	{r7}
 471              	.LCFI19:
 472              		.cfi_def_cfa_offset 4
 473              		.cfi_offset 7, -4
 474 0002 00AF     		add	r7, sp, #0
 475              	.LCFI20:
 476              		.cfi_def_cfa_register 7
 590:.\Generated_Source\PSoC5/FanController.c ****     return((FanController_GLOBAL_CONTROL_REG & FanController_ALERT_ENABLE_MASK) >>
 477              		.loc 1 590 0
 478 0004 46F27743 		movw	r3, #25719
 479 0008 C4F20003 		movt	r3, 16384
 480 000c 1B78     		ldrb	r3, [r3, #0]
 481 000e DBB2     		uxtb	r3, r3
 482 0010 03F00603 		and	r3, r3, #6
 483 0014 4FEA6303 		asr	r3, r3, #1
 484 0018 DBB2     		uxtb	r3, r3
 591:.\Generated_Source\PSoC5/FanController.c ****                 FanController_ALERT_ENABLE_SHIFT);
 592:.\Generated_Source\PSoC5/FanController.c **** }
 485              		.loc 1 592 0
 486 001a 1846     		mov	r0, r3
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 20


 487 001c BD46     		mov	sp, r7
 488 001e 80BC     		pop	{r7}
 489 0020 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE7:
 492              		.size	FanController_GetAlertMode, .-FanController_GetAlertMode
 493 0022 00BF     		.section	.text.FanController_SetAlertMask,"ax",%progbits
 494              		.align	2
 495              		.global	FanController_SetAlertMask
 496              		.thumb
 497              		.thumb_func
 498              		.type	FanController_SetAlertMask, %function
 499              	FanController_SetAlertMask:
 500              	.LFB8:
 593:.\Generated_Source\PSoC5/FanController.c **** 
 594:.\Generated_Source\PSoC5/FanController.c **** 
 595:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 596:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_SetAlertMask
 597:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 598:.\Generated_Source\PSoC5/FanController.c **** *
 599:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 600:.\Generated_Source\PSoC5/FanController.c **** *  Sets the per fan Alert Mask for both Stall and Speed errors.
 601:.\Generated_Source\PSoC5/FanController.c **** *
 602:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 603:.\Generated_Source\PSoC5/FanController.c **** *  alertMask (1==Enable Alert, 0==Disable Alert)
 604:.\Generated_Source\PSoC5/FanController.c **** *   b0:   FAN1 ALERT ENABLE/DISABLE
 605:.\Generated_Source\PSoC5/FanController.c **** *   b1:   FAN2 ALERT ENABLE/DISABLE
 606:.\Generated_Source\PSoC5/FanController.c **** *   ...
 607:.\Generated_Source\PSoC5/FanController.c **** *   b15:  FAN16 ALERT ENABLE/DISABLE
 608:.\Generated_Source\PSoC5/FanController.c **** *
 609:.\Generated_Source\PSoC5/FanController.c **** * Return:
 610:.\Generated_Source\PSoC5/FanController.c **** *  None
 611:.\Generated_Source\PSoC5/FanController.c **** *
 612:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 613:.\Generated_Source\PSoC5/FanController.c **** *  None
 614:.\Generated_Source\PSoC5/FanController.c **** *
 615:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 616:.\Generated_Source\PSoC5/FanController.c **** void FanController_SetAlertMask(uint16 alertMask) 
 617:.\Generated_Source\PSoC5/FanController.c **** {
 501              		.loc 1 617 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 0000 80B4     		push	{r7}
 507              	.LCFI21:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 0002 83B0     		sub	sp, sp, #12
 511              	.LCFI22:
 512              		.cfi_def_cfa_offset 16
 513 0004 00AF     		add	r7, sp, #0
 514              	.LCFI23:
 515              		.cfi_def_cfa_register 7
 516 0006 0346     		mov	r3, r0
 517 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 618:.\Generated_Source\PSoC5/FanController.c ****     FanController_ALERT_MASK_LSB_CONTROL_REG = LO8(alertMask);
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 21


 518              		.loc 1 618 0
 519 000a 46F27643 		movw	r3, #25718
 520 000e C4F20003 		movt	r3, 16384
 521 0012 FA88     		ldrh	r2, [r7, #6]	@ movhi
 522 0014 D2B2     		uxtb	r2, r2
 523 0016 1A70     		strb	r2, [r3, #0]
 619:.\Generated_Source\PSoC5/FanController.c **** 
 620:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_NUMBER_OF_FANS > 8u)
 621:.\Generated_Source\PSoC5/FanController.c ****         FanController_ALERT_MASK_MSB_CONTROL_REG = HI8(alertMask);
 622:.\Generated_Source\PSoC5/FanController.c ****     #endif /* FanController_NUMBER_OF_FANS > 8u */
 623:.\Generated_Source\PSoC5/FanController.c **** }
 524              		.loc 1 623 0
 525 0018 07F10C07 		add	r7, r7, #12
 526 001c BD46     		mov	sp, r7
 527 001e 80BC     		pop	{r7}
 528 0020 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE8:
 531              		.size	FanController_SetAlertMask, .-FanController_SetAlertMask
 532 0022 00BF     		.section	.text.FanController_GetAlertMask,"ax",%progbits
 533              		.align	2
 534              		.global	FanController_GetAlertMask
 535              		.thumb
 536              		.thumb_func
 537              		.type	FanController_GetAlertMask, %function
 538              	FanController_GetAlertMask:
 539              	.LFB9:
 624:.\Generated_Source\PSoC5/FanController.c **** 
 625:.\Generated_Source\PSoC5/FanController.c **** 
 626:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 627:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetAlertMask
 628:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 629:.\Generated_Source\PSoC5/FanController.c **** *
 630:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 631:.\Generated_Source\PSoC5/FanController.c **** *  Gets the current per fan Alert Mask for both Stall and Speed errors.
 632:.\Generated_Source\PSoC5/FanController.c **** *
 633:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 634:.\Generated_Source\PSoC5/FanController.c **** *  None
 635:.\Generated_Source\PSoC5/FanController.c **** *
 636:.\Generated_Source\PSoC5/FanController.c **** * Return:
 637:.\Generated_Source\PSoC5/FanController.c **** *  alertMask (1==Alert Enabled, 0==Alert Disabled)
 638:.\Generated_Source\PSoC5/FanController.c **** *   b0:   FAN1 ALERT ENABLE/DISABLE
 639:.\Generated_Source\PSoC5/FanController.c **** *   b1:   FAN2 ALERT ENABLE/DISABLE
 640:.\Generated_Source\PSoC5/FanController.c **** *   ...
 641:.\Generated_Source\PSoC5/FanController.c **** *   b15:  FAN16 ALERT ENABLE/DISABLE
 642:.\Generated_Source\PSoC5/FanController.c **** *
 643:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 644:.\Generated_Source\PSoC5/FanController.c **** *  None
 645:.\Generated_Source\PSoC5/FanController.c **** *
 646:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 647:.\Generated_Source\PSoC5/FanController.c **** uint16 FanController_GetAlertMask(void) 
 648:.\Generated_Source\PSoC5/FanController.c **** {
 540              		.loc 1 648 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 8
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 22


 545 0000 80B4     		push	{r7}
 546              	.LCFI24:
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 83B0     		sub	sp, sp, #12
 550              	.LCFI25:
 551              		.cfi_def_cfa_offset 16
 552 0004 00AF     		add	r7, sp, #0
 553              	.LCFI26:
 554              		.cfi_def_cfa_register 7
 649:.\Generated_Source\PSoC5/FanController.c ****     uint16 alertMask;
 650:.\Generated_Source\PSoC5/FanController.c **** 
 651:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_NUMBER_OF_FANS > 8u)
 652:.\Generated_Source\PSoC5/FanController.c ****         alertMask = (uint16)FanController_ALERT_MASK_LSB_CONTROL_REG |
 653:.\Generated_Source\PSoC5/FanController.c ****             ((uint16)FanController_ALERT_MASK_MSB_CONTROL_REG << 8u);
 654:.\Generated_Source\PSoC5/FanController.c ****     #else
 655:.\Generated_Source\PSoC5/FanController.c ****         alertMask = (uint16)FanController_ALERT_MASK_LSB_CONTROL_REG;
 555              		.loc 1 655 0
 556 0006 46F27643 		movw	r3, #25718
 557 000a C4F20003 		movt	r3, 16384
 558 000e 1B78     		ldrb	r3, [r3, #0]
 559 0010 DBB2     		uxtb	r3, r3
 560 0012 FB80     		strh	r3, [r7, #6]	@ movhi
 656:.\Generated_Source\PSoC5/FanController.c ****     #endif /* FanController_NUMBER_OF_FANS > 8u */
 657:.\Generated_Source\PSoC5/FanController.c **** 
 658:.\Generated_Source\PSoC5/FanController.c ****     return(alertMask);
 561              		.loc 1 658 0
 562 0014 FB88     		ldrh	r3, [r7, #6]
 659:.\Generated_Source\PSoC5/FanController.c **** }
 563              		.loc 1 659 0
 564 0016 1846     		mov	r0, r3
 565 0018 07F10C07 		add	r7, r7, #12
 566 001c BD46     		mov	sp, r7
 567 001e 80BC     		pop	{r7}
 568 0020 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE9:
 571              		.size	FanController_GetAlertMask, .-FanController_GetAlertMask
 572 0022 00BF     		.section	.text.FanController_GetAlertSource,"ax",%progbits
 573              		.align	2
 574              		.global	FanController_GetAlertSource
 575              		.thumb
 576              		.thumb_func
 577              		.type	FanController_GetAlertSource, %function
 578              	FanController_GetAlertSource:
 579              	.LFB10:
 660:.\Generated_Source\PSoC5/FanController.c **** 
 661:.\Generated_Source\PSoC5/FanController.c **** 
 662:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 663:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetAlertSource
 664:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 665:.\Generated_Source\PSoC5/FanController.c **** *
 666:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 667:.\Generated_Source\PSoC5/FanController.c **** *  Returns pending alert sources. The alert pin is not de-asserted through
 668:.\Generated_Source\PSoC5/FanController.c **** *  this API call. If this API call returns a non-zero value, call the
 669:.\Generated_Source\PSoC5/FanController.c **** *  GetFanStallStatus() or GetFanSpeedStatus() APIs to determine the exact
 670:.\Generated_Source\PSoC5/FanController.c **** *  source of the alert and simultaneously de-assert the pending alert and
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 23


 671:.\Generated_Source\PSoC5/FanController.c **** *  alert pin.
 672:.\Generated_Source\PSoC5/FanController.c **** *
 673:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 674:.\Generated_Source\PSoC5/FanController.c **** *  None
 675:.\Generated_Source\PSoC5/FanController.c **** *
 676:.\Generated_Source\PSoC5/FanController.c **** * Return:
 677:.\Generated_Source\PSoC5/FanController.c **** *  alertSource:
 678:.\Generated_Source\PSoC5/FanController.c **** *   b0:   STALL_ALERT (1==Present, 0==Not Present)
 679:.\Generated_Source\PSoC5/FanController.c **** *   b1:   SPEED_ALERT (1==Present, 0==Not Present)
 680:.\Generated_Source\PSoC5/FanController.c **** *   b7-2: RESERVED (returns all zeroes)
 681:.\Generated_Source\PSoC5/FanController.c **** *
 682:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 683:.\Generated_Source\PSoC5/FanController.c **** *  None
 684:.\Generated_Source\PSoC5/FanController.c **** *
 685:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 686:.\Generated_Source\PSoC5/FanController.c **** uint8 FanController_GetAlertSource(void) 
 687:.\Generated_Source\PSoC5/FanController.c **** {
 580              		.loc 1 687 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585 0000 80B4     		push	{r7}
 586              	.LCFI27:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 00AF     		add	r7, sp, #0
 590              	.LCFI28:
 591              		.cfi_def_cfa_register 7
 688:.\Generated_Source\PSoC5/FanController.c ****     return ((FanController_ALERT_STATUS_REG & FanController_ALERT_STATUS_MASK));
 592              		.loc 1 688 0
 593 0004 46F26443 		movw	r3, #25700
 594 0008 C4F20003 		movt	r3, 16384
 595 000c 1B78     		ldrb	r3, [r3, #0]
 596 000e DBB2     		uxtb	r3, r3
 597 0010 03F00303 		and	r3, r3, #3
 598 0014 DBB2     		uxtb	r3, r3
 689:.\Generated_Source\PSoC5/FanController.c **** }
 599              		.loc 1 689 0
 600 0016 1846     		mov	r0, r3
 601 0018 BD46     		mov	sp, r7
 602 001a 80BC     		pop	{r7}
 603 001c 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE10:
 606              		.size	FanController_GetAlertSource, .-FanController_GetAlertSource
 607 001e 00BF     		.section	.text.FanController_GetFanStallStatus,"ax",%progbits
 608              		.align	2
 609              		.global	FanController_GetFanStallStatus
 610              		.thumb
 611              		.thumb_func
 612              		.type	FanController_GetFanStallStatus, %function
 613              	FanController_GetFanStallStatus:
 614              	.LFB11:
 690:.\Generated_Source\PSoC5/FanController.c **** 
 691:.\Generated_Source\PSoC5/FanController.c **** 
 692:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 24


 693:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetFanStallStatus
 694:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 695:.\Generated_Source\PSoC5/FanController.c **** *
 696:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 697:.\Generated_Source\PSoC5/FanController.c **** *  Returns the stall status of all fans
 698:.\Generated_Source\PSoC5/FanController.c **** *
 699:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 700:.\Generated_Source\PSoC5/FanController.c **** *  None
 701:.\Generated_Source\PSoC5/FanController.c **** *
 702:.\Generated_Source\PSoC5/FanController.c **** * Return:
 703:.\Generated_Source\PSoC5/FanController.c **** *  stallStatus (1==Fan Stalled, 0=Fan OK)
 704:.\Generated_Source\PSoC5/FanController.c **** *   b0:   FAN1 STALL
 705:.\Generated_Source\PSoC5/FanController.c **** *   b1:   FAN2 STALL
 706:.\Generated_Source\PSoC5/FanController.c **** *   ...
 707:.\Generated_Source\PSoC5/FanController.c **** *   b15:  FAN16 STALL
 708:.\Generated_Source\PSoC5/FanController.c **** *
 709:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 710:.\Generated_Source\PSoC5/FanController.c **** *  Calling this API de-asserts the alert pin and clears all pending stall
 711:.\Generated_Source\PSoC5/FanController.c **** *  status alerts.
 712:.\Generated_Source\PSoC5/FanController.c **** *
 713:.\Generated_Source\PSoC5/FanController.c **** ******************************************************************************/
 714:.\Generated_Source\PSoC5/FanController.c **** uint16 FanController_GetFanStallStatus(void) 
 715:.\Generated_Source\PSoC5/FanController.c **** {
 615              		.loc 1 715 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 8
 618              		@ frame_needed = 1, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620 0000 80B4     		push	{r7}
 621              	.LCFI29:
 622              		.cfi_def_cfa_offset 4
 623              		.cfi_offset 7, -4
 624 0002 83B0     		sub	sp, sp, #12
 625              	.LCFI30:
 626              		.cfi_def_cfa_offset 16
 627 0004 00AF     		add	r7, sp, #0
 628              	.LCFI31:
 629              		.cfi_def_cfa_register 7
 716:.\Generated_Source\PSoC5/FanController.c ****     uint16 stallStatus;
 717:.\Generated_Source\PSoC5/FanController.c **** 
 718:.\Generated_Source\PSoC5/FanController.c ****     #if(FanController_NUMBER_OF_FANS > 8u)
 719:.\Generated_Source\PSoC5/FanController.c ****         stallStatus = (uint16)FanController_STALL_ERROR_LSB_STATUS_REG |
 720:.\Generated_Source\PSoC5/FanController.c ****             ((uint16)FanController_STALL_ERROR_MSB_STATUS_REG << 8u);
 721:.\Generated_Source\PSoC5/FanController.c ****     #else
 722:.\Generated_Source\PSoC5/FanController.c ****         stallStatus = (uint16)FanController_STALL_ERROR_LSB_STATUS_REG;
 630              		.loc 1 722 0
 631 0006 46F26743 		movw	r3, #25703
 632 000a C4F20003 		movt	r3, 16384
 633 000e 1B78     		ldrb	r3, [r3, #0]
 634 0010 DBB2     		uxtb	r3, r3
 635 0012 FB80     		strh	r3, [r7, #6]	@ movhi
 723:.\Generated_Source\PSoC5/FanController.c ****     #endif /* FanController_NUMBER_OF_FANS > 8u */
 724:.\Generated_Source\PSoC5/FanController.c **** 
 725:.\Generated_Source\PSoC5/FanController.c ****     return(stallStatus);
 636              		.loc 1 725 0
 637 0014 FB88     		ldrh	r3, [r7, #6]
 726:.\Generated_Source\PSoC5/FanController.c **** }
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 25


 638              		.loc 1 726 0
 639 0016 1846     		mov	r0, r3
 640 0018 07F10C07 		add	r7, r7, #12
 641 001c BD46     		mov	sp, r7
 642 001e 80BC     		pop	{r7}
 643 0020 7047     		bx	lr
 644              		.cfi_endproc
 645              	.LFE11:
 646              		.size	FanController_GetFanStallStatus, .-FanController_GetFanStallStatus
 647 0022 00BF     		.section	.text.FanController_SetDutyCycle,"ax",%progbits
 648              		.align	2
 649              		.global	FanController_SetDutyCycle
 650              		.thumb
 651              		.thumb_func
 652              		.type	FanController_SetDutyCycle, %function
 653              	FanController_SetDutyCycle:
 654              	.LFB12:
 727:.\Generated_Source\PSoC5/FanController.c **** 
 728:.\Generated_Source\PSoC5/FanController.c **** 
 729:.\Generated_Source\PSoC5/FanController.c **** #if (!FanController_IS_MANUAL_MODE)
 730:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
 731:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_GetFanSpeedStatus
 732:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
 733:.\Generated_Source\PSoC5/FanController.c ****     *
 734:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
 735:.\Generated_Source\PSoC5/FanController.c ****     *  Returns the speed regulation status of all fans.
 736:.\Generated_Source\PSoC5/FanController.c ****     *  This API is not available if Firmware Controller fan control methed is
 737:.\Generated_Source\PSoC5/FanController.c ****     *  selected.
 738:.\Generated_Source\PSoC5/FanController.c ****     *
 739:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
 740:.\Generated_Source\PSoC5/FanController.c ****     *  None
 741:.\Generated_Source\PSoC5/FanController.c ****     *
 742:.\Generated_Source\PSoC5/FanController.c ****     * Return:
 743:.\Generated_Source\PSoC5/FanController.c ****     *  speedStatus (1==Fan Speed Failure, 0=Fan OK)
 744:.\Generated_Source\PSoC5/FanController.c ****     *   b0:   FAN1 SPEED REGULATION FAIL
 745:.\Generated_Source\PSoC5/FanController.c ****     *   b1:   FAN2 SPEED REGULATION FAIL
 746:.\Generated_Source\PSoC5/FanController.c ****     *   ...
 747:.\Generated_Source\PSoC5/FanController.c ****     *   b15:  FAN16 SPEED REGULATION FAIL
 748:.\Generated_Source\PSoC5/FanController.c ****     *
 749:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
 750:.\Generated_Source\PSoC5/FanController.c ****     *  Calling this API de-asserts the alert pin and clears all pending speed
 751:.\Generated_Source\PSoC5/FanController.c ****     *  regulation failure status alerts.
 752:.\Generated_Source\PSoC5/FanController.c ****     *
 753:.\Generated_Source\PSoC5/FanController.c ****     ******************************************************************************/
 754:.\Generated_Source\PSoC5/FanController.c ****     uint16 FanController_GetFanSpeedStatus(void) 
 755:.\Generated_Source\PSoC5/FanController.c ****     {
 756:.\Generated_Source\PSoC5/FanController.c ****         uint16 speedStatus;
 757:.\Generated_Source\PSoC5/FanController.c **** 
 758:.\Generated_Source\PSoC5/FanController.c ****         /* In case of Auto Hardware mode speed status is received from hardware
 759:.\Generated_Source\PSoC5/FanController.c ****         * status register...
 760:.\Generated_Source\PSoC5/FanController.c ****         */
 761:.\Generated_Source\PSoC5/FanController.c ****         #if (FanController_IS_AUTO_HARDWARE_MODE)
 762:.\Generated_Source\PSoC5/FanController.c ****             #if (FanController_NUMBER_OF_FANS > 8u)
 763:.\Generated_Source\PSoC5/FanController.c ****                 speedStatus = (uint16)FanController_SPEED_ERROR_LSB_STATUS_REG |
 764:.\Generated_Source\PSoC5/FanController.c ****                     ((uint16)FanController_SPEED_ERROR_MSB_STATUS_REG << 8u);
 765:.\Generated_Source\PSoC5/FanController.c ****             #else
 766:.\Generated_Source\PSoC5/FanController.c ****                 speedStatus = (uint16)FanController_SPEED_ERROR_LSB_STATUS_REG;
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 26


 767:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_NUMBER_OF_FANS > 8u */
 768:.\Generated_Source\PSoC5/FanController.c ****         #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 769:.\Generated_Source\PSoC5/FanController.c **** 
 770:.\Generated_Source\PSoC5/FanController.c ****         /* ... in case of Auto Firmware mode the software status is used. */
 771:.\Generated_Source\PSoC5/FanController.c ****         #if (FanController_IS_AUTO_FIRMWARE_MODE)
 772:.\Generated_Source\PSoC5/FanController.c **** 
 773:.\Generated_Source\PSoC5/FanController.c ****             speedStatus = FanController_speedStatus;
 774:.\Generated_Source\PSoC5/FanController.c **** 
 775:.\Generated_Source\PSoC5/FanController.c ****             /* Simulate clear-on-read status */
 776:.\Generated_Source\PSoC5/FanController.c ****             FanController_speedStatus = 0u;
 777:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
 778:.\Generated_Source\PSoC5/FanController.c **** 
 779:.\Generated_Source\PSoC5/FanController.c ****         return(speedStatus);
 780:.\Generated_Source\PSoC5/FanController.c ****     }
 781:.\Generated_Source\PSoC5/FanController.c **** 
 782:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!FanController_IS_MANUAL_MODE) */
 783:.\Generated_Source\PSoC5/FanController.c **** 
 784:.\Generated_Source\PSoC5/FanController.c **** 
 785:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 786:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_SetDutyCycle
 787:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 788:.\Generated_Source\PSoC5/FanController.c **** *
 789:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 790:.\Generated_Source\PSoC5/FanController.c **** *  Sets the duty cycle of selected fan or bank in hundredths of a percent,
 791:.\Generated_Source\PSoC5/FanController.c **** *  i.e. 5000=50% duty cycle. In hardware controlled fan mode, if manual duty
 792:.\Generated_Source\PSoC5/FanController.c **** *  cycle control is desirable, call the OverrideAutomaticControl(true) API 
 793:.\Generated_Source\PSoC5/FanController.c **** *  prior to calling this API.
 794:.\Generated_Source\PSoC5/FanController.c **** *
 795:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 796:.\Generated_Source\PSoC5/FanController.c **** *  uint8 fanOrBankNumber
 797:.\Generated_Source\PSoC5/FanController.c **** *   Valid range is 1-16 and should not exceed the number of fans or banks in the
 798:.\Generated_Source\PSoC5/FanController.c **** *   system.
 799:.\Generated_Source\PSoC5/FanController.c **** *
 800:.\Generated_Source\PSoC5/FanController.c **** *  uint16 dutyCycle
 801:.\Generated_Source\PSoC5/FanController.c **** *   dutyCycle is entered in hundredths of a percent, i.e. 5000=50% duty cycle
 802:.\Generated_Source\PSoC5/FanController.c **** *   Valid range is 0 to 10000.
 803:.\Generated_Source\PSoC5/FanController.c **** *
 804:.\Generated_Source\PSoC5/FanController.c **** * Return:
 805:.\Generated_Source\PSoC5/FanController.c **** *  None
 806:.\Generated_Source\PSoC5/FanController.c **** *
 807:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 808:.\Generated_Source\PSoC5/FanController.c **** *  None
 809:.\Generated_Source\PSoC5/FanController.c **** *
 810:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 811:.\Generated_Source\PSoC5/FanController.c **** void FanController_SetDutyCycle(uint8 fanOrBankNumber, uint16 dutyCycle)
 812:.\Generated_Source\PSoC5/FanController.c ****         
 813:.\Generated_Source\PSoC5/FanController.c **** {
 655              		.loc 1 813 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 16
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660 0000 80B4     		push	{r7}
 661              	.LCFI32:
 662              		.cfi_def_cfa_offset 4
 663              		.cfi_offset 7, -4
 664 0002 85B0     		sub	sp, sp, #20
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 27


 665              	.LCFI33:
 666              		.cfi_def_cfa_offset 24
 667 0004 00AF     		add	r7, sp, #0
 668              	.LCFI34:
 669              		.cfi_def_cfa_register 7
 670 0006 0246     		mov	r2, r0
 671 0008 0B46     		mov	r3, r1
 672 000a FA71     		strb	r2, [r7, #7]
 673 000c BB80     		strh	r3, [r7, #4]	@ movhi
 814:.\Generated_Source\PSoC5/FanController.c ****     uint32 newCompare;      /* Needs to be 32-bit to allow for overflow during the math calculation
 815:.\Generated_Source\PSoC5/FanController.c **** 
 816:.\Generated_Source\PSoC5/FanController.c ****     /* Make sure the Fan/Bank number is valid */
 817:.\Generated_Source\PSoC5/FanController.c ****     if(fanOrBankNumber <= FanController_NUMBER_OF_FAN_OUTPUTS)
 674              		.loc 1 817 0
 675 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0010 012B     		cmp	r3, #1
 677 0012 20D8     		bhi	.L22
 818:.\Generated_Source\PSoC5/FanController.c ****     {
 819:.\Generated_Source\PSoC5/FanController.c ****         newCompare = (FanController_PWM_PERIOD * (uint32) dutyCycle) / FanController_PWM_DUTY_DIVID
 678              		.loc 1 819 0
 679 0014 BA88     		ldrh	r2, [r7, #4]
 680 0016 1346     		mov	r3, r2
 681 0018 4FEA0313 		lsl	r3, r3, #4
 682 001c 9B1A     		subs	r3, r3, r2
 683 001e 4FEA8313 		lsl	r3, r3, #6
 684 0022 1A46     		mov	r2, r3
 685 0024 41F25973 		movw	r3, #5977
 686 0028 CDF2B713 		movt	r3, 53687
 687 002c A3FB0213 		umull	r1, r3, r3, r2
 688 0030 4FEA5333 		lsr	r3, r3, #13
 689 0034 FB60     		str	r3, [r7, #12]
 820:.\Generated_Source\PSoC5/FanController.c **** 
 821:.\Generated_Source\PSoC5/FanController.c ****         /* Make sure the Compare value is in range (user entered a valid duty
 822:.\Generated_Source\PSoC5/FanController.c ****         * cycle value).
 823:.\Generated_Source\PSoC5/FanController.c ****         */
 824:.\Generated_Source\PSoC5/FanController.c ****         if(newCompare <= FanController_PWM_PERIOD)
 690              		.loc 1 824 0
 691 0036 FB68     		ldr	r3, [r7, #12]
 692 0038 B3F5707F 		cmp	r3, #960
 693 003c 0BD8     		bhi	.L22
 825:.\Generated_Source\PSoC5/FanController.c ****         {
 826:.\Generated_Source\PSoC5/FanController.c ****             #if (!CY_PSOC4)
 827:.\Generated_Source\PSoC5/FanController.c ****                 #if(FanController_PWMRES == FanController_PWMRES_EIGHTBIT)
 828:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG8(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSetDutyReg, ne
 829:.\Generated_Source\PSoC5/FanController.c ****                 #else
 830:.\Generated_Source\PSoC5/FanController.c ****                     CY_SET_REG16(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSetDutyReg, n
 694              		.loc 1 830 0
 695 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 696 0040 03F1FF32 		add	r2, r3, #-1
 697 0044 40F20003 		movw	r3, #:lower16:FanController_fanDriverRegs
 698 0048 C0F20003 		movt	r3, #:upper16:FanController_fanDriverRegs
 699 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 700 0050 FA68     		ldr	r2, [r7, #12]
 701 0052 92B2     		uxth	r2, r2
 702 0054 1A80     		strh	r2, [r3, #0]	@ movhi
 703              	.L22:
 831:.\Generated_Source\PSoC5/FanController.c ****                 #endif /* FanController_PWMRES == FanController_PWMRES_EIGHTBIT */
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 28


 832:.\Generated_Source\PSoC5/FanController.c ****             #else
 833:.\Generated_Source\PSoC5/FanController.c ****                 CY_SET_REG32(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSetDutyReg, newCo
 834:.\Generated_Source\PSoC5/FanController.c ****             #endif /* (!CY_PSOC4) */
 835:.\Generated_Source\PSoC5/FanController.c ****         }
 836:.\Generated_Source\PSoC5/FanController.c ****     }
 837:.\Generated_Source\PSoC5/FanController.c **** }
 704              		.loc 1 837 0
 705 0056 07F11407 		add	r7, r7, #20
 706 005a BD46     		mov	sp, r7
 707 005c 80BC     		pop	{r7}
 708 005e 7047     		bx	lr
 709              		.cfi_endproc
 710              	.LFE12:
 711              		.size	FanController_SetDutyCycle, .-FanController_SetDutyCycle
 712              		.section	.text.FanController_GetDutyCycle,"ax",%progbits
 713              		.align	2
 714              		.global	FanController_GetDutyCycle
 715              		.thumb
 716              		.thumb_func
 717              		.type	FanController_GetDutyCycle, %function
 718              	FanController_GetDutyCycle:
 719              	.LFB13:
 838:.\Generated_Source\PSoC5/FanController.c **** 
 839:.\Generated_Source\PSoC5/FanController.c **** 
 840:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 841:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetDutyCycle
 842:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 843:.\Generated_Source\PSoC5/FanController.c **** *
 844:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 845:.\Generated_Source\PSoC5/FanController.c **** *  Returns the current duty cycle of the selected fan or bank in hundredths
 846:.\Generated_Source\PSoC5/FanController.c **** *  of a percent, i.e. 5000=50% duty cycle.
 847:.\Generated_Source\PSoC5/FanController.c **** *
 848:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 849:.\Generated_Source\PSoC5/FanController.c **** *  uint8 fanOrBankNumber
 850:.\Generated_Source\PSoC5/FanController.c **** *  Valid range is 1-16 and should not exceed the number of fans or banks in
 851:.\Generated_Source\PSoC5/FanController.c **** *  the system.
 852:.\Generated_Source\PSoC5/FanController.c **** *
 853:.\Generated_Source\PSoC5/FanController.c **** * Return:
 854:.\Generated_Source\PSoC5/FanController.c **** *  uint16 duyCycle
 855:.\Generated_Source\PSoC5/FanController.c **** *  Current duty cycle in hundredths of a percent.
 856:.\Generated_Source\PSoC5/FanController.c **** *
 857:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 858:.\Generated_Source\PSoC5/FanController.c **** *  None
 859:.\Generated_Source\PSoC5/FanController.c **** *
 860:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 861:.\Generated_Source\PSoC5/FanController.c **** uint16 FanController_GetDutyCycle(uint8 fanOrBankNumber) 
 862:.\Generated_Source\PSoC5/FanController.c **** {
 720              		.loc 1 862 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 16
 723              		@ frame_needed = 1, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725 0000 80B4     		push	{r7}
 726              	.LCFI35:
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 7, -4
 729 0002 85B0     		sub	sp, sp, #20
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 29


 730              	.LCFI36:
 731              		.cfi_def_cfa_offset 24
 732 0004 00AF     		add	r7, sp, #0
 733              	.LCFI37:
 734              		.cfi_def_cfa_register 7
 735 0006 0346     		mov	r3, r0
 736 0008 FB71     		strb	r3, [r7, #7]
 863:.\Generated_Source\PSoC5/FanController.c ****     uint16 duyCycle = 0u;
 737              		.loc 1 863 0
 738 000a 4FF00003 		mov	r3, #0
 739 000e FB81     		strh	r3, [r7, #14]	@ movhi
 864:.\Generated_Source\PSoC5/FanController.c **** 
 865:.\Generated_Source\PSoC5/FanController.c ****     if(fanOrBankNumber <= FanController_NUMBER_OF_FAN_OUTPUTS)
 740              		.loc 1 865 0
 741 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 742 0012 012B     		cmp	r3, #1
 743 0014 17D8     		bhi	.L25
 866:.\Generated_Source\PSoC5/FanController.c ****     {
 867:.\Generated_Source\PSoC5/FanController.c ****         #if (!CY_PSOC4)
 868:.\Generated_Source\PSoC5/FanController.c ****             #if(FanController_PWMRES == FanController_PWMRES_EIGHTBIT)
 869:.\Generated_Source\PSoC5/FanController.c ****                 duyCycle = (uint16)
 870:.\Generated_Source\PSoC5/FanController.c ****                     ((((uint32) CY_GET_REG8(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSe
 871:.\Generated_Source\PSoC5/FanController.c ****                             * FanController_PWM_DUTY_DIVIDER) / FanController_PWM_PERIOD);
 872:.\Generated_Source\PSoC5/FanController.c ****             #else
 873:.\Generated_Source\PSoC5/FanController.c ****                 duyCycle = (uint16)
 874:.\Generated_Source\PSoC5/FanController.c ****                     (((uint32) CY_GET_REG16(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSe
 744              		.loc 1 874 0
 745 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 746 0018 03F1FF32 		add	r2, r3, #-1
 747 001c 40F20003 		movw	r3, #:lower16:FanController_fanDriverRegs
 748 0020 C0F20003 		movt	r3, #:upper16:FanController_fanDriverRegs
 749 0024 53F82230 		ldr	r3, [r3, r2, lsl #2]
 750 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 751 002a 9BB2     		uxth	r3, r3
 875:.\Generated_Source\PSoC5/FanController.c ****                                 * FanController_PWM_DUTY_DIVIDER) / FanController_PWM_PERIOD);
 752              		.loc 1 875 0
 753 002c 42F21072 		movw	r2, #10000
 754 0030 02FB03F2 		mul	r2, r2, r3
 755 0034 48F68903 		movw	r3, #34953
 756 0038 C8F68803 		movt	r3, 34952
 757 003c A3FB0213 		umull	r1, r3, r3, r2
 758 0040 4FEA5323 		lsr	r3, r3, #9
 873:.\Generated_Source\PSoC5/FanController.c ****                 duyCycle = (uint16)
 759              		.loc 1 873 0
 760 0044 FB81     		strh	r3, [r7, #14]	@ movhi
 761              	.L25:
 876:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_PWMRES == FanController_PWMRES_EIGHTBIT */
 877:.\Generated_Source\PSoC5/FanController.c ****         #else
 878:.\Generated_Source\PSoC5/FanController.c ****             duyCycle = (uint16)
 879:.\Generated_Source\PSoC5/FanController.c ****                 (((uint32) CY_GET_REG32(FanController_fanDriverRegs[fanOrBankNumber - 1u].pwmSetDut
 880:.\Generated_Source\PSoC5/FanController.c ****                         * FanController_PWM_DUTY_DIVIDER) / FanController_PWM_PERIOD);
 881:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (!CY_PSOC4) */
 882:.\Generated_Source\PSoC5/FanController.c ****     }
 883:.\Generated_Source\PSoC5/FanController.c **** 
 884:.\Generated_Source\PSoC5/FanController.c ****     return(duyCycle);
 762              		.loc 1 884 0
 763 0046 FB89     		ldrh	r3, [r7, #14]
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 30


 885:.\Generated_Source\PSoC5/FanController.c **** }
 764              		.loc 1 885 0
 765 0048 1846     		mov	r0, r3
 766 004a 07F11407 		add	r7, r7, #20
 767 004e BD46     		mov	sp, r7
 768 0050 80BC     		pop	{r7}
 769 0052 7047     		bx	lr
 770              		.cfi_endproc
 771              	.LFE13:
 772              		.size	FanController_GetDutyCycle, .-FanController_GetDutyCycle
 773              		.section	.text.FanController_SetDesiredSpeed,"ax",%progbits
 774              		.align	2
 775              		.global	FanController_SetDesiredSpeed
 776              		.thumb
 777              		.thumb_func
 778              		.type	FanController_SetDesiredSpeed, %function
 779              	FanController_SetDesiredSpeed:
 780              	.LFB14:
 886:.\Generated_Source\PSoC5/FanController.c **** 
 887:.\Generated_Source\PSoC5/FanController.c **** 
 888:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
 889:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_SetDesiredSpeed
 890:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
 891:.\Generated_Source\PSoC5/FanController.c **** *
 892:.\Generated_Source\PSoC5/FanController.c **** * Summary:
 893:.\Generated_Source\PSoC5/FanController.c **** *  Sets the desired RPM of specified fan. If the AcousticNoiseReduction
 894:.\Generated_Source\PSoC5/FanController.c **** *  parameter is true (enabled via the component customizer) in hardware
 895:.\Generated_Source\PSoC5/FanController.c **** *  controlled fan mode, the desired speed is converted to a fan rotation period
 896:.\Generated_Source\PSoC5/FanController.c **** *  and written to SRAM for subsequent DMA into the tachometer block. If the
 897:.\Generated_Source\PSoC5/FanController.c **** *  AcousticNoiseReduction parameter is false, the desired speed is converted to
 898:.\Generated_Source\PSoC5/FanController.c **** *  a duty cycle and written directly into the PWM register for the selected fan.
 899:.\Generated_Source\PSoC5/FanController.c **** *
 900:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
 901:.\Generated_Source\PSoC5/FanController.c **** *  uint8 fanNumber
 902:.\Generated_Source\PSoC5/FanController.c **** *  Valid range is 1-16 and should not exceed the number of fans in the system.
 903:.\Generated_Source\PSoC5/FanController.c **** *
 904:.\Generated_Source\PSoC5/FanController.c **** * uint16 rpm
 905:.\Generated_Source\PSoC5/FanController.c **** *  Valid range is 500 to 25,000, but should not exceed the max RPM of the
 906:.\Generated_Source\PSoC5/FanController.c **** *  selected fan.
 907:.\Generated_Source\PSoC5/FanController.c **** *
 908:.\Generated_Source\PSoC5/FanController.c **** * Return:
 909:.\Generated_Source\PSoC5/FanController.c **** *  None
 910:.\Generated_Source\PSoC5/FanController.c **** *
 911:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
 912:.\Generated_Source\PSoC5/FanController.c **** *  None
 913:.\Generated_Source\PSoC5/FanController.c **** *
 914:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
 915:.\Generated_Source\PSoC5/FanController.c **** void FanController_SetDesiredSpeed(uint8 fanNumber, uint16 rpm) 
 916:.\Generated_Source\PSoC5/FanController.c **** {
 781              		.loc 1 916 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 16
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 0000 B0B5     		push	{r4, r5, r7, lr}
 786              	.LCFI38:
 787              		.cfi_def_cfa_offset 16
 788              		.cfi_offset 4, -16
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 31


 789              		.cfi_offset 5, -12
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 84B0     		sub	sp, sp, #16
 793              	.LCFI39:
 794              		.cfi_def_cfa_offset 32
 795 0004 00AF     		add	r7, sp, #0
 796              	.LCFI40:
 797              		.cfi_def_cfa_register 7
 798 0006 0246     		mov	r2, r0
 799 0008 0B46     		mov	r3, r1
 800 000a FA71     		strb	r2, [r7, #7]
 801 000c BB80     		strh	r3, [r7, #4]	@ movhi
 917:.\Generated_Source\PSoC5/FanController.c ****     uint32 overrideDuty;        /* Needs to be 32-bit to allow for overflow during the math calcula
 918:.\Generated_Source\PSoC5/FanController.c ****     uint16 currentSpeed;
 919:.\Generated_Source\PSoC5/FanController.c **** 
 920:.\Generated_Source\PSoC5/FanController.c ****     /* Check for valid Fan number */
 921:.\Generated_Source\PSoC5/FanController.c ****     if(fanNumber <= FanController_NUMBER_OF_FANS)
 802              		.loc 1 921 0
 803 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 804 0010 012B     		cmp	r3, #1
 805 0012 00F2AF80 		bhi	.L27
 922:.\Generated_Source\PSoC5/FanController.c ****     {
 923:.\Generated_Source\PSoC5/FanController.c ****         /* Get the actual speed */
 924:.\Generated_Source\PSoC5/FanController.c ****         currentSpeed = FanController_GetActualSpeed(fanNumber);
 806              		.loc 1 924 0
 807 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 808 0018 1846     		mov	r0, r3
 809 001a FFF7FEFF 		bl	FanController_GetActualSpeed
 810 001e 0346     		mov	r3, r0
 811 0020 7B81     		strh	r3, [r7, #10]	@ movhi
 925:.\Generated_Source\PSoC5/FanController.c **** 
 926:.\Generated_Source\PSoC5/FanController.c ****         /* 3 cases where we will directly write a new duty cycle in firmware: */
 927:.\Generated_Source\PSoC5/FanController.c ****             /* Case 1) Manual Control fan mode */
 928:.\Generated_Source\PSoC5/FanController.c ****         if((FanController_IS_MANUAL_MODE)   ||
 929:.\Generated_Source\PSoC5/FanController.c ****             /* Case 2) Auto controlled fan mode and noise reduction is off */
 930:.\Generated_Source\PSoC5/FanController.c ****             ((FanController_IS_AUTO_HARDWARE_MODE) &&
 931:.\Generated_Source\PSoC5/FanController.c ****                 (FanController_NOISE_REDUCTION_MODE == FanController_NOISE_REDUCTION_OFF)) ||
 932:.\Generated_Source\PSoC5/FanController.c ****             /* Case 3) hardware controlled fan mode and new rpm is slower than current */
 933:.\Generated_Source\PSoC5/FanController.c ****             ((FanController_IS_AUTO_HARDWARE_MODE) && (rpm < currentSpeed)))
 934:.\Generated_Source\PSoC5/FanController.c ****         {
 935:.\Generated_Source\PSoC5/FanController.c ****             /* Override hardware controlled fan mode temporarily to write new duty cycle */
 936:.\Generated_Source\PSoC5/FanController.c ****             #if(FanController_IS_AUTO_HARDWARE_MODE)
 937:.\Generated_Source\PSoC5/FanController.c ****                 FanController_OverrideAutomaticControl(1u);
 938:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 939:.\Generated_Source\PSoC5/FanController.c **** 
 940:.\Generated_Source\PSoC5/FanController.c ****             /* Desired speed is slower than rpmA */
 941:.\Generated_Source\PSoC5/FanController.c ****             if(rpm < FanController_fanProperties[fanNumber - 1u].rpmA)
 812              		.loc 1 941 0
 813 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 814 0024 03F1FF31 		add	r1, r3, #-1
 815 0028 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 816 002c C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 817 0030 0B46     		mov	r3, r1
 818 0032 4FEAC303 		lsl	r3, r3, #3
 819 0036 5B1A     		subs	r3, r3, r1
 820 0038 4FEA4303 		lsl	r3, r3, #1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 32


 821 003c D318     		adds	r3, r2, r3
 822 003e 1B88     		ldrh	r3, [r3, #0]
 823 0040 BA88     		ldrh	r2, [r7, #4]
 824 0042 9A42     		cmp	r2, r3
 825 0044 48D2     		bcs	.L29
 942:.\Generated_Source\PSoC5/FanController.c ****             {
 943:.\Generated_Source\PSoC5/FanController.c ****                 overrideDuty =  (uint32)FanController_fanProperties[fanNumber - 1u].dutyA -
 826              		.loc 1 943 0
 827 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 828 0048 03F1FF31 		add	r1, r3, #-1
 829 004c 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 830 0050 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 831 0054 0B46     		mov	r3, r1
 832 0056 4FEAC303 		lsl	r3, r3, #3
 833 005a 5B1A     		subs	r3, r3, r1
 834 005c 4FEA4303 		lsl	r3, r3, #1
 835 0060 D318     		adds	r3, r2, r3
 836 0062 9B88     		ldrh	r3, [r3, #4]
 837 0064 1846     		mov	r0, r3
 944:.\Generated_Source\PSoC5/FanController.c ****                                 (((uint32)FanController_fanProperties[fanNumber - 1u].dutyRpmSlope 
 838              		.loc 1 944 0
 839 0066 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 840 0068 03F1FF31 		add	r1, r3, #-1
 841 006c 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 842 0070 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 843 0074 0B46     		mov	r3, r1
 844 0076 4FEAC303 		lsl	r3, r3, #3
 845 007a 5B1A     		subs	r3, r3, r1
 846 007c 4FEA4303 		lsl	r3, r3, #1
 847 0080 D318     		adds	r3, r2, r3
 848 0082 03F10803 		add	r3, r3, #8
 849 0086 1B88     		ldrh	r3, [r3, #0]
 850 0088 1C46     		mov	r4, r3
 945:.\Generated_Source\PSoC5/FanController.c ****                                    ((uint32)FanController_fanProperties[fanNumber - 1u].rpmA - (uin
 851              		.loc 1 945 0
 852 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 853 008c 03F1FF31 		add	r1, r3, #-1
 854 0090 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 855 0094 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 856 0098 0B46     		mov	r3, r1
 857 009a 4FEAC303 		lsl	r3, r3, #3
 858 009e 5B1A     		subs	r3, r3, r1
 859 00a0 4FEA4303 		lsl	r3, r3, #1
 860 00a4 D318     		adds	r3, r2, r3
 861 00a6 1B88     		ldrh	r3, [r3, #0]
 862 00a8 1A46     		mov	r2, r3
 863 00aa BB88     		ldrh	r3, [r7, #4]
 864 00ac D31A     		subs	r3, r2, r3
 944:.\Generated_Source\PSoC5/FanController.c ****                                 (((uint32)FanController_fanProperties[fanNumber - 1u].dutyRpmSlope 
 865              		.loc 1 944 0
 866 00ae 03FB04F2 		mul	r2, r3, r4
 867              		.loc 1 945 0
 868 00b2 48F21F53 		movw	r3, #34079
 869 00b6 C5F2EB13 		movt	r3, 20971
 870 00ba A3FB0213 		umull	r1, r3, r3, r2
 871 00be 4FEA5313 		lsr	r3, r3, #5
 943:.\Generated_Source\PSoC5/FanController.c ****                 overrideDuty =  (uint32)FanController_fanProperties[fanNumber - 1u].dutyA -
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 33


 872              		.loc 1 943 0
 873 00c2 C31A     		subs	r3, r0, r3
 874 00c4 FB60     		str	r3, [r7, #12]
 946:.\Generated_Source\PSoC5/FanController.c **** 
 947:.\Generated_Source\PSoC5/FanController.c ****                 /* Check for math underflow */
 948:.\Generated_Source\PSoC5/FanController.c ****                 if(overrideDuty > 10000u)
 875              		.loc 1 948 0
 876 00c6 FA68     		ldr	r2, [r7, #12]
 877 00c8 42F21073 		movw	r3, #10000
 878 00cc 9A42     		cmp	r2, r3
 879 00ce 4AD9     		bls	.L30
 949:.\Generated_Source\PSoC5/FanController.c ****                 {
 950:.\Generated_Source\PSoC5/FanController.c ****                     overrideDuty = 0u;
 880              		.loc 1 950 0
 881 00d0 4FF00003 		mov	r3, #0
 882 00d4 FB60     		str	r3, [r7, #12]
 883 00d6 46E0     		b	.L30
 884              	.L29:
 951:.\Generated_Source\PSoC5/FanController.c ****                 }
 952:.\Generated_Source\PSoC5/FanController.c ****             }
 953:.\Generated_Source\PSoC5/FanController.c **** 
 954:.\Generated_Source\PSoC5/FanController.c ****             /* Desired speed is faster than rpmA */
 955:.\Generated_Source\PSoC5/FanController.c ****             else
 956:.\Generated_Source\PSoC5/FanController.c ****             {
 957:.\Generated_Source\PSoC5/FanController.c ****                 overrideDuty =  (uint32)FanController_fanProperties[fanNumber - 1u].dutyA +
 885              		.loc 1 957 0
 886 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 887 00da 03F1FF31 		add	r1, r3, #-1
 888 00de 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 889 00e2 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 890 00e6 0B46     		mov	r3, r1
 891 00e8 4FEAC303 		lsl	r3, r3, #3
 892 00ec 5B1A     		subs	r3, r3, r1
 893 00ee 4FEA4303 		lsl	r3, r3, #1
 894 00f2 D318     		adds	r3, r2, r3
 895 00f4 9B88     		ldrh	r3, [r3, #4]
 896 00f6 1846     		mov	r0, r3
 958:.\Generated_Source\PSoC5/FanController.c ****                                 (((uint32)FanController_fanProperties[fanNumber - 1u].dutyRpmSlope 
 897              		.loc 1 958 0
 898 00f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 899 00fa 03F1FF31 		add	r1, r3, #-1
 900 00fe 40F20002 		movw	r2, #:lower16:FanController_fanProperties
 901 0102 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 902 0106 0B46     		mov	r3, r1
 903 0108 4FEAC303 		lsl	r3, r3, #3
 904 010c 5B1A     		subs	r3, r3, r1
 905 010e 4FEA4303 		lsl	r3, r3, #1
 906 0112 D318     		adds	r3, r2, r3
 907 0114 03F10803 		add	r3, r3, #8
 908 0118 1B88     		ldrh	r3, [r3, #0]
 909 011a 1C46     		mov	r4, r3
 959:.\Generated_Source\PSoC5/FanController.c ****                                    ((uint32)rpm - (uint32)FanController_fanProperties[fanNumber - 1
 910              		.loc 1 959 0
 911 011c BD88     		ldrh	r5, [r7, #4]
 912 011e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 913 0120 03F1FF31 		add	r1, r3, #-1
 914 0124 40F20002 		movw	r2, #:lower16:FanController_fanProperties
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 34


 915 0128 C0F20002 		movt	r2, #:upper16:FanController_fanProperties
 916 012c 0B46     		mov	r3, r1
 917 012e 4FEAC303 		lsl	r3, r3, #3
 918 0132 5B1A     		subs	r3, r3, r1
 919 0134 4FEA4303 		lsl	r3, r3, #1
 920 0138 D318     		adds	r3, r2, r3
 921 013a 1B88     		ldrh	r3, [r3, #0]
 922 013c EB1A     		subs	r3, r5, r3
 958:.\Generated_Source\PSoC5/FanController.c ****                                 (((uint32)FanController_fanProperties[fanNumber - 1u].dutyRpmSlope 
 923              		.loc 1 958 0
 924 013e 03FB04F2 		mul	r2, r3, r4
 925              		.loc 1 959 0
 926 0142 48F21F53 		movw	r3, #34079
 927 0146 C5F2EB13 		movt	r3, 20971
 928 014a A3FB0213 		umull	r1, r3, r3, r2
 929 014e 4FEA5313 		lsr	r3, r3, #5
 957:.\Generated_Source\PSoC5/FanController.c ****                 overrideDuty =  (uint32)FanController_fanProperties[fanNumber - 1u].dutyA +
 930              		.loc 1 957 0
 931 0152 C318     		adds	r3, r0, r3
 932 0154 FB60     		str	r3, [r7, #12]
 960:.\Generated_Source\PSoC5/FanController.c **** 
 961:.\Generated_Source\PSoC5/FanController.c ****                 /* Check for math overflow */
 962:.\Generated_Source\PSoC5/FanController.c ****                 if(overrideDuty > 10000u)
 933              		.loc 1 962 0
 934 0156 FA68     		ldr	r2, [r7, #12]
 935 0158 42F21073 		movw	r3, #10000
 936 015c 9A42     		cmp	r2, r3
 937 015e 02D9     		bls	.L30
 963:.\Generated_Source\PSoC5/FanController.c ****                 {
 964:.\Generated_Source\PSoC5/FanController.c ****                     overrideDuty = 10000u;
 938              		.loc 1 964 0
 939 0160 42F21073 		movw	r3, #10000
 940 0164 FB60     		str	r3, [r7, #12]
 941              	.L30:
 965:.\Generated_Source\PSoC5/FanController.c ****                 }
 966:.\Generated_Source\PSoC5/FanController.c ****             }
 967:.\Generated_Source\PSoC5/FanController.c **** 
 968:.\Generated_Source\PSoC5/FanController.c ****             /* Set the newly calculated duty cycle */
 969:.\Generated_Source\PSoC5/FanController.c ****             FanController_SetDutyCycle(fanNumber, (uint16) overrideDuty);
 942              		.loc 1 969 0
 943 0166 FB68     		ldr	r3, [r7, #12]
 944 0168 9BB2     		uxth	r3, r3
 945 016a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 946 016c 1046     		mov	r0, r2
 947 016e 1946     		mov	r1, r3
 948 0170 FFF7FEFF 		bl	FanController_SetDutyCycle
 949              	.L27:
 970:.\Generated_Source\PSoC5/FanController.c ****         }
 971:.\Generated_Source\PSoC5/FanController.c **** 
 972:.\Generated_Source\PSoC5/FanController.c ****         /* Set newly requested desired rpm including tolerance calculation and store
 973:.\Generated_Source\PSoC5/FanController.c ****         * in SRAM for the tachometer block DMA controller.
 974:.\Generated_Source\PSoC5/FanController.c ****         */
 975:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_IS_AUTO_HARDWARE_MODE)
 976:.\Generated_Source\PSoC5/FanController.c **** 
 977:.\Generated_Source\PSoC5/FanController.c ****             FanController_fanControl.desiredPeriod[fanNumber - 1u] =
 978:.\Generated_Source\PSoC5/FanController.c ****                 (uint16) (FanController_RPM_PERIOD_CONV_FACTOR /
 979:.\Generated_Source\PSoC5/FanController.c ****                     (uint32) ((uint32) rpm + (((uint32) rpm * FanController_TOLERANCE) /
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 35


 980:.\Generated_Source\PSoC5/FanController.c ****                         FanController_TOLERANCE_DIVIDER)));
 981:.\Generated_Source\PSoC5/FanController.c **** 
 982:.\Generated_Source\PSoC5/FanController.c ****             if(rpm > 500u)
 983:.\Generated_Source\PSoC5/FanController.c ****             {
 984:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanControl.tolerance[fanNumber - 1u] =
 985:.\Generated_Source\PSoC5/FanController.c ****                     (uint16) (((FanController_RPM_PERIOD_CONV_FACTOR * FanController_TOLERANCE) /
 986:.\Generated_Source\PSoC5/FanController.c ****                         FanController_TOLERANCE_DIVIDER) / (uint32) rpm);
 987:.\Generated_Source\PSoC5/FanController.c ****             }
 988:.\Generated_Source\PSoC5/FanController.c ****             else
 989:.\Generated_Source\PSoC5/FanController.c ****             {
 990:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanControl.tolerance[fanNumber - 1u] = 100u;
 991:.\Generated_Source\PSoC5/FanController.c ****             }
 992:.\Generated_Source\PSoC5/FanController.c **** 
 993:.\Generated_Source\PSoC5/FanController.c ****             /* Go back to hardware controlled fan mode */
 994:.\Generated_Source\PSoC5/FanController.c ****             FanController_OverrideAutomaticControl(0u);
 995:.\Generated_Source\PSoC5/FanController.c **** 
 996:.\Generated_Source\PSoC5/FanController.c ****         #endif /* FanController_IS_AUTO_HARDWARE_MODE */
 997:.\Generated_Source\PSoC5/FanController.c ****         
 998:.\Generated_Source\PSoC5/FanController.c ****         /* Store the desired speed to RAM if we are in auto mode. It will be used by 
 999:.\Generated_Source\PSoC5/FanController.c ****         * FanController_GetDesiredSpeed() and PID algorithm.
1000:.\Generated_Source\PSoC5/FanController.c ****         */
1001:.\Generated_Source\PSoC5/FanController.c ****         #if((FanController_IS_AUTO_FIRMWARE_MODE) || (FanController_IS_AUTO_HARDWARE_MODE))
1002:.\Generated_Source\PSoC5/FanController.c ****             FanController_desiredFansSpeed[fanNumber - 1u] = rpm;
1003:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (FanController_IS_AUTO_HARDWARE_MODE) */
1004:.\Generated_Source\PSoC5/FanController.c ****     }
1005:.\Generated_Source\PSoC5/FanController.c **** }
 950              		.loc 1 1005 0
 951 0174 07F11007 		add	r7, r7, #16
 952 0178 BD46     		mov	sp, r7
 953 017a B0BD     		pop	{r4, r5, r7, pc}
 954              		.cfi_endproc
 955              	.LFE14:
 956              		.size	FanController_SetDesiredSpeed, .-FanController_SetDesiredSpeed
 957              		.section	.text.FanController_GetActualSpeed,"ax",%progbits
 958              		.align	2
 959              		.global	FanController_GetActualSpeed
 960              		.thumb
 961              		.thumb_func
 962              		.type	FanController_GetActualSpeed, %function
 963              	FanController_GetActualSpeed:
 964              	.LFB15:
1006:.\Generated_Source\PSoC5/FanController.c **** 
1007:.\Generated_Source\PSoC5/FanController.c **** 
1008:.\Generated_Source\PSoC5/FanController.c **** #if (!FanController_IS_MANUAL_MODE)
1009:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
1010:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_GetDesiredSpeed
1011:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
1012:.\Generated_Source\PSoC5/FanController.c ****     *
1013:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1014:.\Generated_Source\PSoC5/FanController.c ****     *  Returns the currently desired speed of the selected fan in RPMs in hardware
1015:.\Generated_Source\PSoC5/FanController.c ****     *  controlled fan mode. This API is not available if firmware controlled fan
1016:.\Generated_Source\PSoC5/FanController.c ****     *  mode is selected.
1017:.\Generated_Source\PSoC5/FanController.c ****     *
1018:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1019:.\Generated_Source\PSoC5/FanController.c ****     *  uint8 fanNumber
1020:.\Generated_Source\PSoC5/FanController.c ****     *  Valid range is 1-16 and should not exceed the number of fans in the system.
1021:.\Generated_Source\PSoC5/FanController.c ****     *
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 36


1022:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1023:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 desiredSpeed: Current desired speed for selected fan.
1024:.\Generated_Source\PSoC5/FanController.c ****     *
1025:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1026:.\Generated_Source\PSoC5/FanController.c ****     *  None
1027:.\Generated_Source\PSoC5/FanController.c ****     *
1028:.\Generated_Source\PSoC5/FanController.c ****     ******************************************************************************/
1029:.\Generated_Source\PSoC5/FanController.c ****     uint16 FanController_GetDesiredSpeed(uint8 fanNumber) 
1030:.\Generated_Source\PSoC5/FanController.c ****     {
1031:.\Generated_Source\PSoC5/FanController.c ****         return(FanController_desiredFansSpeed[fanNumber - 1u]);
1032:.\Generated_Source\PSoC5/FanController.c ****     }
1033:.\Generated_Source\PSoC5/FanController.c **** 
1034:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!FanController_IS_MANUAL_MODE) */
1035:.\Generated_Source\PSoC5/FanController.c **** 
1036:.\Generated_Source\PSoC5/FanController.c **** 
1037:.\Generated_Source\PSoC5/FanController.c **** /******************************************************************************
1038:.\Generated_Source\PSoC5/FanController.c **** * Function Name: FanController_GetActualSpeed
1039:.\Generated_Source\PSoC5/FanController.c **** *******************************************************************************
1040:.\Generated_Source\PSoC5/FanController.c **** *
1041:.\Generated_Source\PSoC5/FanController.c **** * Summary:
1042:.\Generated_Source\PSoC5/FanController.c **** *  Returns the actual measured RPM of selected fan.
1043:.\Generated_Source\PSoC5/FanController.c **** *
1044:.\Generated_Source\PSoC5/FanController.c **** * Parameters:
1045:.\Generated_Source\PSoC5/FanController.c **** *  uint8 fanNumber
1046:.\Generated_Source\PSoC5/FanController.c **** *  Valid range is 1-16 and should not exceed the number of fans in the system.
1047:.\Generated_Source\PSoC5/FanController.c **** *
1048:.\Generated_Source\PSoC5/FanController.c **** * Return:
1049:.\Generated_Source\PSoC5/FanController.c **** *  uint16 actualSpeed: Actual measured RPM of target fan.
1050:.\Generated_Source\PSoC5/FanController.c **** *
1051:.\Generated_Source\PSoC5/FanController.c **** * Side Effects:
1052:.\Generated_Source\PSoC5/FanController.c **** *  None
1053:.\Generated_Source\PSoC5/FanController.c **** *
1054:.\Generated_Source\PSoC5/FanController.c **** ****************************************************************************/
1055:.\Generated_Source\PSoC5/FanController.c **** uint16 FanController_GetActualSpeed(uint8 fanNumber) 
1056:.\Generated_Source\PSoC5/FanController.c **** {
 965              		.loc 1 1056 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 16
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI41:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 85B0     		sub	sp, sp, #20
 975              	.LCFI42:
 976              		.cfi_def_cfa_offset 24
 977 0004 00AF     		add	r7, sp, #0
 978              	.LCFI43:
 979              		.cfi_def_cfa_register 7
 980 0006 0346     		mov	r3, r0
 981 0008 FB71     		strb	r3, [r7, #7]
1057:.\Generated_Source\PSoC5/FanController.c ****     uint16 actualSpeed = 0u;
 982              		.loc 1 1057 0
 983 000a 4FF00003 		mov	r3, #0
 984 000e FB81     		strh	r3, [r7, #14]	@ movhi
1058:.\Generated_Source\PSoC5/FanController.c **** 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 37


1059:.\Generated_Source\PSoC5/FanController.c ****     if(fanNumber <= FanController_NUMBER_OF_FANS)
 985              		.loc 1 1059 0
 986 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 987 0012 012B     		cmp	r3, #1
 988 0014 1BD8     		bhi	.L32
1060:.\Generated_Source\PSoC5/FanController.c ****     {
1061:.\Generated_Source\PSoC5/FanController.c ****         #if(CY_PSOC3)
1062:.\Generated_Source\PSoC5/FanController.c **** 
1063:.\Generated_Source\PSoC5/FanController.c ****             if(0u != (FanController_DMA_STATUS_REG & FanController_DMA1))
1064:.\Generated_Source\PSoC5/FanController.c ****             {
1065:.\Generated_Source\PSoC5/FanController.c ****                 /* If DMA writes to actualPeriodDma1 (DMA1 state) then read
1066:.\Generated_Source\PSoC5/FanController.c ****                 * actualPeriodDma2.
1067:.\Generated_Source\PSoC5/FanController.c ****                 */
1068:.\Generated_Source\PSoC5/FanController.c ****                 if(FanController_fanControl.actualPeriodDma2[fanNumber - 1u] != 0u)
1069:.\Generated_Source\PSoC5/FanController.c ****                 {
1070:.\Generated_Source\PSoC5/FanController.c ****                     /* Calculate RPM from value measured by tachometer counter */
1071:.\Generated_Source\PSoC5/FanController.c ****                     actualSpeed = (uint16) (FanController_RPM_PERIOD_CONV_FACTOR /
1072:.\Generated_Source\PSoC5/FanController.c ****                         (uint32) FanController_fanControl.actualPeriodDma2[fanNumber - 1u]);
1073:.\Generated_Source\PSoC5/FanController.c ****                 }
1074:.\Generated_Source\PSoC5/FanController.c ****             }
1075:.\Generated_Source\PSoC5/FanController.c ****             else
1076:.\Generated_Source\PSoC5/FanController.c ****             {
1077:.\Generated_Source\PSoC5/FanController.c ****                 /* If DMA writes to actualPeriodDma2 (DMA2 state) then read
1078:.\Generated_Source\PSoC5/FanController.c ****                 * actualPeriodDma1.
1079:.\Generated_Source\PSoC5/FanController.c ****                 */
1080:.\Generated_Source\PSoC5/FanController.c ****                 if(FanController_fanControl.actualPeriodDma1[fanNumber - 1u] != 0u)
1081:.\Generated_Source\PSoC5/FanController.c ****                 {
1082:.\Generated_Source\PSoC5/FanController.c ****                     /* Calculate RPM from value measured bu tachometer counter */
1083:.\Generated_Source\PSoC5/FanController.c ****                     actualSpeed = (uint16) (FanController_RPM_PERIOD_CONV_FACTOR /
1084:.\Generated_Source\PSoC5/FanController.c ****                         (uint32) FanController_fanControl.actualPeriodDma1[fanNumber - 1u]);
1085:.\Generated_Source\PSoC5/FanController.c ****                 }
1086:.\Generated_Source\PSoC5/FanController.c ****             }
1087:.\Generated_Source\PSoC5/FanController.c **** 
1088:.\Generated_Source\PSoC5/FanController.c ****         #else
1089:.\Generated_Source\PSoC5/FanController.c **** 
1090:.\Generated_Source\PSoC5/FanController.c ****             if(FanController_fanControl.actualPeriod[fanNumber - 1u] != 0u)
 989              		.loc 1 1090 0
 990 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 991 0018 03F1FF32 		add	r2, r3, #-1
 992 001c 40F20003 		movw	r3, #:lower16:FanController_fanControl
 993 0020 C0F20003 		movt	r3, #:upper16:FanController_fanControl
 994 0024 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 995 0028 002B     		cmp	r3, #0
 996 002a 10D0     		beq	.L32
1091:.\Generated_Source\PSoC5/FanController.c ****             {
1092:.\Generated_Source\PSoC5/FanController.c ****                 /* Calculate RPM from value measured by tachometer counter */
1093:.\Generated_Source\PSoC5/FanController.c ****                 actualSpeed = (uint16) (FanController_RPM_PERIOD_CONV_FACTOR /
1094:.\Generated_Source\PSoC5/FanController.c ****                     (uint32) FanController_fanControl.actualPeriod[fanNumber - 1u]);
 997              		.loc 1 1094 0
 998 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 999 002e 03F1FF32 		add	r2, r3, #-1
 1000 0032 40F20003 		movw	r3, #:lower16:FanController_fanControl
 1001 0036 C0F20003 		movt	r3, #:upper16:FanController_fanControl
 1002 003a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1003 003e 1A46     		mov	r2, r3
1093:.\Generated_Source\PSoC5/FanController.c ****                 actualSpeed = (uint16) (FanController_RPM_PERIOD_CONV_FACTOR /
 1004              		.loc 1 1093 0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 38


 1005 0040 4CF28033 		movw	r3, #50048
 1006 0044 C0F2C913 		movt	r3, 457
 1007 0048 B3FBF2F3 		udiv	r3, r3, r2
 1008 004c FB81     		strh	r3, [r7, #14]	@ movhi
 1009              	.L32:
1095:.\Generated_Source\PSoC5/FanController.c ****             }
1096:.\Generated_Source\PSoC5/FanController.c **** 
1097:.\Generated_Source\PSoC5/FanController.c ****         #endif /* (CY_PSOC3) */
1098:.\Generated_Source\PSoC5/FanController.c ****     }
1099:.\Generated_Source\PSoC5/FanController.c **** 
1100:.\Generated_Source\PSoC5/FanController.c ****     return(actualSpeed);
 1010              		.loc 1 1100 0
 1011 004e FB89     		ldrh	r3, [r7, #14]
1101:.\Generated_Source\PSoC5/FanController.c **** }
 1012              		.loc 1 1101 0
 1013 0050 1846     		mov	r0, r3
 1014 0052 07F11407 		add	r7, r7, #20
 1015 0056 BD46     		mov	sp, r7
 1016 0058 80BC     		pop	{r7}
 1017 005a 7047     		bx	lr
 1018              		.cfi_endproc
 1019              	.LFE15:
 1020              		.size	FanController_GetActualSpeed, .-FanController_GetActualSpeed
 1021              		.section	.text.FanController_SetupDMA,"ax",%progbits
 1022              		.align	2
 1023              		.thumb
 1024              		.thumb_func
 1025              		.type	FanController_SetupDMA, %function
 1026              	FanController_SetupDMA:
 1027              	.LFB16:
1102:.\Generated_Source\PSoC5/FanController.c **** 
1103:.\Generated_Source\PSoC5/FanController.c **** 
1104:.\Generated_Source\PSoC5/FanController.c **** #if(!FanController_IS_MANUAL_MODE)
1105:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
1106:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_OverrideAutomaticControl
1107:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
1108:.\Generated_Source\PSoC5/FanController.c ****     *
1109:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1110:.\Generated_Source\PSoC5/FanController.c ****     *  Formerly called OverrideClosedLoop.
1111:.\Generated_Source\PSoC5/FanController.c ****     *  Allows firmware to take over fan control when hardware controlled fan mode
1112:.\Generated_Source\PSoC5/FanController.c ****     *  is enabled. That is, directly control fan speed using the SetDutyCycle() API.
1113:.\Generated_Source\PSoC5/FanController.c ****     *  This API is not available if firmware controlled fan mode is selected.
1114:.\Generated_Source\PSoC5/FanController.c ****     *
1115:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1116:.\Generated_Source\PSoC5/FanController.c ****     *  uint8 override
1117:.\Generated_Source\PSoC5/FanController.c ****     *   non-zero = firmware assumes control of fans
1118:.\Generated_Source\PSoC5/FanController.c ****     *   zero     = hardware assumes control of fans
1119:.\Generated_Source\PSoC5/FanController.c ****     *
1120:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1121:.\Generated_Source\PSoC5/FanController.c ****     *  None
1122:.\Generated_Source\PSoC5/FanController.c ****     *
1123:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1124:.\Generated_Source\PSoC5/FanController.c ****     *  None
1125:.\Generated_Source\PSoC5/FanController.c ****     ******************************************************************************/
1126:.\Generated_Source\PSoC5/FanController.c **** 
1127:.\Generated_Source\PSoC5/FanController.c ****     void FanController_OverrideAutomaticControl(uint8 override)
1128:.\Generated_Source\PSoC5/FanController.c ****                                 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 39


1129:.\Generated_Source\PSoC5/FanController.c ****     {
1130:.\Generated_Source\PSoC5/FanController.c ****         uint8 interruptState = CyEnterCriticalSection();
1131:.\Generated_Source\PSoC5/FanController.c **** 
1132:.\Generated_Source\PSoC5/FanController.c ****         if(override != 0u)
1133:.\Generated_Source\PSoC5/FanController.c ****         {
1134:.\Generated_Source\PSoC5/FanController.c ****             FanController_GLOBAL_CONTROL_REG |= FanController_OVERRIDE;
1135:.\Generated_Source\PSoC5/FanController.c ****         }
1136:.\Generated_Source\PSoC5/FanController.c ****         else
1137:.\Generated_Source\PSoC5/FanController.c ****         {
1138:.\Generated_Source\PSoC5/FanController.c ****             FanController_GLOBAL_CONTROL_REG &= ((uint8) ~FanController_OVERRIDE);
1139:.\Generated_Source\PSoC5/FanController.c ****         }
1140:.\Generated_Source\PSoC5/FanController.c **** 
1141:.\Generated_Source\PSoC5/FanController.c ****         CyExitCriticalSection(interruptState);
1142:.\Generated_Source\PSoC5/FanController.c ****     }
1143:.\Generated_Source\PSoC5/FanController.c **** 
1144:.\Generated_Source\PSoC5/FanController.c **** #endif /* (!FanController_IS_MANUAL_MODE) */
1145:.\Generated_Source\PSoC5/FanController.c **** 
1146:.\Generated_Source\PSoC5/FanController.c **** 
1147:.\Generated_Source\PSoC5/FanController.c **** #if(FanController_IS_AUTO_FIRMWARE_MODE)
1148:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
1149:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_SetSaturation
1150:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
1151:.\Generated_Source\PSoC5/FanController.c ****     *
1152:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1153:.\Generated_Source\PSoC5/FanController.c ****     *  Changes the PID controller output saturation. This bounds the output PWM to
1154:.\Generated_Source\PSoC5/FanController.c ****     *  the fan and prevents what is known as integrator windup.
1155:.\Generated_Source\PSoC5/FanController.c ****     *
1156:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1157:.\Generated_Source\PSoC5/FanController.c ****     *  uint8 fanNum : Valid range is 1..16 but should not exceed the number of fans
1158:.\Generated_Source\PSoC5/FanController.c ****     *                 in the system.
1159:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 satH  : The upper threshold for saturation. Valid range is 0 to
1160:.\Generated_Source\PSoC5/FanController.c ****     *                 65535. A value of 0 represents 0% of the duty cycle. A value
1161:.\Generated_Source\PSoC5/FanController.c ****     *                 of 65535 represents 100% duty cycle.
1162:.\Generated_Source\PSoC5/FanController.c ****     *
1163:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 satL  : The lower threshold for saturation. Valid range is 0 to
1164:.\Generated_Source\PSoC5/FanController.c ****     *                 65535. A value of 0 represents 0% of the duty cycle. A value
1165:.\Generated_Source\PSoC5/FanController.c ****     *                 of 65535 represents 100% duty cycle.
1166:.\Generated_Source\PSoC5/FanController.c ****     *
1167:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1168:.\Generated_Source\PSoC5/FanController.c ****     *  None
1169:.\Generated_Source\PSoC5/FanController.c ****     *
1170:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1171:.\Generated_Source\PSoC5/FanController.c ****     *  None
1172:.\Generated_Source\PSoC5/FanController.c ****     *
1173:.\Generated_Source\PSoC5/FanController.c ****     ****************************************************************************/
1174:.\Generated_Source\PSoC5/FanController.c ****     void FanController_SetSaturation(uint8 fanNum, uint16 satH, uint16 satL)
1175:.\Generated_Source\PSoC5/FanController.c ****                                                     
1176:.\Generated_Source\PSoC5/FanController.c ****     {
1177:.\Generated_Source\PSoC5/FanController.c ****         uint8 interruptState;
1178:.\Generated_Source\PSoC5/FanController.c ****         uint32 tmpOutL;
1179:.\Generated_Source\PSoC5/FanController.c ****         uint32 tmpOutH;
1180:.\Generated_Source\PSoC5/FanController.c **** 
1181:.\Generated_Source\PSoC5/FanController.c ****         if((fanNum - 1u) < FanController_NUMBER_OF_FANS)
1182:.\Generated_Source\PSoC5/FanController.c ****         {
1183:.\Generated_Source\PSoC5/FanController.c ****             /* Calculate PID Constants for fan and store them into temporary variables to
1184:.\Generated_Source\PSoC5/FanController.c ****             * be later written to PID vars. This is done so to not disable interrupt for a
1185:.\Generated_Source\PSoC5/FanController.c ****             * long time.
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 40


1186:.\Generated_Source\PSoC5/FanController.c ****             */
1187:.\Generated_Source\PSoC5/FanController.c ****             tmpOutH = ((FanController_PWM_PERIOD * ((uint32) (((uint32) 1u) << FanController_PID_PO
1188:.\Generated_Source\PSoC5/FanController.c ****                                            FanController_MAX_GAIN) * satH;
1189:.\Generated_Source\PSoC5/FanController.c ****             tmpOutL = ((FanController_PWM_PERIOD * ((uint32) (((uint32) 1u) << FanController_PID_PO
1190:.\Generated_Source\PSoC5/FanController.c ****                                            FanController_MAX_GAIN) * satL;
1191:.\Generated_Source\PSoC5/FanController.c **** 
1192:.\Generated_Source\PSoC5/FanController.c ****             /* Disable interrupts while updating PID constants */
1193:.\Generated_Source\PSoC5/FanController.c ****             interruptState = CyEnterCriticalSection();
1194:.\Generated_Source\PSoC5/FanController.c **** 
1195:.\Generated_Source\PSoC5/FanController.c ****             FanController_outputSatH[fanNum - 1u] = tmpOutH;
1196:.\Generated_Source\PSoC5/FanController.c ****             FanController_outputSatL[fanNum - 1u] = tmpOutL;
1197:.\Generated_Source\PSoC5/FanController.c **** 
1198:.\Generated_Source\PSoC5/FanController.c ****             CyExitCriticalSection(interruptState);
1199:.\Generated_Source\PSoC5/FanController.c ****         }
1200:.\Generated_Source\PSoC5/FanController.c ****     }
1201:.\Generated_Source\PSoC5/FanController.c **** 
1202:.\Generated_Source\PSoC5/FanController.c **** 
1203:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
1204:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_SetPID
1205:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
1206:.\Generated_Source\PSoC5/FanController.c ****     *
1207:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1208:.\Generated_Source\PSoC5/FanController.c ****     *  Changes the PID controller coefficients for the controlled fan. The
1209:.\Generated_Source\PSoC5/FanController.c ****     *  coefficients are integers that are proportional to the gain.
1210:.\Generated_Source\PSoC5/FanController.c ****     *
1211:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1212:.\Generated_Source\PSoC5/FanController.c ****     *  uint8 fanNum : Valid range is 1..16 but should not exceed the number of fans
1213:.\Generated_Source\PSoC5/FanController.c ****     *                 in the system.
1214:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 kp    : Proportional gain. Valid range is 0 to 65535. A value of 0
1215:.\Generated_Source\PSoC5/FanController.c ****     *                 represents 0% gain. A value of 65535 represents 100% gain.
1216:.\Generated_Source\PSoC5/FanController.c ****     *
1217:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 ki    : Integral gain. Valid range is 0 to 65535. A value of 0
1218:.\Generated_Source\PSoC5/FanController.c ****     *                 represents 0% gain. A value of 65535 represents 100% gain.
1219:.\Generated_Source\PSoC5/FanController.c ****     *
1220:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 kd    : Derivative gain. Valid range is 0 to 65535. A value of 0
1221:.\Generated_Source\PSoC5/FanController.c ****     *                 represents 0% gain. A value of 65535 represents 100% gain.
1222:.\Generated_Source\PSoC5/FanController.c ****     *
1223:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1224:.\Generated_Source\PSoC5/FanController.c ****     *  None
1225:.\Generated_Source\PSoC5/FanController.c ****     *
1226:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1227:.\Generated_Source\PSoC5/FanController.c ****     *  None
1228:.\Generated_Source\PSoC5/FanController.c ****     *
1229:.\Generated_Source\PSoC5/FanController.c ****     ****************************************************************************/
1230:.\Generated_Source\PSoC5/FanController.c ****     void FanController_SetPID(uint8 fanNum, uint16 kp, uint16 ki, uint16 kd)
1231:.\Generated_Source\PSoC5/FanController.c ****                                                                         
1232:.\Generated_Source\PSoC5/FanController.c ****     {
1233:.\Generated_Source\PSoC5/FanController.c ****         uint8 interruptState;
1234:.\Generated_Source\PSoC5/FanController.c ****         /* Variables for temporary sotoring calculated PID constants */
1235:.\Generated_Source\PSoC5/FanController.c ****         int16 tmpA1;
1236:.\Generated_Source\PSoC5/FanController.c ****         int16 tmpA2;
1237:.\Generated_Source\PSoC5/FanController.c ****         int16 tmpA3;
1238:.\Generated_Source\PSoC5/FanController.c **** 
1239:.\Generated_Source\PSoC5/FanController.c ****         if((fanNum - 1u) < FanController_NUMBER_OF_FANS)
1240:.\Generated_Source\PSoC5/FanController.c ****         {
1241:.\Generated_Source\PSoC5/FanController.c ****             /* Calculate PID Constants for fan and store them into temporary variables to
1242:.\Generated_Source\PSoC5/FanController.c ****             * be later written to PID vars. This is done so to not disable interrupt for a
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 41


1243:.\Generated_Source\PSoC5/FanController.c ****             * long time.
1244:.\Generated_Source\PSoC5/FanController.c ****             */
1245:.\Generated_Source\PSoC5/FanController.c ****             tmpA1 = (int16) ((((int32) kp + (int32) ki + (int32) kd) * ((int32) FanController_GAIN_
1246:.\Generated_Source\PSoC5/FanController.c ****                     (int32) FanController_MAX_GAIN);
1247:.\Generated_Source\PSoC5/FanController.c ****             tmpA2 = (int16) (((-((int32) kp + (2 * (int32) kd))) * ((int32) FanController_GAIN_MULT
1248:.\Generated_Source\PSoC5/FanController.c ****                     (int32) FanController_MAX_GAIN);
1249:.\Generated_Source\PSoC5/FanController.c ****             tmpA3 = (int16) ((((int32) kd) * ((int32) FanController_GAIN_MULTIPLIER )) /
1250:.\Generated_Source\PSoC5/FanController.c ****                     (int32) FanController_MAX_GAIN);
1251:.\Generated_Source\PSoC5/FanController.c **** 
1252:.\Generated_Source\PSoC5/FanController.c ****             /* Disable interrupts while updating PID constants */
1253:.\Generated_Source\PSoC5/FanController.c ****             interruptState = CyEnterCriticalSection();
1254:.\Generated_Source\PSoC5/FanController.c **** 
1255:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA1[fanNum - 1u] = tmpA1;
1256:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA2[fanNum - 1u] = tmpA2;
1257:.\Generated_Source\PSoC5/FanController.c ****             FanController_pidA3[fanNum - 1u] = tmpA3;
1258:.\Generated_Source\PSoC5/FanController.c **** 
1259:.\Generated_Source\PSoC5/FanController.c ****             CyExitCriticalSection(interruptState);
1260:.\Generated_Source\PSoC5/FanController.c ****         }
1261:.\Generated_Source\PSoC5/FanController.c ****     }
1262:.\Generated_Source\PSoC5/FanController.c **** 
1263:.\Generated_Source\PSoC5/FanController.c **** 
1264:.\Generated_Source\PSoC5/FanController.c **** #endif /* (FanController_IS_AUTO_FIRMWARE_MODE) */
1265:.\Generated_Source\PSoC5/FanController.c **** 
1266:.\Generated_Source\PSoC5/FanController.c **** #if (!CY_PSOC4)
1267:.\Generated_Source\PSoC5/FanController.c **** 
1268:.\Generated_Source\PSoC5/FanController.c ****     /******************************************************************************
1269:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_SetupDMA
1270:.\Generated_Source\PSoC5/FanController.c ****     *******************************************************************************
1271:.\Generated_Source\PSoC5/FanController.c ****     *
1272:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1273:.\Generated_Source\PSoC5/FanController.c ****     *  This is a private API not exposed to users.
1274:.\Generated_Source\PSoC5/FanController.c ****     *
1275:.\Generated_Source\PSoC5/FanController.c ****     *  Sets up the DMA controllers depending on firmware or hardware controlled fan
1276:.\Generated_Source\PSoC5/FanController.c ****     *  mode. The number and the sequence of the transaction descriptors depends on
1277:.\Generated_Source\PSoC5/FanController.c ****     *  the number of fans in the system.
1278:.\Generated_Source\PSoC5/FanController.c ****     *
1279:.\Generated_Source\PSoC5/FanController.c ****     *  The NRQ output of the DMA controllers is used in different ways depending
1280:.\Generated_Source\PSoC5/FanController.c ****     *  on the fan control mode:
1281:.\Generated_Source\PSoC5/FanController.c ****     *
1282:.\Generated_Source\PSoC5/FanController.c ****     *  1) In firmware controlled fan mode, the NRQ of the TachOutDMA is asserted
1283:.\Generated_Source\PSoC5/FanController.c ****     *     only once at the end of the TD chain. This is used to generate the
1284:.\Generated_Source\PSoC5/FanController.c ****     *     end-of-cylce (eoc) pulse for the component.
1285:.\Generated_Source\PSoC5/FanController.c ****     *
1286:.\Generated_Source\PSoC5/FanController.c ****     *  2) In hardware controlled fan mode, the NRQ of the TachOutDMA is asserted
1287:.\Generated_Source\PSoC5/FanController.c ****     *     after every TD and connects to the DRQ of the TachInDMA. This ensures
1288:.\Generated_Source\PSoC5/FanController.c ****     *     that reading desired speeds and hysteresis into the tachometer block
1289:.\Generated_Source\PSoC5/FanController.c ****     *     occurs automatically when the fan input is changed. In this
1290:.\Generated_Source\PSoC5/FanController.c ****     *     configuration, the NRQ output of the TachInDMA is used to generate the
1291:.\Generated_Source\PSoC5/FanController.c ****     *     end-of-cylce (eoc) pulse for the component.
1292:.\Generated_Source\PSoC5/FanController.c ****     *
1293:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1294:.\Generated_Source\PSoC5/FanController.c ****     *  None
1295:.\Generated_Source\PSoC5/FanController.c ****     *
1296:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1297:.\Generated_Source\PSoC5/FanController.c ****     *  None
1298:.\Generated_Source\PSoC5/FanController.c ****     *
1299:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 42


1300:.\Generated_Source\PSoC5/FanController.c ****     *  None
1301:.\Generated_Source\PSoC5/FanController.c ****     *
1302:.\Generated_Source\PSoC5/FanController.c ****     ****************************************************************************/
1303:.\Generated_Source\PSoC5/FanController.c ****     static void FanController_SetupDMA(void) CYREENTRANT
1304:.\Generated_Source\PSoC5/FanController.c ****     {
 1028              		.loc 1 1304 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 8
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032 0000 90B5     		push	{r4, r7, lr}
 1033              	.LCFI44:
 1034              		.cfi_def_cfa_offset 12
 1035              		.cfi_offset 4, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              	.LCFI45:
 1040              		.cfi_def_cfa_offset 24
 1041 0004 00AF     		add	r7, sp, #0
 1042              	.LCFI46:
 1043              		.cfi_def_cfa_register 7
1305:.\Generated_Source\PSoC5/FanController.c ****         uint8 counti;
1306:.\Generated_Source\PSoC5/FanController.c ****         uint8 fanNum;
1307:.\Generated_Source\PSoC5/FanController.c ****         
1308:.\Generated_Source\PSoC5/FanController.c ****         /* DMA transfer descriptors used by the tachometer block for fan speed 
1309:.\Generated_Source\PSoC5/FanController.c ****         * control/reporting.
1310:.\Generated_Source\PSoC5/FanController.c ****         */
1311:.\Generated_Source\PSoC5/FanController.c ****         static FanController_fanTdOutStruct FanController_fanOutTds[FanController_NUM_OUT_TDS];
1312:.\Generated_Source\PSoC5/FanController.c ****         
1313:.\Generated_Source\PSoC5/FanController.c ****         /* Get DMA controller channels allocated */
1314:.\Generated_Source\PSoC5/FanController.c ****         /* PSoC 3 family memory spaces */
1315:.\Generated_Source\PSoC5/FanController.c ****         #if defined(__C51__)
1316:.\Generated_Source\PSoC5/FanController.c **** 
1317:.\Generated_Source\PSoC5/FanController.c ****             FanController_TachOutDMA_channel =   FanController_TachOutDMA_DmaInitialize(
1318:.\Generated_Source\PSoC5/FanController.c ****                                                     2u,
1319:.\Generated_Source\PSoC5/FanController.c ****                                                     1u,
1320:.\Generated_Source\PSoC5/FanController.c ****                                                     HI16(CYDEV_PERIPH_BASE),
1321:.\Generated_Source\PSoC5/FanController.c ****                                                     HI16(CYDEV_SRAM_BASE));
1322:.\Generated_Source\PSoC5/FanController.c **** 
1323:.\Generated_Source\PSoC5/FanController.c ****             #if (FanController_IS_AUTO_HARDWARE_MODE)
1324:.\Generated_Source\PSoC5/FanController.c **** 
1325:.\Generated_Source\PSoC5/FanController.c ****                 FanController_TachInDMA_channel =    FanController_TachInDMA_DmaInitialize(
1326:.\Generated_Source\PSoC5/FanController.c ****                                                         2u,
1327:.\Generated_Source\PSoC5/FanController.c ****                                                         1u,
1328:.\Generated_Source\PSoC5/FanController.c ****                                                         HI16(CYDEV_SRAM_BASE),
1329:.\Generated_Source\PSoC5/FanController.c ****                                                         HI16(CYDEV_PERIPH_BASE));
1330:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1331:.\Generated_Source\PSoC5/FanController.c **** 
1332:.\Generated_Source\PSoC5/FanController.c ****         /* PSoC 5 family memory spaces */
1333:.\Generated_Source\PSoC5/FanController.c ****         #else
1334:.\Generated_Source\PSoC5/FanController.c **** 
1335:.\Generated_Source\PSoC5/FanController.c ****             FanController_TachOutDMA_channel =   FanController_TachOutDMA_DmaInitialize(
1336:.\Generated_Source\PSoC5/FanController.c ****                                                     2u,
1337:.\Generated_Source\PSoC5/FanController.c ****                                                     1u,
1338:.\Generated_Source\PSoC5/FanController.c ****                                                     HI16(FanController_TACH_ACTUAL_PERIOD_PTR),
1339:.\Generated_Source\PSoC5/FanController.c ****                                                     HI16(((uint32)&FanController_fanControl.actualP
 1044              		.loc 1 1339 0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 43


 1045 0006 40F20003 		movw	r3, #:lower16:FanController_fanControl
 1046 000a C0F20003 		movt	r3, #:upper16:FanController_fanControl
 1047 000e 4FEA1343 		lsr	r3, r3, #16
1335:.\Generated_Source\PSoC5/FanController.c ****             FanController_TachOutDMA_channel =   FanController_TachOutDMA_DmaInitialize(
 1048              		.loc 1 1335 0
 1049 0012 9BB2     		uxth	r3, r3
 1050 0014 4FF00200 		mov	r0, #2
 1051 0018 4FF00101 		mov	r1, #1
 1052 001c 4FF48042 		mov	r2, #16384
 1053 0020 FFF7FEFF 		bl	FanController_TachOutDMA_DmaInitialize
 1054 0024 0346     		mov	r3, r0
 1055 0026 1A46     		mov	r2, r3
 1056 0028 40F20003 		movw	r3, #:lower16:FanController_TachOutDMA_channel
 1057 002c C0F20003 		movt	r3, #:upper16:FanController_TachOutDMA_channel
 1058 0030 1A70     		strb	r2, [r3, #0]
1340:.\Generated_Source\PSoC5/FanController.c **** 
1341:.\Generated_Source\PSoC5/FanController.c ****             #if (FanController_IS_AUTO_HARDWARE_MODE)
1342:.\Generated_Source\PSoC5/FanController.c **** 
1343:.\Generated_Source\PSoC5/FanController.c ****                 FanController_TachInDMA_channel =    FanController_TachInDMA_DmaInitialize(
1344:.\Generated_Source\PSoC5/FanController.c ****                                                         2u,
1345:.\Generated_Source\PSoC5/FanController.c ****                                                         1u,
1346:.\Generated_Source\PSoC5/FanController.c ****                                                         HI16(((uint32)&FanController_fanControl.des
1347:.\Generated_Source\PSoC5/FanController.c ****                                                         HI16(FanController_TACH_DESIRED_PERIOD_PTR)
1348:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1349:.\Generated_Source\PSoC5/FanController.c ****         #endif /* __C51__ */
1350:.\Generated_Source\PSoC5/FanController.c **** 
1351:.\Generated_Source\PSoC5/FanController.c ****         /* Get transaction descriptors allocated */
1352:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1059              		.loc 1 1352 0
 1060 0032 4FF00003 		mov	r3, #0
 1061 0036 FB71     		strb	r3, [r7, #7]
 1062 0038 0DE0     		b	.L35
 1063              	.L36:
1353:.\Generated_Source\PSoC5/FanController.c ****         {
1354:.\Generated_Source\PSoC5/FanController.c ****             #if (CY_PSOC3)
1355:.\Generated_Source\PSoC5/FanController.c ****                 /* For PSoC 3 it is required to allocate two times more TDs */
1356:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanOutTds[counti].setActualPeriodTD = CyDmaTdAllocate();
1357:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanOutTds[counti + FanController_NUMBER_OF_FANS].setActualPeriodTD =
1358:.\Generated_Source\PSoC5/FanController.c ****                         CyDmaTdAllocate();
1359:.\Generated_Source\PSoC5/FanController.c ****             #else
1360:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanOutTds[counti].setActualPeriodTD = CyDmaTdAllocate();
 1064              		.loc 1 1360 0 discriminator 2
 1065 003a FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 1066 003c FFF7FEFF 		bl	CyDmaTdAllocate
 1067 0040 0346     		mov	r3, r0
 1068 0042 1A46     		mov	r2, r3
 1069 0044 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1070 0048 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1071 004c 1A55     		strb	r2, [r3, r4]
1352:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1072              		.loc 1 1352 0 discriminator 2
 1073 004e FB79     		ldrb	r3, [r7, #7]
 1074 0050 03F10103 		add	r3, r3, #1
 1075 0054 FB71     		strb	r3, [r7, #7]
 1076              	.L35:
1352:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1077              		.loc 1 1352 0 is_stmt 0 discriminator 1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 44


 1078 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1079 0058 002B     		cmp	r3, #0
 1080 005a EED0     		beq	.L36
1361:.\Generated_Source\PSoC5/FanController.c ****             #endif /* (CY_PSOC3) */
1362:.\Generated_Source\PSoC5/FanController.c **** 
1363:.\Generated_Source\PSoC5/FanController.c ****             #if(FanController_IS_AUTO_HARDWARE_MODE)
1364:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanInTds[counti].getDesiredPeriodTD = CyDmaTdAllocate();
1365:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanInTds[counti].getToleranceTD = CyDmaTdAllocate();
1366:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1367:.\Generated_Source\PSoC5/FanController.c ****         }
1368:.\Generated_Source\PSoC5/FanController.c **** 
1369:.\Generated_Source\PSoC5/FanController.c ****         /* Configure the transaction descriptors and sequence depending on fan control mode */
1370:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1081              		.loc 1 1370 0 is_stmt 1
 1082 005c 4FF00003 		mov	r3, #0
 1083 0060 FB71     		strb	r3, [r7, #7]
 1084 0062 34E0     		b	.L37
 1085              	.L40:
1371:.\Generated_Source\PSoC5/FanController.c ****         {
1372:.\Generated_Source\PSoC5/FanController.c ****             fanNum = FanController_NUMBER_OF_FANS - counti - 1u;
 1086              		.loc 1 1372 0
 1087 0064 FB79     		ldrb	r3, [r7, #7]
 1088 0066 C3F10003 		rsb	r3, r3, #0
 1089 006a BB71     		strb	r3, [r7, #6]
1373:.\Generated_Source\PSoC5/FanController.c **** 
1374:.\Generated_Source\PSoC5/FanController.c ****             /* Put current actual tachometer periods (hardware and firmware
1375:.\Generated_Source\PSoC5/FanController.c ****             * controlled fan modes) to SRAM for the GetActualSpeed API.
1376:.\Generated_Source\PSoC5/FanController.c ****             */
1377:.\Generated_Source\PSoC5/FanController.c ****             if(fanNum == 0u)
 1090              		.loc 1 1377 0
 1091 006c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1092 006e 002B     		cmp	r3, #0
 1093 0070 13D1     		bne	.L38
1378:.\Generated_Source\PSoC5/FanController.c ****             {
1379:.\Generated_Source\PSoC5/FanController.c ****                 /* TDs need to be sequenced in reverse to match the Tachometer hardware
1380:.\Generated_Source\PSoC5/FanController.c ****                 * block address bus sequence. Next TD after fan[0] is final fan:
1381:.\Generated_Source\PSoC5/FanController.c ****                 fan[NUMBER_OF_FANS-1].
1382:.\Generated_Source\PSoC5/FanController.c ****                 */
1383:.\Generated_Source\PSoC5/FanController.c ****                 #if (CY_PSOC3)
1384:.\Generated_Source\PSoC5/FanController.c **** 
1385:.\Generated_Source\PSoC5/FanController.c ****                     /* For PSoC 3 the DMA can write to two RAM locations and therefore it
1386:.\Generated_Source\PSoC5/FanController.c ****                     * uses two times more TDs. The configuration is a bit complex.
1387:.\Generated_Source\PSoC5/FanController.c ****                     * Short explanation is for a set of 16 fans the TD[0] will be chained to
1388:.\Generated_Source\PSoC5/FanController.c ****                     * TD[31] and TD[16] will be chained to TD[15]. It's because TD[0] to TD[15]
1389:.\Generated_Source\PSoC5/FanController.c ****                     * are used by DMA2 and TD[16] to TD[31] are used by DMA1. DMA1 will write
1390:.\Generated_Source\PSoC5/FanController.c ****                     * measured data to .actualPeriodDma1[] and DMA2 will write to
1391:.\Generated_Source\PSoC5/FanController.c ****                     * .actualPeriodDma2[].
1392:.\Generated_Source\PSoC5/FanController.c ****                     */
1393:.\Generated_Source\PSoC5/FanController.c ****                     (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPeriodT
1394:.\Generated_Source\PSoC5/FanController.c ****                                             2u,
1395:.\Generated_Source\PSoC5/FanController.c ****                                             FanController_fanOutTds[
1396:.\Generated_Source\PSoC5/FanController.c ****                             (FanController_NUMBER_OF_FANS +FanController_NUMBER_OF_FANS) - 1u].setA
1397:.\Generated_Source\PSoC5/FanController.c ****                                             TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1398:.\Generated_Source\PSoC5/FanController.c ****                                             /* Assert NRQ at final TD in hardware and firmware cont
1399:.\Generated_Source\PSoC5/FanController.c ****                                             FanController_TachOutDMA__TD_TERMOUT_EN);
1400:.\Generated_Source\PSoC5/FanController.c **** 
1401:.\Generated_Source\PSoC5/FanController.c ****                     (void) CyDmaTdSetConfiguration(
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 45


1402:.\Generated_Source\PSoC5/FanController.c ****                                 FanController_fanOutTds[FanController_NUMBER_OF_FANS].setActualPeri
1403:.\Generated_Source\PSoC5/FanController.c ****                                 2u,
1404:.\Generated_Source\PSoC5/FanController.c ****                                 FanController_fanOutTds[FanController_NUMBER_OF_FANS - 1u].setActua
1405:.\Generated_Source\PSoC5/FanController.c ****                                 TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1406:.\Generated_Source\PSoC5/FanController.c ****                                 /* Assert NRQ at final TD in hardware and firmware controlled fan m
1407:.\Generated_Source\PSoC5/FanController.c ****                                 FanController_TachOutDMA__TD_TERMOUT_EN);
1408:.\Generated_Source\PSoC5/FanController.c **** 
1409:.\Generated_Source\PSoC5/FanController.c ****                 #else
1410:.\Generated_Source\PSoC5/FanController.c **** 
1411:.\Generated_Source\PSoC5/FanController.c ****                     /* For PSoC 5LP or PSoC 4 there is no need of two TD sets */
1412:.\Generated_Source\PSoC5/FanController.c ****                     (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPeriodT
 1094              		.loc 1 1412 0
 1095 0072 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1096 0074 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1097 0078 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1098 007c 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 1099 007e 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1100 0082 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1101 0086 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1102 0088 1046     		mov	r0, r2
 1103 008a 4FF00201 		mov	r1, #2
 1104 008e 1A46     		mov	r2, r3
 1105 0090 4FF00603 		mov	r3, #6
 1106 0094 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 1107 0098 15E0     		b	.L39
 1108              	.L38:
1413:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1414:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanOutTds[FanController_NUMBER_OF_FANS - 1u].setA
1415:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1416:.\Generated_Source\PSoC5/FanController.c ****                                     /* Assert NRQ at final TD in hardware and firmware controlled f
1417:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TD_TERMOUT_EN);
1418:.\Generated_Source\PSoC5/FanController.c **** 
1419:.\Generated_Source\PSoC5/FanController.c ****                 #endif /* (CY_PSOC3) */
1420:.\Generated_Source\PSoC5/FanController.c ****             }
1421:.\Generated_Source\PSoC5/FanController.c ****             else
1422:.\Generated_Source\PSoC5/FanController.c ****             {
1423:.\Generated_Source\PSoC5/FanController.c ****                 /* TDs need to be sequenced in reverse to match the Tachometer hardware
1424:.\Generated_Source\PSoC5/FanController.c ****                 * block address bus sequence. Next TD after fan[n] is fan[n-1].
1425:.\Generated_Source\PSoC5/FanController.c ****                 */
1426:.\Generated_Source\PSoC5/FanController.c ****                 #if (FanController_IS_AUTO_HARDWARE_MODE)
1427:.\Generated_Source\PSoC5/FanController.c ****                     #if (CY_PSOC3)
1428:.\Generated_Source\PSoC5/FanController.c **** 
1429:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPer
1430:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1431:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanOutTds[fanNum - 1u].setActualPeriodTD,
1432:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1433:.\Generated_Source\PSoC5/FanController.c ****                                     /* Also assert NRQ at end of each TD in hardware controlled fan
1434:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TD_TERMOUT_EN);
1435:.\Generated_Source\PSoC5/FanController.c **** 
1436:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(
1437:.\Generated_Source\PSoC5/FanController.c ****                             FanController_fanOutTds[FanController_NUMBER_OF_FANS + fanNum].setActua
1438:.\Generated_Source\PSoC5/FanController.c ****                             2u,
1439:.\Generated_Source\PSoC5/FanController.c ****                             FanController_fanOutTds[
1440:.\Generated_Source\PSoC5/FanController.c ****                                 (FanController_NUMBER_OF_FANS + fanNum) - 1u].setActualPeriodTD,
1441:.\Generated_Source\PSoC5/FanController.c ****                             TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1442:.\Generated_Source\PSoC5/FanController.c ****                             /* Also assert NRQ at end of each TD in hardware controlled fan mode */
1443:.\Generated_Source\PSoC5/FanController.c ****                             FanController_TachOutDMA__TD_TERMOUT_EN);
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 46


1444:.\Generated_Source\PSoC5/FanController.c **** 
1445:.\Generated_Source\PSoC5/FanController.c ****                     #else
1446:.\Generated_Source\PSoC5/FanController.c **** 
1447:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPer
1448:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1449:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanOutTds[fanNum - 1u].setActualPeriodTD,
1450:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_DST_ADR | FanController_TD_SWAP_ENDIAN_FLAG  |
1451:.\Generated_Source\PSoC5/FanController.c ****                                     /* Also assert NRQ at end of each TD in hardware controlled fan
1452:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TD_TERMOUT_EN);
1453:.\Generated_Source\PSoC5/FanController.c **** 
1454:.\Generated_Source\PSoC5/FanController.c ****                     #endif /* (CY_PSOC3) */
1455:.\Generated_Source\PSoC5/FanController.c **** 
1456:.\Generated_Source\PSoC5/FanController.c ****                 #else
1457:.\Generated_Source\PSoC5/FanController.c ****                     #if (CY_PSOC3)
1458:.\Generated_Source\PSoC5/FanController.c **** 
1459:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPer
1460:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1461:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanOutTds[fanNum - 1u].setActualPeriodTD,
1462:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_DST_ADR |
1463:.\Generated_Source\PSoC5/FanController.c ****                                     /* Don't assert NRQ at end of each TD in firmware controlled fa
1464:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TD_SWAP_ENDIAN_FLAG);
1465:.\Generated_Source\PSoC5/FanController.c **** 
1466:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(
1467:.\Generated_Source\PSoC5/FanController.c ****                             FanController_fanOutTds[FanController_NUMBER_OF_FANS + fanNum].setActua
1468:.\Generated_Source\PSoC5/FanController.c ****                             2u,
1469:.\Generated_Source\PSoC5/FanController.c ****                             FanController_fanOutTds[
1470:.\Generated_Source\PSoC5/FanController.c ****                                 (FanController_NUMBER_OF_FANS + fanNum) - 1u].setActualPeriodTD,
1471:.\Generated_Source\PSoC5/FanController.c ****                             TD_INC_DST_ADR |
1472:.\Generated_Source\PSoC5/FanController.c ****                             /* Don't assert NRQ at end of each TD in firmware controlled fan mode *
1473:.\Generated_Source\PSoC5/FanController.c ****                             FanController_TD_SWAP_ENDIAN_FLAG);
1474:.\Generated_Source\PSoC5/FanController.c **** 
1475:.\Generated_Source\PSoC5/FanController.c ****                     #else
1476:.\Generated_Source\PSoC5/FanController.c **** 
1477:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPer
 1109              		.loc 1 1477 0
 1110 009a BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1111 009c 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1112 00a0 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1113 00a4 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
1478:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1479:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanOutTds[fanNum - 1u].setActualPeriodTD,
 1114              		.loc 1 1479 0
 1115 00a6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1116 00a8 03F1FF31 		add	r1, r3, #-1
1477:.\Generated_Source\PSoC5/FanController.c ****                         (void) CyDmaTdSetConfiguration(FanController_fanOutTds[fanNum].setActualPer
 1117              		.loc 1 1477 0
 1118 00ac 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1119 00b0 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1120 00b4 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1121 00b6 1046     		mov	r0, r2
 1122 00b8 4FF00201 		mov	r1, #2
 1123 00bc 1A46     		mov	r2, r3
 1124 00be 4FF00203 		mov	r3, #2
 1125 00c2 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 1126              	.L39:
1370:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1127              		.loc 1 1370 0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 47


 1128 00c6 FB79     		ldrb	r3, [r7, #7]
 1129 00c8 03F10103 		add	r3, r3, #1
 1130 00cc FB71     		strb	r3, [r7, #7]
 1131              	.L37:
1370:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1132              		.loc 1 1370 0 is_stmt 0 discriminator 1
 1133 00ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1134 00d0 002B     		cmp	r3, #0
 1135 00d2 C7D0     		beq	.L40
1480:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_DST_ADR |
1481:.\Generated_Source\PSoC5/FanController.c ****                                     /* Don't assert NRQ at end of each TD in firmware controlled fa
1482:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TD_SWAP_ENDIAN_FLAG);
1483:.\Generated_Source\PSoC5/FanController.c **** 
1484:.\Generated_Source\PSoC5/FanController.c ****                     #endif /* (CY_PSOC3) */
1485:.\Generated_Source\PSoC5/FanController.c ****                 #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1486:.\Generated_Source\PSoC5/FanController.c ****             }
1487:.\Generated_Source\PSoC5/FanController.c **** 
1488:.\Generated_Source\PSoC5/FanController.c ****             /* Get desired tachometer periods and hysteresis (hardware controlled fan mode
1489:.\Generated_Source\PSoC5/FanController.c ****             * only) from SRAM from the SetActualSpeed API.
1490:.\Generated_Source\PSoC5/FanController.c ****             */
1491:.\Generated_Source\PSoC5/FanController.c ****             #if (FanController_IS_AUTO_HARDWARE_MODE)
1492:.\Generated_Source\PSoC5/FanController.c **** 
1493:.\Generated_Source\PSoC5/FanController.c ****                 /* Get desired tachometer periods */
1494:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetConfiguration(FanController_fanInTds[fanNum].getDesiredPeriodTD,
1495:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1496:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanInTds[fanNum].getToleranceTD,
1497:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_SRC_ADR | FanController_TD_SWAP_ENDIAN_FLAG | TD_AUTO_EX
1498:.\Generated_Source\PSoC5/FanController.c **** 
1499:.\Generated_Source\PSoC5/FanController.c ****                 /* And get tachometer tolerances - either chain to the next fan OR wrap around to t
1500:.\Generated_Source\PSoC5/FanController.c ****                 if(fanNum == 0u)
1501:.\Generated_Source\PSoC5/FanController.c ****                 {
1502:.\Generated_Source\PSoC5/FanController.c ****                     /* Next TD after fan[0] is final fan: fan[NUMBER_OF_FANS-1] */
1503:.\Generated_Source\PSoC5/FanController.c ****                     (void) CyDmaTdSetConfiguration(FanController_fanInTds[fanNum].getToleranceTD,
1504:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1505:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanInTds[FanController_NUMBER_OF_FANS - 1u].getDe
1506:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_SRC_ADR | FanController_TD_SWAP_ENDIAN_FLAG |
1507:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachInDMA__TD_TERMOUT_EN);  /* Assert NRQ at end 
1508:.\Generated_Source\PSoC5/FanController.c ****                 }
1509:.\Generated_Source\PSoC5/FanController.c ****                 else
1510:.\Generated_Source\PSoC5/FanController.c ****                 {
1511:.\Generated_Source\PSoC5/FanController.c ****                     /* Next TD after fan[n] is fan[n-1] */
1512:.\Generated_Source\PSoC5/FanController.c ****                     (void) CyDmaTdSetConfiguration(FanController_fanInTds[fanNum].getToleranceTD,
1513:.\Generated_Source\PSoC5/FanController.c ****                                     2u,
1514:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_fanInTds[fanNum - 1u].getDesiredPeriodTD,
1515:.\Generated_Source\PSoC5/FanController.c ****                                     TD_INC_SRC_ADR |
1516:.\Generated_Source\PSoC5/FanController.c ****                                     /* Don't assert NRQ on intermediate TDs */
1517:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TD_SWAP_ENDIAN_FLAG);
1518:.\Generated_Source\PSoC5/FanController.c ****                 }
1519:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1520:.\Generated_Source\PSoC5/FanController.c ****         }
1521:.\Generated_Source\PSoC5/FanController.c **** 
1522:.\Generated_Source\PSoC5/FanController.c ****         /* Setup SRAM source/destination addresses and datapath register addresses */
1523:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1136              		.loc 1 1523 0 is_stmt 1
 1137 00d4 4FF00003 		mov	r3, #0
 1138 00d8 FB71     		strb	r3, [r7, #7]
 1139 00da 18E0     		b	.L41
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 48


 1140              	.L42:
1524:.\Generated_Source\PSoC5/FanController.c ****         {
1525:.\Generated_Source\PSoC5/FanController.c ****             /* TD for actual period to RAM */
1526:.\Generated_Source\PSoC5/FanController.c ****             #if (CY_PSOC3)
1527:.\Generated_Source\PSoC5/FanController.c **** 
1528:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(FanController_fanOutTds[counti].setActualPeriodTD,
1529:.\Generated_Source\PSoC5/FanController.c ****                                   LO16(FanController_TACH_ACTUAL_PERIOD_PTR),
1530:.\Generated_Source\PSoC5/FanController.c ****                                   LO16(((uint32) &FanController_fanControl.actualPeriodDma2[counti]
1531:.\Generated_Source\PSoC5/FanController.c **** 
1532:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(
1533:.\Generated_Source\PSoC5/FanController.c ****                                 FanController_fanOutTds[FanController_NUMBER_OF_FANS + counti].setA
1534:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(FanController_TACH_ACTUAL_PERIOD_PTR),
1535:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(((uint32) &FanController_fanControl.actualPeriodDma1[counti]))
1536:.\Generated_Source\PSoC5/FanController.c **** 
1537:.\Generated_Source\PSoC5/FanController.c ****             #else
1538:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(FanController_fanOutTds[counti].setActualPeriodTD,
 1141              		.loc 1 1538 0 discriminator 2
 1142 00dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1143 00de 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1144 00e2 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1145 00e6 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
1539:.\Generated_Source\PSoC5/FanController.c ****                                   LO16(FanController_TACH_ACTUAL_PERIOD_PTR),
1540:.\Generated_Source\PSoC5/FanController.c ****                                   LO16(((uint32) &FanController_fanControl.actualPeriod[counti])));
 1146              		.loc 1 1540 0 discriminator 2
 1147 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1148 00ea 4FEA4301 		lsl	r1, r3, #1
 1149 00ee 40F20003 		movw	r3, #:lower16:FanController_fanControl
 1150 00f2 C0F20003 		movt	r3, #:upper16:FanController_fanControl
 1151 00f6 CB18     		adds	r3, r1, r3
1538:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(FanController_fanOutTds[counti].setActualPeriodTD,
 1152              		.loc 1 1538 0 discriminator 2
 1153 00f8 9BB2     		uxth	r3, r3
 1154 00fa 1046     		mov	r0, r2
 1155 00fc 46F60821 		movw	r1, #27144
 1156 0100 1A46     		mov	r2, r3
 1157 0102 FFF7FEFF 		bl	CyDmaTdSetAddress
1523:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1158              		.loc 1 1523 0 discriminator 2
 1159 0106 FB79     		ldrb	r3, [r7, #7]
 1160 0108 03F10103 		add	r3, r3, #1
 1161 010c FB71     		strb	r3, [r7, #7]
 1162              	.L41:
1523:.\Generated_Source\PSoC5/FanController.c ****         for (counti = 0u; counti < FanController_NUMBER_OF_FANS; counti++)
 1163              		.loc 1 1523 0 is_stmt 0 discriminator 1
 1164 010e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1165 0110 002B     		cmp	r3, #0
 1166 0112 E3D0     		beq	.L42
1541:.\Generated_Source\PSoC5/FanController.c ****             #endif /* (CY_PSOC3) */
1542:.\Generated_Source\PSoC5/FanController.c **** 
1543:.\Generated_Source\PSoC5/FanController.c ****             #if(FanController_IS_AUTO_HARDWARE_MODE)
1544:.\Generated_Source\PSoC5/FanController.c **** 
1545:.\Generated_Source\PSoC5/FanController.c ****                 /* TD for desired period to tachometer */
1546:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(FanController_fanInTds[counti].getDesiredPeriodTD,
1547:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(((uint32) &FanController_fanControl.desiredPeriod[counti])),
1548:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(FanController_TACH_DESIRED_PERIOD_PTR));
1549:.\Generated_Source\PSoC5/FanController.c **** 
1550:.\Generated_Source\PSoC5/FanController.c ****                 /* TD for tolerance to tachometer */
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 49


1551:.\Generated_Source\PSoC5/FanController.c ****                 (void) CyDmaTdSetAddress(FanController_fanInTds[counti].getToleranceTD,
1552:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(((uint32) &FanController_fanControl.tolerance[counti])),
1553:.\Generated_Source\PSoC5/FanController.c ****                                 LO16(FanController_TACH_TOLERANCE_PTR));
1554:.\Generated_Source\PSoC5/FanController.c **** 
1555:.\Generated_Source\PSoC5/FanController.c ****             #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1556:.\Generated_Source\PSoC5/FanController.c ****         }
1557:.\Generated_Source\PSoC5/FanController.c **** 
1558:.\Generated_Source\PSoC5/FanController.c ****         /* Set the initial transaction descriptor to kick things off */
1559:.\Generated_Source\PSoC5/FanController.c ****         (void) CyDmaChSetInitialTd(FanController_TachOutDMA_channel,
 1167              		.loc 1 1559 0 is_stmt 1
 1168 0114 40F20003 		movw	r3, #:lower16:FanController_TachOutDMA_channel
 1169 0118 C0F20003 		movt	r3, #:upper16:FanController_TachOutDMA_channel
 1170 011c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1171 011e 40F20003 		movw	r3, #:lower16:FanController_fanOutTds.4965
 1172 0122 C0F20003 		movt	r3, #:upper16:FanController_fanOutTds.4965
 1173 0126 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1174 0128 1046     		mov	r0, r2
 1175 012a 1946     		mov	r1, r3
 1176 012c FFF7FEFF 		bl	CyDmaChSetInitialTd
1560:.\Generated_Source\PSoC5/FanController.c ****                 FanController_fanOutTds[0u].setActualPeriodTD);
1561:.\Generated_Source\PSoC5/FanController.c ****                 
1562:.\Generated_Source\PSoC5/FanController.c ****         #if(FanController_IS_AUTO_HARDWARE_MODE)
1563:.\Generated_Source\PSoC5/FanController.c **** 
1564:.\Generated_Source\PSoC5/FanController.c ****             (void) CyDmaChSetInitialTd(FanController_TachInDMA_channel,
1565:.\Generated_Source\PSoC5/FanController.c ****                     FanController_fanInTds[0u].getDesiredPeriodTD);
1566:.\Generated_Source\PSoC5/FanController.c **** 
1567:.\Generated_Source\PSoC5/FanController.c ****         #endif /* FanController_IS_AUTO_HARDWARE_MODE */
1568:.\Generated_Source\PSoC5/FanController.c ****     }
 1177              		.loc 1 1568 0
 1178 0130 07F10C07 		add	r7, r7, #12
 1179 0134 BD46     		mov	sp, r7
 1180 0136 90BD     		pop	{r4, r7, pc}
 1181              		.cfi_endproc
 1182              	.LFE16:
 1183              		.size	FanController_SetupDMA, .-FanController_SetupDMA
 1184              		.section	.text.FanController_TachOutDMA_DmaInitialize,"ax",%progbits
 1185              		.align	2
 1186              		.thumb
 1187              		.thumb_func
 1188              		.type	FanController_TachOutDMA_DmaInitialize, %function
 1189              	FanController_TachOutDMA_DmaInitialize:
 1190              	.LFB17:
1569:.\Generated_Source\PSoC5/FanController.c **** 
1570:.\Generated_Source\PSoC5/FanController.c **** 
1571:.\Generated_Source\PSoC5/FanController.c ****     /*********************************************************************
1572:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: FanController_TachOutDMA_DmaInitalize
1573:.\Generated_Source\PSoC5/FanController.c ****     **********************************************************************
1574:.\Generated_Source\PSoC5/FanController.c ****     *
1575:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1576:.\Generated_Source\PSoC5/FanController.c ****     *  This is a private API not exposed to users.
1577:.\Generated_Source\PSoC5/FanController.c ****     *
1578:.\Generated_Source\PSoC5/FanController.c ****     *  Allocates and initializes a channel of the DMAC to be used by the
1579:.\Generated_Source\PSoC5/FanController.c ****     *  caller.
1580:.\Generated_Source\PSoC5/FanController.c ****     *
1581:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1582:.\Generated_Source\PSoC5/FanController.c ****     *  uint8  burstCount
1583:.\Generated_Source\PSoC5/FanController.c ****     *  uint8  requestPerBurst
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 50


1584:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 upperSrcAddress
1585:.\Generated_Source\PSoC5/FanController.c ****     *  uint16 upperDestAddress
1586:.\Generated_Source\PSoC5/FanController.c ****     *
1587:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1588:.\Generated_Source\PSoC5/FanController.c ****     *  The channel that can be used by the caller for DMA activity.
1589:.\Generated_Source\PSoC5/FanController.c ****     *  DMA_INVALID_CHANNEL (0xFF) if there are no channels left.
1590:.\Generated_Source\PSoC5/FanController.c ****     *
1591:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1592:.\Generated_Source\PSoC5/FanController.c ****     *  None
1593:.\Generated_Source\PSoC5/FanController.c ****     *
1594:.\Generated_Source\PSoC5/FanController.c ****     *****************************************************************/
1595:.\Generated_Source\PSoC5/FanController.c ****     static uint8 FanController_TachOutDMA_DmaInitialize(uint8 burstCount, uint8 requestPerBurst,
1596:.\Generated_Source\PSoC5/FanController.c ****                                                         uint16 upperSrcAddress, uint16 upperDestAdd
1597:.\Generated_Source\PSoC5/FanController.c ****     {
 1191              		.loc 1 1597 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 16
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              	.LCFI47:
 1197              		.cfi_def_cfa_offset 8
 1198              		.cfi_offset 7, -8
 1199              		.cfi_offset 14, -4
 1200 0002 86B0     		sub	sp, sp, #24
 1201              	.LCFI48:
 1202              		.cfi_def_cfa_offset 32
 1203 0004 02AF     		add	r7, sp, #8
 1204              	.LCFI49:
 1205              		.cfi_def_cfa 7, 24
 1206 0006 F871     		strb	r0, [r7, #7]
 1207 0008 B971     		strb	r1, [r7, #6]
 1208 000a BA80     		strh	r2, [r7, #4]	@ movhi
 1209 000c 7B80     		strh	r3, [r7, #2]	@ movhi
1598:.\Generated_Source\PSoC5/FanController.c ****         /* Allocate a DMA channel */
1599:.\Generated_Source\PSoC5/FanController.c ****         uint8 tachOutDMA_dmaHandle = FanController_TachOutDMA__DRQ_NUMBER;
 1210              		.loc 1 1599 0
 1211 000e 4FF00003 		mov	r3, #0
 1212 0012 FB73     		strb	r3, [r7, #15]
1600:.\Generated_Source\PSoC5/FanController.c **** 
1601:.\Generated_Source\PSoC5/FanController.c ****         if(tachOutDMA_dmaHandle != DMA_INVALID_CHANNEL)
 1213              		.loc 1 1601 0
 1214 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1215 0016 FF2B     		cmp	r3, #255
 1216 0018 1DD0     		beq	.L44
1602:.\Generated_Source\PSoC5/FanController.c ****         {
1603:.\Generated_Source\PSoC5/FanController.c ****             /* Configure the channel */
1604:.\Generated_Source\PSoC5/FanController.c ****             (void) CyDmaChSetConfiguration(tachOutDMA_dmaHandle,
 1217              		.loc 1 1604 0
 1218 001a F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 1219 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1220 001e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1221 0020 4FF00000 		mov	r0, #0
 1222 0024 0090     		str	r0, [sp, #0]
 1223 0026 4FF00000 		mov	r0, #0
 1224 002a 0190     		str	r0, [sp, #4]
 1225 002c 0846     		mov	r0, r1
 1226 002e 1146     		mov	r1, r2
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 51


 1227 0030 1A46     		mov	r2, r3
 1228 0032 4FF00003 		mov	r3, #0
 1229 0036 FFF7FEFF 		bl	CyDmaChSetConfiguration
1605:.\Generated_Source\PSoC5/FanController.c ****                                     burstCount,
1606:.\Generated_Source\PSoC5/FanController.c ****                                     requestPerBurst,
1607:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TERMOUT0_SEL,
1608:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TERMOUT1_SEL,
1609:.\Generated_Source\PSoC5/FanController.c ****                                     FanController_TachOutDMA__TERMIN_SEL);
1610:.\Generated_Source\PSoC5/FanController.c **** 
1611:.\Generated_Source\PSoC5/FanController.c ****             /* Set the extended address for the transfers */
1612:.\Generated_Source\PSoC5/FanController.c ****             (void) CyDmaChSetExtendedAddress(tachOutDMA_dmaHandle, upperSrcAddress, upperDestAddres
 1230              		.loc 1 1612 0
 1231 003a F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 1232 003c BA88     		ldrh	r2, [r7, #4]
 1233 003e 7B88     		ldrh	r3, [r7, #2]
 1234 0040 0846     		mov	r0, r1
 1235 0042 1146     		mov	r1, r2
 1236 0044 1A46     		mov	r2, r3
 1237 0046 FFF7FEFF 		bl	CyDmaChSetExtendedAddress
1613:.\Generated_Source\PSoC5/FanController.c **** 
1614:.\Generated_Source\PSoC5/FanController.c ****             /* Set the priority for this channel */
1615:.\Generated_Source\PSoC5/FanController.c ****             (void) CyDmaChPriority(tachOutDMA_dmaHandle, FanController_TachOutDMA__PRIORITY);
 1238              		.loc 1 1615 0
 1239 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1240 004c 1846     		mov	r0, r3
 1241 004e 4FF00201 		mov	r1, #2
 1242 0052 FFF7FEFF 		bl	CyDmaChPriority
 1243              	.L44:
1616:.\Generated_Source\PSoC5/FanController.c ****         }
1617:.\Generated_Source\PSoC5/FanController.c **** 
1618:.\Generated_Source\PSoC5/FanController.c ****         return(tachOutDMA_dmaHandle);
 1244              		.loc 1 1618 0
 1245 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1619:.\Generated_Source\PSoC5/FanController.c ****     }
 1246              		.loc 1 1619 0
 1247 0058 1846     		mov	r0, r3
 1248 005a 07F11007 		add	r7, r7, #16
 1249 005e BD46     		mov	sp, r7
 1250 0060 80BD     		pop	{r7, pc}
 1251              		.cfi_endproc
 1252              	.LFE17:
 1253              		.size	FanController_TachOutDMA_DmaInitialize, .-FanController_TachOutDMA_DmaInitialize
 1254 0062 00BF     		.section	.text.FanController_TachOutDMA_DmaRelease,"ax",%progbits
 1255              		.align	2
 1256              		.thumb
 1257              		.thumb_func
 1258              		.type	FanController_TachOutDMA_DmaRelease, %function
 1259              	FanController_TachOutDMA_DmaRelease:
 1260              	.LFB18:
1620:.\Generated_Source\PSoC5/FanController.c **** 
1621:.\Generated_Source\PSoC5/FanController.c **** 
1622:.\Generated_Source\PSoC5/FanController.c ****     /*********************************************************************
1623:.\Generated_Source\PSoC5/FanController.c ****     * Function Name: void FanController_TachOutDMA_DmaRelease
1624:.\Generated_Source\PSoC5/FanController.c ****     **********************************************************************
1625:.\Generated_Source\PSoC5/FanController.c ****     *
1626:.\Generated_Source\PSoC5/FanController.c ****     * Summary:
1627:.\Generated_Source\PSoC5/FanController.c ****     *   Frees the channel associated with FanController_TachOutDMA and
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 52


1628:.\Generated_Source\PSoC5/FanController.c ****     *   also frees the TD descriptors.
1629:.\Generated_Source\PSoC5/FanController.c ****     *
1630:.\Generated_Source\PSoC5/FanController.c ****     * Parameters:
1631:.\Generated_Source\PSoC5/FanController.c ****     *   None
1632:.\Generated_Source\PSoC5/FanController.c ****     *
1633:.\Generated_Source\PSoC5/FanController.c ****     * Return:
1634:.\Generated_Source\PSoC5/FanController.c ****     *   None
1635:.\Generated_Source\PSoC5/FanController.c ****     *
1636:.\Generated_Source\PSoC5/FanController.c ****     * Side Effects:
1637:.\Generated_Source\PSoC5/FanController.c ****     *  None
1638:.\Generated_Source\PSoC5/FanController.c ****     *
1639:.\Generated_Source\PSoC5/FanController.c ****     *****************************************************************/
1640:.\Generated_Source\PSoC5/FanController.c ****     static void FanController_TachOutDMA_DmaRelease(void) CYREENTRANT
1641:.\Generated_Source\PSoC5/FanController.c ****     {
 1261              		.loc 1 1641 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 1, uses_anonymous_args = 0
 1265 0000 80B5     		push	{r7, lr}
 1266              	.LCFI50:
 1267              		.cfi_def_cfa_offset 8
 1268              		.cfi_offset 7, -8
 1269              		.cfi_offset 14, -4
 1270 0002 00AF     		add	r7, sp, #0
 1271              	.LCFI51:
 1272              		.cfi_def_cfa_register 7
1642:.\Generated_Source\PSoC5/FanController.c ****         /* Disable the channel, even if someone just did! */
1643:.\Generated_Source\PSoC5/FanController.c ****         (void) CyDmaChDisable(FanController_TachOutDMA_channel);
 1273              		.loc 1 1643 0
 1274 0004 40F20003 		movw	r3, #:lower16:FanController_TachOutDMA_channel
 1275 0008 C0F20003 		movt	r3, #:upper16:FanController_TachOutDMA_channel
 1276 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1277 000e 1846     		mov	r0, r3
 1278 0010 FFF7FEFF 		bl	CyDmaChDisable
1644:.\Generated_Source\PSoC5/FanController.c ****     }
 1279              		.loc 1 1644 0
 1280 0014 80BD     		pop	{r7, pc}
 1281              		.cfi_endproc
 1282              	.LFE18:
 1283              		.size	FanController_TachOutDMA_DmaRelease, .-FanController_TachOutDMA_DmaRelease
 1284              		.global	FanController_fanDriverRegs
 1285 0016 00BF     		.section	.rodata
 1286              		.align	2
 1287              		.type	FanController_fanDriverRegs, %object
 1288              		.size	FanController_fanDriverRegs, 4
 1289              	FanController_fanDriverRegs:
 1290 0000 46640040 		.word	1073767494
 1291              		.global	FanController_fanPwmInitRegs
 1292              		.align	2
 1293              		.type	FanController_fanPwmInitRegs, %object
 1294              		.size	FanController_fanPwmInitRegs, 8
 1295              	FanController_fanPwmInitRegs:
 1296 0004 16640040 		.word	1073767446
 1297 0008 96640040 		.word	1073767574
 1298              		.comm	FanController_fanControl,2,4
 1299              		.global	FanController_fanProperties
 1300              		.data
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 53


 1301              		.align	2
 1302              		.type	FanController_fanProperties, %object
 1303              		.size	FanController_fanProperties, 14
 1304              	FanController_fanProperties:
 1305 0000 9411     		.short	4500
 1306 0002 0429     		.short	10500
 1307 0004 AC0D     		.short	3500
 1308 0006 581B     		.short	7000
 1309 0008 3A00     		.short	58
 1310 000a 9411     		.short	4500
 1311 000c AC0D     		.short	3500
 1312 000e 0000     		.bss
 1313 0002 0000     		.align	2
 1314              	FanController_fanOutTds.4965:
 1315 0004 00       		.space	1
 1316 0005 000000   		.text
 1317              	.Letext0:
 1318              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1319              		.file 3 ".\\Generated_Source\\PSoC5\\FanController.h"
 1320              		.section	.debug_info,"",%progbits
 1321              	.Ldebug_info0:
 1322 0000 6A060000 		.4byte	0x66a
 1323 0004 0200     		.2byte	0x2
 1324 0006 00000000 		.4byte	.Ldebug_abbrev0
 1325 000a 04       		.byte	0x4
 1326 000b 01       		.uleb128 0x1
 1327 000c 02040000 		.4byte	.LASF77
 1328 0010 01       		.byte	0x1
 1329 0011 04050000 		.4byte	.LASF78
 1330 0015 48050000 		.4byte	.LASF79
 1331 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1332 001d 00000000 		.4byte	0
 1333 0021 00000000 		.4byte	0
 1334 0025 00000000 		.4byte	.Ldebug_line0
 1335 0029 02       		.uleb128 0x2
 1336 002a 01       		.byte	0x1
 1337 002b 06       		.byte	0x6
 1338 002c F2000000 		.4byte	.LASF0
 1339 0030 02       		.uleb128 0x2
 1340 0031 01       		.byte	0x1
 1341 0032 08       		.byte	0x8
 1342 0033 50040000 		.4byte	.LASF1
 1343 0037 02       		.uleb128 0x2
 1344 0038 02       		.byte	0x2
 1345 0039 05       		.byte	0x5
 1346 003a 5E040000 		.4byte	.LASF2
 1347 003e 02       		.uleb128 0x2
 1348 003f 02       		.byte	0x2
 1349 0040 07       		.byte	0x7
 1350 0041 12020000 		.4byte	.LASF3
 1351 0045 02       		.uleb128 0x2
 1352 0046 04       		.byte	0x4
 1353 0047 05       		.byte	0x5
 1354 0048 18010000 		.4byte	.LASF4
 1355 004c 02       		.uleb128 0x2
 1356 004d 04       		.byte	0x4
 1357 004e 07       		.byte	0x7
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 54


 1358 004f E5010000 		.4byte	.LASF5
 1359 0053 02       		.uleb128 0x2
 1360 0054 08       		.byte	0x8
 1361 0055 05       		.byte	0x5
 1362 0056 E4000000 		.4byte	.LASF6
 1363 005a 02       		.uleb128 0x2
 1364 005b 08       		.byte	0x8
 1365 005c 07       		.byte	0x7
 1366 005d B3000000 		.4byte	.LASF7
 1367 0061 03       		.uleb128 0x3
 1368 0062 04       		.byte	0x4
 1369 0063 05       		.byte	0x5
 1370 0064 696E7400 		.ascii	"int\000"
 1371 0068 02       		.uleb128 0x2
 1372 0069 04       		.byte	0x4
 1373 006a 07       		.byte	0x7
 1374 006b D8010000 		.4byte	.LASF8
 1375 006f 04       		.uleb128 0x4
 1376 0070 44010000 		.4byte	.LASF9
 1377 0074 02       		.byte	0x2
 1378 0075 5B       		.byte	0x5b
 1379 0076 30000000 		.4byte	0x30
 1380 007a 04       		.uleb128 0x4
 1381 007b 1A000000 		.4byte	.LASF10
 1382 007f 02       		.byte	0x2
 1383 0080 5C       		.byte	0x5c
 1384 0081 3E000000 		.4byte	0x3e
 1385 0085 04       		.uleb128 0x4
 1386 0086 65010000 		.4byte	.LASF11
 1387 008a 02       		.byte	0x2
 1388 008b 5D       		.byte	0x5d
 1389 008c 4C000000 		.4byte	0x4c
 1390 0090 02       		.uleb128 0x2
 1391 0091 04       		.byte	0x4
 1392 0092 04       		.byte	0x4
 1393 0093 B8030000 		.4byte	.LASF12
 1394 0097 02       		.uleb128 0x2
 1395 0098 08       		.byte	0x8
 1396 0099 04       		.byte	0x4
 1397 009a 4A010000 		.4byte	.LASF13
 1398 009e 02       		.uleb128 0x2
 1399 009f 01       		.byte	0x1
 1400 00a0 08       		.byte	0x8
 1401 00a1 B3040000 		.4byte	.LASF14
 1402 00a5 04       		.uleb128 0x4
 1403 00a6 4B040000 		.4byte	.LASF15
 1404 00aa 02       		.byte	0x2
 1405 00ab F0       		.byte	0xf0
 1406 00ac B0000000 		.4byte	0xb0
 1407 00b0 05       		.uleb128 0x5
 1408 00b1 6F000000 		.4byte	0x6f
 1409 00b5 04       		.uleb128 0x4
 1410 00b6 21010000 		.4byte	.LASF16
 1411 00ba 02       		.byte	0x2
 1412 00bb F1       		.byte	0xf1
 1413 00bc C0000000 		.4byte	0xc0
 1414 00c0 05       		.uleb128 0x5
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 55


 1415 00c1 7A000000 		.4byte	0x7a
 1416 00c5 02       		.uleb128 0x2
 1417 00c6 04       		.byte	0x4
 1418 00c7 07       		.byte	0x7
 1419 00c8 CB020000 		.4byte	.LASF17
 1420 00cc 06       		.uleb128 0x6
 1421 00cd 01       		.byte	0x1
 1422 00ce 03       		.byte	0x3
 1423 00cf D1       		.byte	0xd1
 1424 00d0 E3000000 		.4byte	0xe3
 1425 00d4 07       		.uleb128 0x7
 1426 00d5 2B020000 		.4byte	.LASF19
 1427 00d9 03       		.byte	0x3
 1428 00da D3       		.byte	0xd3
 1429 00db 6F000000 		.4byte	0x6f
 1430 00df 02       		.byte	0x2
 1431 00e0 23       		.byte	0x23
 1432 00e1 00       		.uleb128 0
 1433 00e2 00       		.byte	0
 1434 00e3 04       		.uleb128 0x4
 1435 00e4 E5050000 		.4byte	.LASF18
 1436 00e8 03       		.byte	0x3
 1437 00e9 D4       		.byte	0xd4
 1438 00ea CC000000 		.4byte	0xcc
 1439 00ee 06       		.uleb128 0x6
 1440 00ef 02       		.byte	0x2
 1441 00f0 03       		.byte	0x3
 1442 00f1 E0       		.byte	0xe0
 1443 00f2 05010000 		.4byte	0x105
 1444 00f6 07       		.uleb128 0x7
 1445 00f7 0D000000 		.4byte	.LASF20
 1446 00fb 03       		.byte	0x3
 1447 00fc EB       		.byte	0xeb
 1448 00fd 05010000 		.4byte	0x105
 1449 0101 02       		.byte	0x2
 1450 0102 23       		.byte	0x23
 1451 0103 00       		.uleb128 0
 1452 0104 00       		.byte	0
 1453 0105 08       		.uleb128 0x8
 1454 0106 7A000000 		.4byte	0x7a
 1455 010a 15010000 		.4byte	0x115
 1456 010e 09       		.uleb128 0x9
 1457 010f C5000000 		.4byte	0xc5
 1458 0113 00       		.byte	0
 1459 0114 00       		.byte	0
 1460 0115 04       		.uleb128 0x4
 1461 0116 08030000 		.4byte	.LASF21
 1462 011a 03       		.byte	0x3
 1463 011b EE       		.byte	0xee
 1464 011c EE000000 		.4byte	0xee
 1465 0120 06       		.uleb128 0x6
 1466 0121 0E       		.byte	0xe
 1467 0122 03       		.byte	0x3
 1468 0123 F1       		.byte	0xf1
 1469 0124 8B010000 		.4byte	0x18b
 1470 0128 07       		.uleb128 0x7
 1471 0129 86020000 		.4byte	.LASF22
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 56


 1472 012d 03       		.byte	0x3
 1473 012e F3       		.byte	0xf3
 1474 012f 7A000000 		.4byte	0x7a
 1475 0133 02       		.byte	0x2
 1476 0134 23       		.byte	0x23
 1477 0135 00       		.uleb128 0
 1478 0136 07       		.uleb128 0x7
 1479 0137 8B020000 		.4byte	.LASF23
 1480 013b 03       		.byte	0x3
 1481 013c F4       		.byte	0xf4
 1482 013d 7A000000 		.4byte	0x7a
 1483 0141 02       		.byte	0x2
 1484 0142 23       		.byte	0x23
 1485 0143 02       		.uleb128 0x2
 1486 0144 07       		.uleb128 0x7
 1487 0145 C5020000 		.4byte	.LASF24
 1488 0149 03       		.byte	0x3
 1489 014a F5       		.byte	0xf5
 1490 014b 7A000000 		.4byte	0x7a
 1491 014f 02       		.byte	0x2
 1492 0150 23       		.byte	0x23
 1493 0151 04       		.uleb128 0x4
 1494 0152 07       		.uleb128 0x7
 1495 0153 25020000 		.4byte	.LASF25
 1496 0157 03       		.byte	0x3
 1497 0158 F6       		.byte	0xf6
 1498 0159 7A000000 		.4byte	0x7a
 1499 015d 02       		.byte	0x2
 1500 015e 23       		.byte	0x23
 1501 015f 06       		.uleb128 0x6
 1502 0160 07       		.uleb128 0x7
 1503 0161 D8050000 		.4byte	.LASF26
 1504 0165 03       		.byte	0x3
 1505 0166 F7       		.byte	0xf7
 1506 0167 7A000000 		.4byte	0x7a
 1507 016b 02       		.byte	0x2
 1508 016c 23       		.byte	0x23
 1509 016d 08       		.uleb128 0x8
 1510 016e 07       		.uleb128 0x7
 1511 016f 21000000 		.4byte	.LASF27
 1512 0173 03       		.byte	0x3
 1513 0174 F8       		.byte	0xf8
 1514 0175 7A000000 		.4byte	0x7a
 1515 0179 02       		.byte	0x2
 1516 017a 23       		.byte	0x23
 1517 017b 0A       		.uleb128 0xa
 1518 017c 07       		.uleb128 0x7
 1519 017d BC020000 		.4byte	.LASF28
 1520 0181 03       		.byte	0x3
 1521 0182 F9       		.byte	0xf9
 1522 0183 7A000000 		.4byte	0x7a
 1523 0187 02       		.byte	0x2
 1524 0188 23       		.byte	0x23
 1525 0189 0C       		.uleb128 0xc
 1526 018a 00       		.byte	0
 1527 018b 04       		.uleb128 0x4
 1528 018c 80030000 		.4byte	.LASF29
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 57


 1529 0190 03       		.byte	0x3
 1530 0191 FA       		.byte	0xfa
 1531 0192 20010000 		.4byte	0x120
 1532 0196 0A       		.uleb128 0xa
 1533 0197 04       		.byte	0x4
 1534 0198 03       		.byte	0x3
 1535 0199 0F01     		.2byte	0x10f
 1536 019b AF010000 		.4byte	0x1af
 1537 019f 0B       		.uleb128 0xb
 1538 01a0 A5000000 		.4byte	.LASF30
 1539 01a4 03       		.byte	0x3
 1540 01a5 1101     		.2byte	0x111
 1541 01a7 85000000 		.4byte	0x85
 1542 01ab 02       		.byte	0x2
 1543 01ac 23       		.byte	0x23
 1544 01ad 00       		.uleb128 0
 1545 01ae 00       		.byte	0
 1546 01af 0C       		.uleb128 0xc
 1547 01b0 A1010000 		.4byte	.LASF31
 1548 01b4 03       		.byte	0x3
 1549 01b5 1201     		.2byte	0x112
 1550 01b7 96010000 		.4byte	0x196
 1551 01bb 0A       		.uleb128 0xa
 1552 01bc 08       		.byte	0x8
 1553 01bd 03       		.byte	0x3
 1554 01be 1401     		.2byte	0x114
 1555 01c0 E3010000 		.4byte	0x1e3
 1556 01c4 0B       		.uleb128 0xb
 1557 01c5 D7000000 		.4byte	.LASF32
 1558 01c9 03       		.byte	0x3
 1559 01ca 1601     		.2byte	0x116
 1560 01cc 85000000 		.4byte	0x85
 1561 01d0 02       		.byte	0x2
 1562 01d1 23       		.byte	0x23
 1563 01d2 00       		.uleb128 0
 1564 01d3 0B       		.uleb128 0xb
 1565 01d4 D4020000 		.4byte	.LASF33
 1566 01d8 03       		.byte	0x3
 1567 01d9 1701     		.2byte	0x117
 1568 01db 85000000 		.4byte	0x85
 1569 01df 02       		.byte	0x2
 1570 01e0 23       		.byte	0x23
 1571 01e1 04       		.uleb128 0x4
 1572 01e2 00       		.byte	0
 1573 01e3 0C       		.uleb128 0xc
 1574 01e4 E5020000 		.4byte	.LASF34
 1575 01e8 03       		.byte	0x3
 1576 01e9 1801     		.2byte	0x118
 1577 01eb BB010000 		.4byte	0x1bb
 1578 01ef 0D       		.uleb128 0xd
 1579 01f0 01       		.byte	0x1
 1580 01f1 76000000 		.4byte	.LASF35
 1581 01f5 01       		.byte	0x1
 1582 01f6 86       		.byte	0x86
 1583 01f7 01       		.byte	0x1
 1584 01f8 00000000 		.4byte	.LFB0
 1585 01fc 2A000000 		.4byte	.LFE0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 58


 1586 0200 00000000 		.4byte	.LLST0
 1587 0204 01       		.byte	0x1
 1588 0205 0D       		.uleb128 0xd
 1589 0206 01       		.byte	0x1
 1590 0207 4B030000 		.4byte	.LASF36
 1591 020b 01       		.byte	0x1
 1592 020c A5       		.byte	0xa5
 1593 020d 01       		.byte	0x1
 1594 020e 00000000 		.4byte	.LFB1
 1595 0212 1C000000 		.4byte	.LFE1
 1596 0216 2C000000 		.4byte	.LLST1
 1597 021a 01       		.byte	0x1
 1598 021b 0E       		.uleb128 0xe
 1599 021c 01       		.byte	0x1
 1600 021d 02060000 		.4byte	.LASF39
 1601 0221 01       		.byte	0x1
 1602 0222 E0       		.byte	0xe0
 1603 0223 01       		.byte	0x1
 1604 0224 00000000 		.4byte	.LFB2
 1605 0228 06010000 		.4byte	.LFE2
 1606 022c 58000000 		.4byte	.LLST2
 1607 0230 01       		.byte	0x1
 1608 0231 52020000 		.4byte	0x252
 1609 0235 0F       		.uleb128 0xf
 1610 0236 64020000 		.4byte	.LASF37
 1611 023a 01       		.byte	0x1
 1612 023b E2       		.byte	0xe2
 1613 023c 6F000000 		.4byte	0x6f
 1614 0240 02       		.byte	0x2
 1615 0241 91       		.byte	0x91
 1616 0242 77       		.sleb128 -9
 1617 0243 0F       		.uleb128 0xf
 1618 0244 09010000 		.4byte	.LASF38
 1619 0248 01       		.byte	0x1
 1620 0249 E3       		.byte	0xe3
 1621 024a 6F000000 		.4byte	0x6f
 1622 024e 02       		.byte	0x2
 1623 024f 91       		.byte	0x91
 1624 0250 76       		.sleb128 -10
 1625 0251 00       		.byte	0
 1626 0252 10       		.uleb128 0x10
 1627 0253 01       		.byte	0x1
 1628 0254 61000000 		.4byte	.LASF40
 1629 0258 01       		.byte	0x1
 1630 0259 AE01     		.2byte	0x1ae
 1631 025b 01       		.byte	0x1
 1632 025c 00000000 		.4byte	.LFB3
 1633 0260 5C000000 		.4byte	.LFE3
 1634 0264 90000000 		.4byte	.LLST3
 1635 0268 01       		.byte	0x1
 1636 0269 7D020000 		.4byte	0x27d
 1637 026d 11       		.uleb128 0x11
 1638 026e 09010000 		.4byte	.LASF38
 1639 0272 01       		.byte	0x1
 1640 0273 B001     		.2byte	0x1b0
 1641 0275 6F000000 		.4byte	0x6f
 1642 0279 02       		.byte	0x2
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 59


 1643 027a 91       		.byte	0x91
 1644 027b 77       		.sleb128 -9
 1645 027c 00       		.byte	0
 1646 027d 10       		.uleb128 0x10
 1647 027e 01       		.byte	0x1
 1648 027f 87010000 		.4byte	.LASF41
 1649 0283 01       		.byte	0x1
 1650 0284 F201     		.2byte	0x1f2
 1651 0286 01       		.byte	0x1
 1652 0287 00000000 		.4byte	.LFB4
 1653 028b 3A000000 		.4byte	.LFE4
 1654 028f C8000000 		.4byte	.LLST4
 1655 0293 01       		.byte	0x1
 1656 0294 A8020000 		.4byte	0x2a8
 1657 0298 11       		.uleb128 0x11
 1658 0299 09010000 		.4byte	.LASF38
 1659 029d 01       		.byte	0x1
 1660 029e F401     		.2byte	0x1f4
 1661 02a0 6F000000 		.4byte	0x6f
 1662 02a4 02       		.byte	0x2
 1663 02a5 91       		.byte	0x91
 1664 02a6 77       		.sleb128 -9
 1665 02a7 00       		.byte	0
 1666 02a8 10       		.uleb128 0x10
 1667 02a9 01       		.byte	0x1
 1668 02aa F7010000 		.4byte	.LASF42
 1669 02ae 01       		.byte	0x1
 1670 02af 0E02     		.2byte	0x20e
 1671 02b1 01       		.byte	0x1
 1672 02b2 00000000 		.4byte	.LFB5
 1673 02b6 3A000000 		.4byte	.LFE5
 1674 02ba 00010000 		.4byte	.LLST5
 1675 02be 01       		.byte	0x1
 1676 02bf D3020000 		.4byte	0x2d3
 1677 02c3 11       		.uleb128 0x11
 1678 02c4 09010000 		.4byte	.LASF38
 1679 02c8 01       		.byte	0x1
 1680 02c9 1002     		.2byte	0x210
 1681 02cb 6F000000 		.4byte	0x6f
 1682 02cf 02       		.byte	0x2
 1683 02d0 91       		.byte	0x91
 1684 02d1 77       		.sleb128 -9
 1685 02d2 00       		.byte	0
 1686 02d3 10       		.uleb128 0x10
 1687 02d4 01       		.byte	0x1
 1688 02d5 6C010000 		.4byte	.LASF43
 1689 02d9 01       		.byte	0x1
 1690 02da 2C02     		.2byte	0x22c
 1691 02dc 01       		.byte	0x1
 1692 02dd 00000000 		.4byte	.LFB6
 1693 02e1 56000000 		.4byte	.LFE6
 1694 02e5 38010000 		.4byte	.LLST6
 1695 02e9 01       		.byte	0x1
 1696 02ea 0D030000 		.4byte	0x30d
 1697 02ee 12       		.uleb128 0x12
 1698 02ef 51010000 		.4byte	.LASF45
 1699 02f3 01       		.byte	0x1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 60


 1700 02f4 2C02     		.2byte	0x22c
 1701 02f6 6F000000 		.4byte	0x6f
 1702 02fa 02       		.byte	0x2
 1703 02fb 91       		.byte	0x91
 1704 02fc 6F       		.sleb128 -17
 1705 02fd 11       		.uleb128 0x11
 1706 02fe 09010000 		.4byte	.LASF38
 1707 0302 01       		.byte	0x1
 1708 0303 2E02     		.2byte	0x22e
 1709 0305 6F000000 		.4byte	0x6f
 1710 0309 02       		.byte	0x2
 1711 030a 91       		.byte	0x91
 1712 030b 77       		.sleb128 -9
 1713 030c 00       		.byte	0
 1714 030d 13       		.uleb128 0x13
 1715 030e 01       		.byte	0x1
 1716 030f 5E030000 		.4byte	.LASF47
 1717 0313 01       		.byte	0x1
 1718 0314 4C02     		.2byte	0x24c
 1719 0316 01       		.byte	0x1
 1720 0317 6F000000 		.4byte	0x6f
 1721 031b 00000000 		.4byte	.LFB7
 1722 031f 22000000 		.4byte	.LFE7
 1723 0323 70010000 		.4byte	.LLST7
 1724 0327 01       		.byte	0x1
 1725 0328 14       		.uleb128 0x14
 1726 0329 01       		.byte	0x1
 1727 032a 2D050000 		.4byte	.LASF44
 1728 032e 01       		.byte	0x1
 1729 032f 6802     		.2byte	0x268
 1730 0331 01       		.byte	0x1
 1731 0332 00000000 		.4byte	.LFB8
 1732 0336 22000000 		.4byte	.LFE8
 1733 033a 9C010000 		.4byte	.LLST8
 1734 033e 01       		.byte	0x1
 1735 033f 53030000 		.4byte	0x353
 1736 0343 12       		.uleb128 0x12
 1737 0344 A9040000 		.4byte	.LASF46
 1738 0348 01       		.byte	0x1
 1739 0349 6802     		.2byte	0x268
 1740 034b 7A000000 		.4byte	0x7a
 1741 034f 02       		.byte	0x2
 1742 0350 91       		.byte	0x91
 1743 0351 76       		.sleb128 -10
 1744 0352 00       		.byte	0
 1745 0353 15       		.uleb128 0x15
 1746 0354 01       		.byte	0x1
 1747 0355 8A000000 		.4byte	.LASF49
 1748 0359 01       		.byte	0x1
 1749 035a 8702     		.2byte	0x287
 1750 035c 01       		.byte	0x1
 1751 035d 7A000000 		.4byte	0x7a
 1752 0361 00000000 		.4byte	.LFB9
 1753 0365 22000000 		.4byte	.LFE9
 1754 0369 D4010000 		.4byte	.LLST9
 1755 036d 01       		.byte	0x1
 1756 036e 82030000 		.4byte	0x382
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 61


 1757 0372 11       		.uleb128 0x11
 1758 0373 A9040000 		.4byte	.LASF46
 1759 0377 01       		.byte	0x1
 1760 0378 8902     		.2byte	0x289
 1761 037a 7A000000 		.4byte	0x7a
 1762 037e 02       		.byte	0x2
 1763 037f 91       		.byte	0x91
 1764 0380 76       		.sleb128 -10
 1765 0381 00       		.byte	0
 1766 0382 13       		.uleb128 0x13
 1767 0383 01       		.byte	0x1
 1768 0384 BE030000 		.4byte	.LASF48
 1769 0388 01       		.byte	0x1
 1770 0389 AE02     		.2byte	0x2ae
 1771 038b 01       		.byte	0x1
 1772 038c 6F000000 		.4byte	0x6f
 1773 0390 00000000 		.4byte	.LFB10
 1774 0394 1E000000 		.4byte	.LFE10
 1775 0398 0C020000 		.4byte	.LLST10
 1776 039c 01       		.byte	0x1
 1777 039d 15       		.uleb128 0x15
 1778 039e 01       		.byte	0x1
 1779 039f 68040000 		.4byte	.LASF50
 1780 03a3 01       		.byte	0x1
 1781 03a4 CA02     		.2byte	0x2ca
 1782 03a6 01       		.byte	0x1
 1783 03a7 7A000000 		.4byte	0x7a
 1784 03ab 00000000 		.4byte	.LFB11
 1785 03af 22000000 		.4byte	.LFE11
 1786 03b3 38020000 		.4byte	.LLST11
 1787 03b7 01       		.byte	0x1
 1788 03b8 CC030000 		.4byte	0x3cc
 1789 03bc 11       		.uleb128 0x11
 1790 03bd 58020000 		.4byte	.LASF51
 1791 03c1 01       		.byte	0x1
 1792 03c2 CC02     		.2byte	0x2cc
 1793 03c4 7A000000 		.4byte	0x7a
 1794 03c8 02       		.byte	0x2
 1795 03c9 91       		.byte	0x91
 1796 03ca 76       		.sleb128 -10
 1797 03cb 00       		.byte	0
 1798 03cc 14       		.uleb128 0x14
 1799 03cd 01       		.byte	0x1
 1800 03ce 3D020000 		.4byte	.LASF52
 1801 03d2 01       		.byte	0x1
 1802 03d3 2B03     		.2byte	0x32b
 1803 03d5 01       		.byte	0x1
 1804 03d6 00000000 		.4byte	.LFB12
 1805 03da 60000000 		.4byte	.LFE12
 1806 03de 70020000 		.4byte	.LLST12
 1807 03e2 01       		.byte	0x1
 1808 03e3 15040000 		.4byte	0x415
 1809 03e7 12       		.uleb128 0x12
 1810 03e8 76020000 		.4byte	.LASF53
 1811 03ec 01       		.byte	0x1
 1812 03ed 2B03     		.2byte	0x32b
 1813 03ef 6F000000 		.4byte	0x6f
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 62


 1814 03f3 02       		.byte	0x2
 1815 03f4 91       		.byte	0x91
 1816 03f5 6F       		.sleb128 -17
 1817 03f6 12       		.uleb128 0x12
 1818 03f7 46000000 		.4byte	.LASF54
 1819 03fb 01       		.byte	0x1
 1820 03fc 2B03     		.2byte	0x32b
 1821 03fe 7A000000 		.4byte	0x7a
 1822 0402 02       		.byte	0x2
 1823 0403 91       		.byte	0x91
 1824 0404 6C       		.sleb128 -20
 1825 0405 11       		.uleb128 0x11
 1826 0406 FE000000 		.4byte	.LASF55
 1827 040a 01       		.byte	0x1
 1828 040b 2E03     		.2byte	0x32e
 1829 040d 85000000 		.4byte	0x85
 1830 0411 02       		.byte	0x2
 1831 0412 91       		.byte	0x91
 1832 0413 74       		.sleb128 -12
 1833 0414 00       		.byte	0
 1834 0415 15       		.uleb128 0x15
 1835 0416 01       		.byte	0x1
 1836 0417 8C050000 		.4byte	.LASF56
 1837 041b 01       		.byte	0x1
 1838 041c 5D03     		.2byte	0x35d
 1839 041e 01       		.byte	0x1
 1840 041f 7A000000 		.4byte	0x7a
 1841 0423 00000000 		.4byte	.LFB13
 1842 0427 54000000 		.4byte	.LFE13
 1843 042b A8020000 		.4byte	.LLST13
 1844 042f 01       		.byte	0x1
 1845 0430 53040000 		.4byte	0x453
 1846 0434 12       		.uleb128 0x12
 1847 0435 76020000 		.4byte	.LASF53
 1848 0439 01       		.byte	0x1
 1849 043a 5D03     		.2byte	0x35d
 1850 043c 6F000000 		.4byte	0x6f
 1851 0440 02       		.byte	0x2
 1852 0441 91       		.byte	0x91
 1853 0442 6F       		.sleb128 -17
 1854 0443 11       		.uleb128 0x11
 1855 0444 B8040000 		.4byte	.LASF57
 1856 0448 01       		.byte	0x1
 1857 0449 5F03     		.2byte	0x35f
 1858 044b 7A000000 		.4byte	0x7a
 1859 044f 02       		.byte	0x2
 1860 0450 91       		.byte	0x91
 1861 0451 76       		.sleb128 -10
 1862 0452 00       		.byte	0
 1863 0453 10       		.uleb128 0x10
 1864 0454 01       		.byte	0x1
 1865 0455 15060000 		.4byte	.LASF58
 1866 0459 01       		.byte	0x1
 1867 045a 9303     		.2byte	0x393
 1868 045c 01       		.byte	0x1
 1869 045d 00000000 		.4byte	.LFB14
 1870 0461 7C010000 		.4byte	.LFE14
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 63


 1871 0465 E0020000 		.4byte	.LLST14
 1872 0469 01       		.byte	0x1
 1873 046a AB040000 		.4byte	0x4ab
 1874 046e 12       		.uleb128 0x12
 1875 046f 5B010000 		.4byte	.LASF59
 1876 0473 01       		.byte	0x1
 1877 0474 9303     		.2byte	0x393
 1878 0476 6F000000 		.4byte	0x6f
 1879 047a 02       		.byte	0x2
 1880 047b 91       		.byte	0x91
 1881 047c 67       		.sleb128 -25
 1882 047d 16       		.uleb128 0x16
 1883 047e 72706D00 		.ascii	"rpm\000"
 1884 0482 01       		.byte	0x1
 1885 0483 9303     		.2byte	0x393
 1886 0485 7A000000 		.4byte	0x7a
 1887 0489 02       		.byte	0x2
 1888 048a 91       		.byte	0x91
 1889 048b 64       		.sleb128 -28
 1890 048c 11       		.uleb128 0x11
 1891 048d CA000000 		.4byte	.LASF60
 1892 0491 01       		.byte	0x1
 1893 0492 9503     		.2byte	0x395
 1894 0494 85000000 		.4byte	0x85
 1895 0498 02       		.byte	0x2
 1896 0499 91       		.byte	0x91
 1897 049a 6C       		.sleb128 -20
 1898 049b 11       		.uleb128 0x11
 1899 049c 00000000 		.4byte	.LASF61
 1900 04a0 01       		.byte	0x1
 1901 04a1 9603     		.2byte	0x396
 1902 04a3 7A000000 		.4byte	0x7a
 1903 04a7 02       		.byte	0x2
 1904 04a8 91       		.byte	0x91
 1905 04a9 6A       		.sleb128 -22
 1906 04aa 00       		.byte	0
 1907 04ab 15       		.uleb128 0x15
 1908 04ac 01       		.byte	0x1
 1909 04ad 29000000 		.4byte	.LASF62
 1910 04b1 01       		.byte	0x1
 1911 04b2 1F04     		.2byte	0x41f
 1912 04b4 01       		.byte	0x1
 1913 04b5 7A000000 		.4byte	0x7a
 1914 04b9 00000000 		.4byte	.LFB15
 1915 04bd 5C000000 		.4byte	.LFE15
 1916 04c1 18030000 		.4byte	.LLST15
 1917 04c5 01       		.byte	0x1
 1918 04c6 E9040000 		.4byte	0x4e9
 1919 04ca 12       		.uleb128 0x12
 1920 04cb 5B010000 		.4byte	.LASF59
 1921 04cf 01       		.byte	0x1
 1922 04d0 1F04     		.2byte	0x41f
 1923 04d2 6F000000 		.4byte	0x6f
 1924 04d6 02       		.byte	0x2
 1925 04d7 91       		.byte	0x91
 1926 04d8 6F       		.sleb128 -17
 1927 04d9 11       		.uleb128 0x11
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 64


 1928 04da 80050000 		.4byte	.LASF63
 1929 04de 01       		.byte	0x1
 1930 04df 2104     		.2byte	0x421
 1931 04e1 7A000000 		.4byte	0x7a
 1932 04e5 02       		.byte	0x2
 1933 04e6 91       		.byte	0x91
 1934 04e7 76       		.sleb128 -10
 1935 04e8 00       		.byte	0
 1936 04e9 17       		.uleb128 0x17
 1937 04ea C1040000 		.4byte	.LASF80
 1938 04ee 01       		.byte	0x1
 1939 04ef 1705     		.2byte	0x517
 1940 04f1 01       		.byte	0x1
 1941 04f2 00000000 		.4byte	.LFB16
 1942 04f6 38010000 		.4byte	.LFE16
 1943 04fa 50030000 		.4byte	.LLST16
 1944 04fe 01       		.byte	0x1
 1945 04ff 34050000 		.4byte	0x534
 1946 0503 11       		.uleb128 0x11
 1947 0504 64020000 		.4byte	.LASF37
 1948 0508 01       		.byte	0x1
 1949 0509 1905     		.2byte	0x519
 1950 050b 6F000000 		.4byte	0x6f
 1951 050f 02       		.byte	0x2
 1952 0510 91       		.byte	0x91
 1953 0511 6F       		.sleb128 -17
 1954 0512 11       		.uleb128 0x11
 1955 0513 79030000 		.4byte	.LASF64
 1956 0517 01       		.byte	0x1
 1957 0518 1A05     		.2byte	0x51a
 1958 051a 6F000000 		.4byte	0x6f
 1959 051e 02       		.byte	0x2
 1960 051f 91       		.byte	0x91
 1961 0520 6E       		.sleb128 -18
 1962 0521 11       		.uleb128 0x11
 1963 0522 C0050000 		.4byte	.LASF65
 1964 0526 01       		.byte	0x1
 1965 0527 1F05     		.2byte	0x51f
 1966 0529 34050000 		.4byte	0x534
 1967 052d 05       		.byte	0x5
 1968 052e 03       		.byte	0x3
 1969 052f 04000000 		.4byte	FanController_fanOutTds.4965
 1970 0533 00       		.byte	0
 1971 0534 08       		.uleb128 0x8
 1972 0535 E3000000 		.4byte	0xe3
 1973 0539 44050000 		.4byte	0x544
 1974 053d 09       		.uleb128 0x9
 1975 053e C5000000 		.4byte	0xc5
 1976 0542 00       		.byte	0
 1977 0543 00       		.byte	0
 1978 0544 18       		.uleb128 0x18
 1979 0545 DB030000 		.4byte	.LASF81
 1980 0549 01       		.byte	0x1
 1981 054a 3B06     		.2byte	0x63b
 1982 054c 01       		.byte	0x1
 1983 054d 6F000000 		.4byte	0x6f
 1984 0551 00000000 		.4byte	.LFB17
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 65


 1985 0555 62000000 		.4byte	.LFE17
 1986 0559 88030000 		.4byte	.LLST17
 1987 055d 01       		.byte	0x1
 1988 055e AE050000 		.4byte	0x5ae
 1989 0562 12       		.uleb128 0x12
 1990 0563 6B020000 		.4byte	.LASF66
 1991 0567 01       		.byte	0x1
 1992 0568 3B06     		.2byte	0x63b
 1993 056a 6F000000 		.4byte	0x6f
 1994 056e 02       		.byte	0x2
 1995 056f 91       		.byte	0x91
 1996 0570 6F       		.sleb128 -17
 1997 0571 12       		.uleb128 0x12
 1998 0572 D8040000 		.4byte	.LASF67
 1999 0576 01       		.byte	0x1
 2000 0577 3B06     		.2byte	0x63b
 2001 0579 6F000000 		.4byte	0x6f
 2002 057d 02       		.byte	0x2
 2003 057e 91       		.byte	0x91
 2004 057f 6E       		.sleb128 -18
 2005 0580 12       		.uleb128 0x12
 2006 0581 90020000 		.4byte	.LASF68
 2007 0585 01       		.byte	0x1
 2008 0586 3C06     		.2byte	0x63c
 2009 0588 7A000000 		.4byte	0x7a
 2010 058c 02       		.byte	0x2
 2011 058d 91       		.byte	0x91
 2012 058e 6C       		.sleb128 -20
 2013 058f 12       		.uleb128 0x12
 2014 0590 50000000 		.4byte	.LASF69
 2015 0594 01       		.byte	0x1
 2016 0595 3C06     		.2byte	0x63c
 2017 0597 7A000000 		.4byte	0x7a
 2018 059b 02       		.byte	0x2
 2019 059c 91       		.byte	0x91
 2020 059d 6A       		.sleb128 -22
 2021 059e 11       		.uleb128 0x11
 2022 059f C3010000 		.4byte	.LASF70
 2023 05a3 01       		.byte	0x1
 2024 05a4 3F06     		.2byte	0x63f
 2025 05a6 6F000000 		.4byte	0x6f
 2026 05aa 02       		.byte	0x2
 2027 05ab 91       		.byte	0x91
 2028 05ac 77       		.sleb128 -9
 2029 05ad 00       		.byte	0
 2030 05ae 19       		.uleb128 0x19
 2031 05af 27030000 		.4byte	.LASF82
 2032 05b3 01       		.byte	0x1
 2033 05b4 6806     		.2byte	0x668
 2034 05b6 01       		.byte	0x1
 2035 05b7 00000000 		.4byte	.LFB18
 2036 05bb 16000000 		.4byte	.LFE18
 2037 05bf C0030000 		.4byte	.LLST18
 2038 05c3 01       		.byte	0x1
 2039 05c4 0F       		.uleb128 0xf
 2040 05c5 88040000 		.4byte	.LASF71
 2041 05c9 01       		.byte	0x1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 66


 2042 05ca 41       		.byte	0x41
 2043 05cb 6F000000 		.4byte	0x6f
 2044 05cf 05       		.byte	0x5
 2045 05d0 03       		.byte	0x3
 2046 05d1 01000000 		.4byte	FanController_TachOutDMA_channel
 2047 05d5 08       		.uleb128 0x8
 2048 05d6 E3010000 		.4byte	0x1e3
 2049 05da E5050000 		.4byte	0x5e5
 2050 05de 09       		.uleb128 0x9
 2051 05df C5000000 		.4byte	0xc5
 2052 05e3 00       		.byte	0
 2053 05e4 00       		.byte	0
 2054 05e5 1A       		.uleb128 0x1a
 2055 05e6 27010000 		.4byte	.LASF72
 2056 05ea 01       		.byte	0x1
 2057 05eb 0809     		.2byte	0x908
 2058 05ed F8050000 		.4byte	0x5f8
 2059 05f1 01       		.byte	0x1
 2060 05f2 05       		.byte	0x5
 2061 05f3 03       		.byte	0x3
 2062 05f4 00000000 		.4byte	FanController_fanPwmInitRegs
 2063 05f8 1B       		.uleb128 0x1b
 2064 05f9 D5050000 		.4byte	0x5d5
 2065 05fd 1C       		.uleb128 0x1c
 2066 05fe A2030000 		.4byte	.LASF73
 2067 0602 01       		.byte	0x1
 2068 0603 3C       		.byte	0x3c
 2069 0604 6F000000 		.4byte	0x6f
 2070 0608 01       		.byte	0x1
 2071 0609 05       		.byte	0x5
 2072 060a 03       		.byte	0x3
 2073 060b 00000000 		.4byte	FanController_initVar
 2074 060f 1A       		.uleb128 0x1a
 2075 0610 A7050000 		.4byte	.LASF74
 2076 0614 01       		.byte	0x1
 2077 0615 8509     		.2byte	0x985
 2078 0617 15010000 		.4byte	0x115
 2079 061b 01       		.byte	0x1
 2080 061c 05       		.byte	0x5
 2081 061d 03       		.byte	0x3
 2082 061e 00000000 		.4byte	FanController_fanControl
 2083 0622 08       		.uleb128 0x8
 2084 0623 AF010000 		.4byte	0x1af
 2085 0627 32060000 		.4byte	0x632
 2086 062b 09       		.uleb128 0x9
 2087 062c C5000000 		.4byte	0xc5
 2088 0630 00       		.byte	0
 2089 0631 00       		.byte	0
 2090 0632 1A       		.uleb128 0x1a
 2091 0633 A0020000 		.4byte	.LASF75
 2092 0637 01       		.byte	0x1
 2093 0638 A408     		.2byte	0x8a4
 2094 063a 45060000 		.4byte	0x645
 2095 063e 01       		.byte	0x1
 2096 063f 05       		.byte	0x5
 2097 0640 03       		.byte	0x3
 2098 0641 00000000 		.4byte	FanController_fanDriverRegs
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 67


 2099 0645 1B       		.uleb128 0x1b
 2100 0646 22060000 		.4byte	0x622
 2101 064a 08       		.uleb128 0x8
 2102 064b 8B010000 		.4byte	0x18b
 2103 064f 5A060000 		.4byte	0x65a
 2104 0653 09       		.uleb128 0x9
 2105 0654 C5000000 		.4byte	0xc5
 2106 0658 00       		.byte	0
 2107 0659 00       		.byte	0
 2108 065a 1A       		.uleb128 0x1a
 2109 065b E8040000 		.4byte	.LASF76
 2110 065f 01       		.byte	0x1
 2111 0660 340A     		.2byte	0xa34
 2112 0662 4A060000 		.4byte	0x64a
 2113 0666 01       		.byte	0x1
 2114 0667 05       		.byte	0x5
 2115 0668 03       		.byte	0x3
 2116 0669 00000000 		.4byte	FanController_fanProperties
 2117 066d 00       		.byte	0
 2118              		.section	.debug_abbrev,"",%progbits
 2119              	.Ldebug_abbrev0:
 2120 0000 01       		.uleb128 0x1
 2121 0001 11       		.uleb128 0x11
 2122 0002 01       		.byte	0x1
 2123 0003 25       		.uleb128 0x25
 2124 0004 0E       		.uleb128 0xe
 2125 0005 13       		.uleb128 0x13
 2126 0006 0B       		.uleb128 0xb
 2127 0007 03       		.uleb128 0x3
 2128 0008 0E       		.uleb128 0xe
 2129 0009 1B       		.uleb128 0x1b
 2130 000a 0E       		.uleb128 0xe
 2131 000b 55       		.uleb128 0x55
 2132 000c 06       		.uleb128 0x6
 2133 000d 11       		.uleb128 0x11
 2134 000e 01       		.uleb128 0x1
 2135 000f 52       		.uleb128 0x52
 2136 0010 01       		.uleb128 0x1
 2137 0011 10       		.uleb128 0x10
 2138 0012 06       		.uleb128 0x6
 2139 0013 00       		.byte	0
 2140 0014 00       		.byte	0
 2141 0015 02       		.uleb128 0x2
 2142 0016 24       		.uleb128 0x24
 2143 0017 00       		.byte	0
 2144 0018 0B       		.uleb128 0xb
 2145 0019 0B       		.uleb128 0xb
 2146 001a 3E       		.uleb128 0x3e
 2147 001b 0B       		.uleb128 0xb
 2148 001c 03       		.uleb128 0x3
 2149 001d 0E       		.uleb128 0xe
 2150 001e 00       		.byte	0
 2151 001f 00       		.byte	0
 2152 0020 03       		.uleb128 0x3
 2153 0021 24       		.uleb128 0x24
 2154 0022 00       		.byte	0
 2155 0023 0B       		.uleb128 0xb
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 68


 2156 0024 0B       		.uleb128 0xb
 2157 0025 3E       		.uleb128 0x3e
 2158 0026 0B       		.uleb128 0xb
 2159 0027 03       		.uleb128 0x3
 2160 0028 08       		.uleb128 0x8
 2161 0029 00       		.byte	0
 2162 002a 00       		.byte	0
 2163 002b 04       		.uleb128 0x4
 2164 002c 16       		.uleb128 0x16
 2165 002d 00       		.byte	0
 2166 002e 03       		.uleb128 0x3
 2167 002f 0E       		.uleb128 0xe
 2168 0030 3A       		.uleb128 0x3a
 2169 0031 0B       		.uleb128 0xb
 2170 0032 3B       		.uleb128 0x3b
 2171 0033 0B       		.uleb128 0xb
 2172 0034 49       		.uleb128 0x49
 2173 0035 13       		.uleb128 0x13
 2174 0036 00       		.byte	0
 2175 0037 00       		.byte	0
 2176 0038 05       		.uleb128 0x5
 2177 0039 35       		.uleb128 0x35
 2178 003a 00       		.byte	0
 2179 003b 49       		.uleb128 0x49
 2180 003c 13       		.uleb128 0x13
 2181 003d 00       		.byte	0
 2182 003e 00       		.byte	0
 2183 003f 06       		.uleb128 0x6
 2184 0040 13       		.uleb128 0x13
 2185 0041 01       		.byte	0x1
 2186 0042 0B       		.uleb128 0xb
 2187 0043 0B       		.uleb128 0xb
 2188 0044 3A       		.uleb128 0x3a
 2189 0045 0B       		.uleb128 0xb
 2190 0046 3B       		.uleb128 0x3b
 2191 0047 0B       		.uleb128 0xb
 2192 0048 01       		.uleb128 0x1
 2193 0049 13       		.uleb128 0x13
 2194 004a 00       		.byte	0
 2195 004b 00       		.byte	0
 2196 004c 07       		.uleb128 0x7
 2197 004d 0D       		.uleb128 0xd
 2198 004e 00       		.byte	0
 2199 004f 03       		.uleb128 0x3
 2200 0050 0E       		.uleb128 0xe
 2201 0051 3A       		.uleb128 0x3a
 2202 0052 0B       		.uleb128 0xb
 2203 0053 3B       		.uleb128 0x3b
 2204 0054 0B       		.uleb128 0xb
 2205 0055 49       		.uleb128 0x49
 2206 0056 13       		.uleb128 0x13
 2207 0057 38       		.uleb128 0x38
 2208 0058 0A       		.uleb128 0xa
 2209 0059 00       		.byte	0
 2210 005a 00       		.byte	0
 2211 005b 08       		.uleb128 0x8
 2212 005c 01       		.uleb128 0x1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 69


 2213 005d 01       		.byte	0x1
 2214 005e 49       		.uleb128 0x49
 2215 005f 13       		.uleb128 0x13
 2216 0060 01       		.uleb128 0x1
 2217 0061 13       		.uleb128 0x13
 2218 0062 00       		.byte	0
 2219 0063 00       		.byte	0
 2220 0064 09       		.uleb128 0x9
 2221 0065 21       		.uleb128 0x21
 2222 0066 00       		.byte	0
 2223 0067 49       		.uleb128 0x49
 2224 0068 13       		.uleb128 0x13
 2225 0069 2F       		.uleb128 0x2f
 2226 006a 0B       		.uleb128 0xb
 2227 006b 00       		.byte	0
 2228 006c 00       		.byte	0
 2229 006d 0A       		.uleb128 0xa
 2230 006e 13       		.uleb128 0x13
 2231 006f 01       		.byte	0x1
 2232 0070 0B       		.uleb128 0xb
 2233 0071 0B       		.uleb128 0xb
 2234 0072 3A       		.uleb128 0x3a
 2235 0073 0B       		.uleb128 0xb
 2236 0074 3B       		.uleb128 0x3b
 2237 0075 05       		.uleb128 0x5
 2238 0076 01       		.uleb128 0x1
 2239 0077 13       		.uleb128 0x13
 2240 0078 00       		.byte	0
 2241 0079 00       		.byte	0
 2242 007a 0B       		.uleb128 0xb
 2243 007b 0D       		.uleb128 0xd
 2244 007c 00       		.byte	0
 2245 007d 03       		.uleb128 0x3
 2246 007e 0E       		.uleb128 0xe
 2247 007f 3A       		.uleb128 0x3a
 2248 0080 0B       		.uleb128 0xb
 2249 0081 3B       		.uleb128 0x3b
 2250 0082 05       		.uleb128 0x5
 2251 0083 49       		.uleb128 0x49
 2252 0084 13       		.uleb128 0x13
 2253 0085 38       		.uleb128 0x38
 2254 0086 0A       		.uleb128 0xa
 2255 0087 00       		.byte	0
 2256 0088 00       		.byte	0
 2257 0089 0C       		.uleb128 0xc
 2258 008a 16       		.uleb128 0x16
 2259 008b 00       		.byte	0
 2260 008c 03       		.uleb128 0x3
 2261 008d 0E       		.uleb128 0xe
 2262 008e 3A       		.uleb128 0x3a
 2263 008f 0B       		.uleb128 0xb
 2264 0090 3B       		.uleb128 0x3b
 2265 0091 05       		.uleb128 0x5
 2266 0092 49       		.uleb128 0x49
 2267 0093 13       		.uleb128 0x13
 2268 0094 00       		.byte	0
 2269 0095 00       		.byte	0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 70


 2270 0096 0D       		.uleb128 0xd
 2271 0097 2E       		.uleb128 0x2e
 2272 0098 00       		.byte	0
 2273 0099 3F       		.uleb128 0x3f
 2274 009a 0C       		.uleb128 0xc
 2275 009b 03       		.uleb128 0x3
 2276 009c 0E       		.uleb128 0xe
 2277 009d 3A       		.uleb128 0x3a
 2278 009e 0B       		.uleb128 0xb
 2279 009f 3B       		.uleb128 0x3b
 2280 00a0 0B       		.uleb128 0xb
 2281 00a1 27       		.uleb128 0x27
 2282 00a2 0C       		.uleb128 0xc
 2283 00a3 11       		.uleb128 0x11
 2284 00a4 01       		.uleb128 0x1
 2285 00a5 12       		.uleb128 0x12
 2286 00a6 01       		.uleb128 0x1
 2287 00a7 40       		.uleb128 0x40
 2288 00a8 06       		.uleb128 0x6
 2289 00a9 9642     		.uleb128 0x2116
 2290 00ab 0C       		.uleb128 0xc
 2291 00ac 00       		.byte	0
 2292 00ad 00       		.byte	0
 2293 00ae 0E       		.uleb128 0xe
 2294 00af 2E       		.uleb128 0x2e
 2295 00b0 01       		.byte	0x1
 2296 00b1 3F       		.uleb128 0x3f
 2297 00b2 0C       		.uleb128 0xc
 2298 00b3 03       		.uleb128 0x3
 2299 00b4 0E       		.uleb128 0xe
 2300 00b5 3A       		.uleb128 0x3a
 2301 00b6 0B       		.uleb128 0xb
 2302 00b7 3B       		.uleb128 0x3b
 2303 00b8 0B       		.uleb128 0xb
 2304 00b9 27       		.uleb128 0x27
 2305 00ba 0C       		.uleb128 0xc
 2306 00bb 11       		.uleb128 0x11
 2307 00bc 01       		.uleb128 0x1
 2308 00bd 12       		.uleb128 0x12
 2309 00be 01       		.uleb128 0x1
 2310 00bf 40       		.uleb128 0x40
 2311 00c0 06       		.uleb128 0x6
 2312 00c1 9642     		.uleb128 0x2116
 2313 00c3 0C       		.uleb128 0xc
 2314 00c4 01       		.uleb128 0x1
 2315 00c5 13       		.uleb128 0x13
 2316 00c6 00       		.byte	0
 2317 00c7 00       		.byte	0
 2318 00c8 0F       		.uleb128 0xf
 2319 00c9 34       		.uleb128 0x34
 2320 00ca 00       		.byte	0
 2321 00cb 03       		.uleb128 0x3
 2322 00cc 0E       		.uleb128 0xe
 2323 00cd 3A       		.uleb128 0x3a
 2324 00ce 0B       		.uleb128 0xb
 2325 00cf 3B       		.uleb128 0x3b
 2326 00d0 0B       		.uleb128 0xb
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 71


 2327 00d1 49       		.uleb128 0x49
 2328 00d2 13       		.uleb128 0x13
 2329 00d3 02       		.uleb128 0x2
 2330 00d4 0A       		.uleb128 0xa
 2331 00d5 00       		.byte	0
 2332 00d6 00       		.byte	0
 2333 00d7 10       		.uleb128 0x10
 2334 00d8 2E       		.uleb128 0x2e
 2335 00d9 01       		.byte	0x1
 2336 00da 3F       		.uleb128 0x3f
 2337 00db 0C       		.uleb128 0xc
 2338 00dc 03       		.uleb128 0x3
 2339 00dd 0E       		.uleb128 0xe
 2340 00de 3A       		.uleb128 0x3a
 2341 00df 0B       		.uleb128 0xb
 2342 00e0 3B       		.uleb128 0x3b
 2343 00e1 05       		.uleb128 0x5
 2344 00e2 27       		.uleb128 0x27
 2345 00e3 0C       		.uleb128 0xc
 2346 00e4 11       		.uleb128 0x11
 2347 00e5 01       		.uleb128 0x1
 2348 00e6 12       		.uleb128 0x12
 2349 00e7 01       		.uleb128 0x1
 2350 00e8 40       		.uleb128 0x40
 2351 00e9 06       		.uleb128 0x6
 2352 00ea 9642     		.uleb128 0x2116
 2353 00ec 0C       		.uleb128 0xc
 2354 00ed 01       		.uleb128 0x1
 2355 00ee 13       		.uleb128 0x13
 2356 00ef 00       		.byte	0
 2357 00f0 00       		.byte	0
 2358 00f1 11       		.uleb128 0x11
 2359 00f2 34       		.uleb128 0x34
 2360 00f3 00       		.byte	0
 2361 00f4 03       		.uleb128 0x3
 2362 00f5 0E       		.uleb128 0xe
 2363 00f6 3A       		.uleb128 0x3a
 2364 00f7 0B       		.uleb128 0xb
 2365 00f8 3B       		.uleb128 0x3b
 2366 00f9 05       		.uleb128 0x5
 2367 00fa 49       		.uleb128 0x49
 2368 00fb 13       		.uleb128 0x13
 2369 00fc 02       		.uleb128 0x2
 2370 00fd 0A       		.uleb128 0xa
 2371 00fe 00       		.byte	0
 2372 00ff 00       		.byte	0
 2373 0100 12       		.uleb128 0x12
 2374 0101 05       		.uleb128 0x5
 2375 0102 00       		.byte	0
 2376 0103 03       		.uleb128 0x3
 2377 0104 0E       		.uleb128 0xe
 2378 0105 3A       		.uleb128 0x3a
 2379 0106 0B       		.uleb128 0xb
 2380 0107 3B       		.uleb128 0x3b
 2381 0108 05       		.uleb128 0x5
 2382 0109 49       		.uleb128 0x49
 2383 010a 13       		.uleb128 0x13
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 72


 2384 010b 02       		.uleb128 0x2
 2385 010c 0A       		.uleb128 0xa
 2386 010d 00       		.byte	0
 2387 010e 00       		.byte	0
 2388 010f 13       		.uleb128 0x13
 2389 0110 2E       		.uleb128 0x2e
 2390 0111 00       		.byte	0
 2391 0112 3F       		.uleb128 0x3f
 2392 0113 0C       		.uleb128 0xc
 2393 0114 03       		.uleb128 0x3
 2394 0115 0E       		.uleb128 0xe
 2395 0116 3A       		.uleb128 0x3a
 2396 0117 0B       		.uleb128 0xb
 2397 0118 3B       		.uleb128 0x3b
 2398 0119 05       		.uleb128 0x5
 2399 011a 27       		.uleb128 0x27
 2400 011b 0C       		.uleb128 0xc
 2401 011c 49       		.uleb128 0x49
 2402 011d 13       		.uleb128 0x13
 2403 011e 11       		.uleb128 0x11
 2404 011f 01       		.uleb128 0x1
 2405 0120 12       		.uleb128 0x12
 2406 0121 01       		.uleb128 0x1
 2407 0122 40       		.uleb128 0x40
 2408 0123 06       		.uleb128 0x6
 2409 0124 9742     		.uleb128 0x2117
 2410 0126 0C       		.uleb128 0xc
 2411 0127 00       		.byte	0
 2412 0128 00       		.byte	0
 2413 0129 14       		.uleb128 0x14
 2414 012a 2E       		.uleb128 0x2e
 2415 012b 01       		.byte	0x1
 2416 012c 3F       		.uleb128 0x3f
 2417 012d 0C       		.uleb128 0xc
 2418 012e 03       		.uleb128 0x3
 2419 012f 0E       		.uleb128 0xe
 2420 0130 3A       		.uleb128 0x3a
 2421 0131 0B       		.uleb128 0xb
 2422 0132 3B       		.uleb128 0x3b
 2423 0133 05       		.uleb128 0x5
 2424 0134 27       		.uleb128 0x27
 2425 0135 0C       		.uleb128 0xc
 2426 0136 11       		.uleb128 0x11
 2427 0137 01       		.uleb128 0x1
 2428 0138 12       		.uleb128 0x12
 2429 0139 01       		.uleb128 0x1
 2430 013a 40       		.uleb128 0x40
 2431 013b 06       		.uleb128 0x6
 2432 013c 9742     		.uleb128 0x2117
 2433 013e 0C       		.uleb128 0xc
 2434 013f 01       		.uleb128 0x1
 2435 0140 13       		.uleb128 0x13
 2436 0141 00       		.byte	0
 2437 0142 00       		.byte	0
 2438 0143 15       		.uleb128 0x15
 2439 0144 2E       		.uleb128 0x2e
 2440 0145 01       		.byte	0x1
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 73


 2441 0146 3F       		.uleb128 0x3f
 2442 0147 0C       		.uleb128 0xc
 2443 0148 03       		.uleb128 0x3
 2444 0149 0E       		.uleb128 0xe
 2445 014a 3A       		.uleb128 0x3a
 2446 014b 0B       		.uleb128 0xb
 2447 014c 3B       		.uleb128 0x3b
 2448 014d 05       		.uleb128 0x5
 2449 014e 27       		.uleb128 0x27
 2450 014f 0C       		.uleb128 0xc
 2451 0150 49       		.uleb128 0x49
 2452 0151 13       		.uleb128 0x13
 2453 0152 11       		.uleb128 0x11
 2454 0153 01       		.uleb128 0x1
 2455 0154 12       		.uleb128 0x12
 2456 0155 01       		.uleb128 0x1
 2457 0156 40       		.uleb128 0x40
 2458 0157 06       		.uleb128 0x6
 2459 0158 9742     		.uleb128 0x2117
 2460 015a 0C       		.uleb128 0xc
 2461 015b 01       		.uleb128 0x1
 2462 015c 13       		.uleb128 0x13
 2463 015d 00       		.byte	0
 2464 015e 00       		.byte	0
 2465 015f 16       		.uleb128 0x16
 2466 0160 05       		.uleb128 0x5
 2467 0161 00       		.byte	0
 2468 0162 03       		.uleb128 0x3
 2469 0163 08       		.uleb128 0x8
 2470 0164 3A       		.uleb128 0x3a
 2471 0165 0B       		.uleb128 0xb
 2472 0166 3B       		.uleb128 0x3b
 2473 0167 05       		.uleb128 0x5
 2474 0168 49       		.uleb128 0x49
 2475 0169 13       		.uleb128 0x13
 2476 016a 02       		.uleb128 0x2
 2477 016b 0A       		.uleb128 0xa
 2478 016c 00       		.byte	0
 2479 016d 00       		.byte	0
 2480 016e 17       		.uleb128 0x17
 2481 016f 2E       		.uleb128 0x2e
 2482 0170 01       		.byte	0x1
 2483 0171 03       		.uleb128 0x3
 2484 0172 0E       		.uleb128 0xe
 2485 0173 3A       		.uleb128 0x3a
 2486 0174 0B       		.uleb128 0xb
 2487 0175 3B       		.uleb128 0x3b
 2488 0176 05       		.uleb128 0x5
 2489 0177 27       		.uleb128 0x27
 2490 0178 0C       		.uleb128 0xc
 2491 0179 11       		.uleb128 0x11
 2492 017a 01       		.uleb128 0x1
 2493 017b 12       		.uleb128 0x12
 2494 017c 01       		.uleb128 0x1
 2495 017d 40       		.uleb128 0x40
 2496 017e 06       		.uleb128 0x6
 2497 017f 9642     		.uleb128 0x2116
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 74


 2498 0181 0C       		.uleb128 0xc
 2499 0182 01       		.uleb128 0x1
 2500 0183 13       		.uleb128 0x13
 2501 0184 00       		.byte	0
 2502 0185 00       		.byte	0
 2503 0186 18       		.uleb128 0x18
 2504 0187 2E       		.uleb128 0x2e
 2505 0188 01       		.byte	0x1
 2506 0189 03       		.uleb128 0x3
 2507 018a 0E       		.uleb128 0xe
 2508 018b 3A       		.uleb128 0x3a
 2509 018c 0B       		.uleb128 0xb
 2510 018d 3B       		.uleb128 0x3b
 2511 018e 05       		.uleb128 0x5
 2512 018f 27       		.uleb128 0x27
 2513 0190 0C       		.uleb128 0xc
 2514 0191 49       		.uleb128 0x49
 2515 0192 13       		.uleb128 0x13
 2516 0193 11       		.uleb128 0x11
 2517 0194 01       		.uleb128 0x1
 2518 0195 12       		.uleb128 0x12
 2519 0196 01       		.uleb128 0x1
 2520 0197 40       		.uleb128 0x40
 2521 0198 06       		.uleb128 0x6
 2522 0199 9642     		.uleb128 0x2116
 2523 019b 0C       		.uleb128 0xc
 2524 019c 01       		.uleb128 0x1
 2525 019d 13       		.uleb128 0x13
 2526 019e 00       		.byte	0
 2527 019f 00       		.byte	0
 2528 01a0 19       		.uleb128 0x19
 2529 01a1 2E       		.uleb128 0x2e
 2530 01a2 00       		.byte	0
 2531 01a3 03       		.uleb128 0x3
 2532 01a4 0E       		.uleb128 0xe
 2533 01a5 3A       		.uleb128 0x3a
 2534 01a6 0B       		.uleb128 0xb
 2535 01a7 3B       		.uleb128 0x3b
 2536 01a8 05       		.uleb128 0x5
 2537 01a9 27       		.uleb128 0x27
 2538 01aa 0C       		.uleb128 0xc
 2539 01ab 11       		.uleb128 0x11
 2540 01ac 01       		.uleb128 0x1
 2541 01ad 12       		.uleb128 0x12
 2542 01ae 01       		.uleb128 0x1
 2543 01af 40       		.uleb128 0x40
 2544 01b0 06       		.uleb128 0x6
 2545 01b1 9642     		.uleb128 0x2116
 2546 01b3 0C       		.uleb128 0xc
 2547 01b4 00       		.byte	0
 2548 01b5 00       		.byte	0
 2549 01b6 1A       		.uleb128 0x1a
 2550 01b7 34       		.uleb128 0x34
 2551 01b8 00       		.byte	0
 2552 01b9 03       		.uleb128 0x3
 2553 01ba 0E       		.uleb128 0xe
 2554 01bb 3A       		.uleb128 0x3a
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 75


 2555 01bc 0B       		.uleb128 0xb
 2556 01bd 3B       		.uleb128 0x3b
 2557 01be 05       		.uleb128 0x5
 2558 01bf 49       		.uleb128 0x49
 2559 01c0 13       		.uleb128 0x13
 2560 01c1 3F       		.uleb128 0x3f
 2561 01c2 0C       		.uleb128 0xc
 2562 01c3 02       		.uleb128 0x2
 2563 01c4 0A       		.uleb128 0xa
 2564 01c5 00       		.byte	0
 2565 01c6 00       		.byte	0
 2566 01c7 1B       		.uleb128 0x1b
 2567 01c8 26       		.uleb128 0x26
 2568 01c9 00       		.byte	0
 2569 01ca 49       		.uleb128 0x49
 2570 01cb 13       		.uleb128 0x13
 2571 01cc 00       		.byte	0
 2572 01cd 00       		.byte	0
 2573 01ce 1C       		.uleb128 0x1c
 2574 01cf 34       		.uleb128 0x34
 2575 01d0 00       		.byte	0
 2576 01d1 03       		.uleb128 0x3
 2577 01d2 0E       		.uleb128 0xe
 2578 01d3 3A       		.uleb128 0x3a
 2579 01d4 0B       		.uleb128 0xb
 2580 01d5 3B       		.uleb128 0x3b
 2581 01d6 0B       		.uleb128 0xb
 2582 01d7 49       		.uleb128 0x49
 2583 01d8 13       		.uleb128 0x13
 2584 01d9 3F       		.uleb128 0x3f
 2585 01da 0C       		.uleb128 0xc
 2586 01db 02       		.uleb128 0x2
 2587 01dc 0A       		.uleb128 0xa
 2588 01dd 00       		.byte	0
 2589 01de 00       		.byte	0
 2590 01df 00       		.byte	0
 2591              		.section	.debug_loc,"",%progbits
 2592              	.Ldebug_loc0:
 2593              	.LLST0:
 2594 0000 00000000 		.4byte	.LFB0
 2595 0004 02000000 		.4byte	.LCFI0
 2596 0008 0200     		.2byte	0x2
 2597 000a 7D       		.byte	0x7d
 2598 000b 00       		.sleb128 0
 2599 000c 02000000 		.4byte	.LCFI0
 2600 0010 04000000 		.4byte	.LCFI1
 2601 0014 0200     		.2byte	0x2
 2602 0016 7D       		.byte	0x7d
 2603 0017 08       		.sleb128 8
 2604 0018 04000000 		.4byte	.LCFI1
 2605 001c 2A000000 		.4byte	.LFE0
 2606 0020 0200     		.2byte	0x2
 2607 0022 77       		.byte	0x77
 2608 0023 08       		.sleb128 8
 2609 0024 00000000 		.4byte	0
 2610 0028 00000000 		.4byte	0
 2611              	.LLST1:
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 76


 2612 002c 00000000 		.4byte	.LFB1
 2613 0030 02000000 		.4byte	.LCFI2
 2614 0034 0200     		.2byte	0x2
 2615 0036 7D       		.byte	0x7d
 2616 0037 00       		.sleb128 0
 2617 0038 02000000 		.4byte	.LCFI2
 2618 003c 04000000 		.4byte	.LCFI3
 2619 0040 0200     		.2byte	0x2
 2620 0042 7D       		.byte	0x7d
 2621 0043 08       		.sleb128 8
 2622 0044 04000000 		.4byte	.LCFI3
 2623 0048 1C000000 		.4byte	.LFE1
 2624 004c 0200     		.2byte	0x2
 2625 004e 77       		.byte	0x77
 2626 004f 08       		.sleb128 8
 2627 0050 00000000 		.4byte	0
 2628 0054 00000000 		.4byte	0
 2629              	.LLST2:
 2630 0058 00000000 		.4byte	.LFB2
 2631 005c 02000000 		.4byte	.LCFI4
 2632 0060 0200     		.2byte	0x2
 2633 0062 7D       		.byte	0x7d
 2634 0063 00       		.sleb128 0
 2635 0064 02000000 		.4byte	.LCFI4
 2636 0068 04000000 		.4byte	.LCFI5
 2637 006c 0200     		.2byte	0x2
 2638 006e 7D       		.byte	0x7d
 2639 006f 08       		.sleb128 8
 2640 0070 04000000 		.4byte	.LCFI5
 2641 0074 06000000 		.4byte	.LCFI6
 2642 0078 0200     		.2byte	0x2
 2643 007a 7D       		.byte	0x7d
 2644 007b 10       		.sleb128 16
 2645 007c 06000000 		.4byte	.LCFI6
 2646 0080 06010000 		.4byte	.LFE2
 2647 0084 0200     		.2byte	0x2
 2648 0086 77       		.byte	0x77
 2649 0087 10       		.sleb128 16
 2650 0088 00000000 		.4byte	0
 2651 008c 00000000 		.4byte	0
 2652              	.LLST3:
 2653 0090 00000000 		.4byte	.LFB3
 2654 0094 02000000 		.4byte	.LCFI7
 2655 0098 0200     		.2byte	0x2
 2656 009a 7D       		.byte	0x7d
 2657 009b 00       		.sleb128 0
 2658 009c 02000000 		.4byte	.LCFI7
 2659 00a0 04000000 		.4byte	.LCFI8
 2660 00a4 0200     		.2byte	0x2
 2661 00a6 7D       		.byte	0x7d
 2662 00a7 08       		.sleb128 8
 2663 00a8 04000000 		.4byte	.LCFI8
 2664 00ac 06000000 		.4byte	.LCFI9
 2665 00b0 0200     		.2byte	0x2
 2666 00b2 7D       		.byte	0x7d
 2667 00b3 10       		.sleb128 16
 2668 00b4 06000000 		.4byte	.LCFI9
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 77


 2669 00b8 5C000000 		.4byte	.LFE3
 2670 00bc 0200     		.2byte	0x2
 2671 00be 77       		.byte	0x77
 2672 00bf 10       		.sleb128 16
 2673 00c0 00000000 		.4byte	0
 2674 00c4 00000000 		.4byte	0
 2675              	.LLST4:
 2676 00c8 00000000 		.4byte	.LFB4
 2677 00cc 02000000 		.4byte	.LCFI10
 2678 00d0 0200     		.2byte	0x2
 2679 00d2 7D       		.byte	0x7d
 2680 00d3 00       		.sleb128 0
 2681 00d4 02000000 		.4byte	.LCFI10
 2682 00d8 04000000 		.4byte	.LCFI11
 2683 00dc 0200     		.2byte	0x2
 2684 00de 7D       		.byte	0x7d
 2685 00df 08       		.sleb128 8
 2686 00e0 04000000 		.4byte	.LCFI11
 2687 00e4 06000000 		.4byte	.LCFI12
 2688 00e8 0200     		.2byte	0x2
 2689 00ea 7D       		.byte	0x7d
 2690 00eb 10       		.sleb128 16
 2691 00ec 06000000 		.4byte	.LCFI12
 2692 00f0 3A000000 		.4byte	.LFE4
 2693 00f4 0200     		.2byte	0x2
 2694 00f6 77       		.byte	0x77
 2695 00f7 10       		.sleb128 16
 2696 00f8 00000000 		.4byte	0
 2697 00fc 00000000 		.4byte	0
 2698              	.LLST5:
 2699 0100 00000000 		.4byte	.LFB5
 2700 0104 02000000 		.4byte	.LCFI13
 2701 0108 0200     		.2byte	0x2
 2702 010a 7D       		.byte	0x7d
 2703 010b 00       		.sleb128 0
 2704 010c 02000000 		.4byte	.LCFI13
 2705 0110 04000000 		.4byte	.LCFI14
 2706 0114 0200     		.2byte	0x2
 2707 0116 7D       		.byte	0x7d
 2708 0117 08       		.sleb128 8
 2709 0118 04000000 		.4byte	.LCFI14
 2710 011c 06000000 		.4byte	.LCFI15
 2711 0120 0200     		.2byte	0x2
 2712 0122 7D       		.byte	0x7d
 2713 0123 10       		.sleb128 16
 2714 0124 06000000 		.4byte	.LCFI15
 2715 0128 3A000000 		.4byte	.LFE5
 2716 012c 0200     		.2byte	0x2
 2717 012e 77       		.byte	0x77
 2718 012f 10       		.sleb128 16
 2719 0130 00000000 		.4byte	0
 2720 0134 00000000 		.4byte	0
 2721              	.LLST6:
 2722 0138 00000000 		.4byte	.LFB6
 2723 013c 02000000 		.4byte	.LCFI16
 2724 0140 0200     		.2byte	0x2
 2725 0142 7D       		.byte	0x7d
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 78


 2726 0143 00       		.sleb128 0
 2727 0144 02000000 		.4byte	.LCFI16
 2728 0148 04000000 		.4byte	.LCFI17
 2729 014c 0200     		.2byte	0x2
 2730 014e 7D       		.byte	0x7d
 2731 014f 08       		.sleb128 8
 2732 0150 04000000 		.4byte	.LCFI17
 2733 0154 06000000 		.4byte	.LCFI18
 2734 0158 0200     		.2byte	0x2
 2735 015a 7D       		.byte	0x7d
 2736 015b 18       		.sleb128 24
 2737 015c 06000000 		.4byte	.LCFI18
 2738 0160 56000000 		.4byte	.LFE6
 2739 0164 0200     		.2byte	0x2
 2740 0166 77       		.byte	0x77
 2741 0167 18       		.sleb128 24
 2742 0168 00000000 		.4byte	0
 2743 016c 00000000 		.4byte	0
 2744              	.LLST7:
 2745 0170 00000000 		.4byte	.LFB7
 2746 0174 02000000 		.4byte	.LCFI19
 2747 0178 0200     		.2byte	0x2
 2748 017a 7D       		.byte	0x7d
 2749 017b 00       		.sleb128 0
 2750 017c 02000000 		.4byte	.LCFI19
 2751 0180 04000000 		.4byte	.LCFI20
 2752 0184 0200     		.2byte	0x2
 2753 0186 7D       		.byte	0x7d
 2754 0187 04       		.sleb128 4
 2755 0188 04000000 		.4byte	.LCFI20
 2756 018c 22000000 		.4byte	.LFE7
 2757 0190 0200     		.2byte	0x2
 2758 0192 77       		.byte	0x77
 2759 0193 04       		.sleb128 4
 2760 0194 00000000 		.4byte	0
 2761 0198 00000000 		.4byte	0
 2762              	.LLST8:
 2763 019c 00000000 		.4byte	.LFB8
 2764 01a0 02000000 		.4byte	.LCFI21
 2765 01a4 0200     		.2byte	0x2
 2766 01a6 7D       		.byte	0x7d
 2767 01a7 00       		.sleb128 0
 2768 01a8 02000000 		.4byte	.LCFI21
 2769 01ac 04000000 		.4byte	.LCFI22
 2770 01b0 0200     		.2byte	0x2
 2771 01b2 7D       		.byte	0x7d
 2772 01b3 04       		.sleb128 4
 2773 01b4 04000000 		.4byte	.LCFI22
 2774 01b8 06000000 		.4byte	.LCFI23
 2775 01bc 0200     		.2byte	0x2
 2776 01be 7D       		.byte	0x7d
 2777 01bf 10       		.sleb128 16
 2778 01c0 06000000 		.4byte	.LCFI23
 2779 01c4 22000000 		.4byte	.LFE8
 2780 01c8 0200     		.2byte	0x2
 2781 01ca 77       		.byte	0x77
 2782 01cb 10       		.sleb128 16
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 79


 2783 01cc 00000000 		.4byte	0
 2784 01d0 00000000 		.4byte	0
 2785              	.LLST9:
 2786 01d4 00000000 		.4byte	.LFB9
 2787 01d8 02000000 		.4byte	.LCFI24
 2788 01dc 0200     		.2byte	0x2
 2789 01de 7D       		.byte	0x7d
 2790 01df 00       		.sleb128 0
 2791 01e0 02000000 		.4byte	.LCFI24
 2792 01e4 04000000 		.4byte	.LCFI25
 2793 01e8 0200     		.2byte	0x2
 2794 01ea 7D       		.byte	0x7d
 2795 01eb 04       		.sleb128 4
 2796 01ec 04000000 		.4byte	.LCFI25
 2797 01f0 06000000 		.4byte	.LCFI26
 2798 01f4 0200     		.2byte	0x2
 2799 01f6 7D       		.byte	0x7d
 2800 01f7 10       		.sleb128 16
 2801 01f8 06000000 		.4byte	.LCFI26
 2802 01fc 22000000 		.4byte	.LFE9
 2803 0200 0200     		.2byte	0x2
 2804 0202 77       		.byte	0x77
 2805 0203 10       		.sleb128 16
 2806 0204 00000000 		.4byte	0
 2807 0208 00000000 		.4byte	0
 2808              	.LLST10:
 2809 020c 00000000 		.4byte	.LFB10
 2810 0210 02000000 		.4byte	.LCFI27
 2811 0214 0200     		.2byte	0x2
 2812 0216 7D       		.byte	0x7d
 2813 0217 00       		.sleb128 0
 2814 0218 02000000 		.4byte	.LCFI27
 2815 021c 04000000 		.4byte	.LCFI28
 2816 0220 0200     		.2byte	0x2
 2817 0222 7D       		.byte	0x7d
 2818 0223 04       		.sleb128 4
 2819 0224 04000000 		.4byte	.LCFI28
 2820 0228 1E000000 		.4byte	.LFE10
 2821 022c 0200     		.2byte	0x2
 2822 022e 77       		.byte	0x77
 2823 022f 04       		.sleb128 4
 2824 0230 00000000 		.4byte	0
 2825 0234 00000000 		.4byte	0
 2826              	.LLST11:
 2827 0238 00000000 		.4byte	.LFB11
 2828 023c 02000000 		.4byte	.LCFI29
 2829 0240 0200     		.2byte	0x2
 2830 0242 7D       		.byte	0x7d
 2831 0243 00       		.sleb128 0
 2832 0244 02000000 		.4byte	.LCFI29
 2833 0248 04000000 		.4byte	.LCFI30
 2834 024c 0200     		.2byte	0x2
 2835 024e 7D       		.byte	0x7d
 2836 024f 04       		.sleb128 4
 2837 0250 04000000 		.4byte	.LCFI30
 2838 0254 06000000 		.4byte	.LCFI31
 2839 0258 0200     		.2byte	0x2
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 80


 2840 025a 7D       		.byte	0x7d
 2841 025b 10       		.sleb128 16
 2842 025c 06000000 		.4byte	.LCFI31
 2843 0260 22000000 		.4byte	.LFE11
 2844 0264 0200     		.2byte	0x2
 2845 0266 77       		.byte	0x77
 2846 0267 10       		.sleb128 16
 2847 0268 00000000 		.4byte	0
 2848 026c 00000000 		.4byte	0
 2849              	.LLST12:
 2850 0270 00000000 		.4byte	.LFB12
 2851 0274 02000000 		.4byte	.LCFI32
 2852 0278 0200     		.2byte	0x2
 2853 027a 7D       		.byte	0x7d
 2854 027b 00       		.sleb128 0
 2855 027c 02000000 		.4byte	.LCFI32
 2856 0280 04000000 		.4byte	.LCFI33
 2857 0284 0200     		.2byte	0x2
 2858 0286 7D       		.byte	0x7d
 2859 0287 04       		.sleb128 4
 2860 0288 04000000 		.4byte	.LCFI33
 2861 028c 06000000 		.4byte	.LCFI34
 2862 0290 0200     		.2byte	0x2
 2863 0292 7D       		.byte	0x7d
 2864 0293 18       		.sleb128 24
 2865 0294 06000000 		.4byte	.LCFI34
 2866 0298 60000000 		.4byte	.LFE12
 2867 029c 0200     		.2byte	0x2
 2868 029e 77       		.byte	0x77
 2869 029f 18       		.sleb128 24
 2870 02a0 00000000 		.4byte	0
 2871 02a4 00000000 		.4byte	0
 2872              	.LLST13:
 2873 02a8 00000000 		.4byte	.LFB13
 2874 02ac 02000000 		.4byte	.LCFI35
 2875 02b0 0200     		.2byte	0x2
 2876 02b2 7D       		.byte	0x7d
 2877 02b3 00       		.sleb128 0
 2878 02b4 02000000 		.4byte	.LCFI35
 2879 02b8 04000000 		.4byte	.LCFI36
 2880 02bc 0200     		.2byte	0x2
 2881 02be 7D       		.byte	0x7d
 2882 02bf 04       		.sleb128 4
 2883 02c0 04000000 		.4byte	.LCFI36
 2884 02c4 06000000 		.4byte	.LCFI37
 2885 02c8 0200     		.2byte	0x2
 2886 02ca 7D       		.byte	0x7d
 2887 02cb 18       		.sleb128 24
 2888 02cc 06000000 		.4byte	.LCFI37
 2889 02d0 54000000 		.4byte	.LFE13
 2890 02d4 0200     		.2byte	0x2
 2891 02d6 77       		.byte	0x77
 2892 02d7 18       		.sleb128 24
 2893 02d8 00000000 		.4byte	0
 2894 02dc 00000000 		.4byte	0
 2895              	.LLST14:
 2896 02e0 00000000 		.4byte	.LFB14
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 81


 2897 02e4 02000000 		.4byte	.LCFI38
 2898 02e8 0200     		.2byte	0x2
 2899 02ea 7D       		.byte	0x7d
 2900 02eb 00       		.sleb128 0
 2901 02ec 02000000 		.4byte	.LCFI38
 2902 02f0 04000000 		.4byte	.LCFI39
 2903 02f4 0200     		.2byte	0x2
 2904 02f6 7D       		.byte	0x7d
 2905 02f7 10       		.sleb128 16
 2906 02f8 04000000 		.4byte	.LCFI39
 2907 02fc 06000000 		.4byte	.LCFI40
 2908 0300 0200     		.2byte	0x2
 2909 0302 7D       		.byte	0x7d
 2910 0303 20       		.sleb128 32
 2911 0304 06000000 		.4byte	.LCFI40
 2912 0308 7C010000 		.4byte	.LFE14
 2913 030c 0200     		.2byte	0x2
 2914 030e 77       		.byte	0x77
 2915 030f 20       		.sleb128 32
 2916 0310 00000000 		.4byte	0
 2917 0314 00000000 		.4byte	0
 2918              	.LLST15:
 2919 0318 00000000 		.4byte	.LFB15
 2920 031c 02000000 		.4byte	.LCFI41
 2921 0320 0200     		.2byte	0x2
 2922 0322 7D       		.byte	0x7d
 2923 0323 00       		.sleb128 0
 2924 0324 02000000 		.4byte	.LCFI41
 2925 0328 04000000 		.4byte	.LCFI42
 2926 032c 0200     		.2byte	0x2
 2927 032e 7D       		.byte	0x7d
 2928 032f 04       		.sleb128 4
 2929 0330 04000000 		.4byte	.LCFI42
 2930 0334 06000000 		.4byte	.LCFI43
 2931 0338 0200     		.2byte	0x2
 2932 033a 7D       		.byte	0x7d
 2933 033b 18       		.sleb128 24
 2934 033c 06000000 		.4byte	.LCFI43
 2935 0340 5C000000 		.4byte	.LFE15
 2936 0344 0200     		.2byte	0x2
 2937 0346 77       		.byte	0x77
 2938 0347 18       		.sleb128 24
 2939 0348 00000000 		.4byte	0
 2940 034c 00000000 		.4byte	0
 2941              	.LLST16:
 2942 0350 00000000 		.4byte	.LFB16
 2943 0354 02000000 		.4byte	.LCFI44
 2944 0358 0200     		.2byte	0x2
 2945 035a 7D       		.byte	0x7d
 2946 035b 00       		.sleb128 0
 2947 035c 02000000 		.4byte	.LCFI44
 2948 0360 04000000 		.4byte	.LCFI45
 2949 0364 0200     		.2byte	0x2
 2950 0366 7D       		.byte	0x7d
 2951 0367 0C       		.sleb128 12
 2952 0368 04000000 		.4byte	.LCFI45
 2953 036c 06000000 		.4byte	.LCFI46
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 82


 2954 0370 0200     		.2byte	0x2
 2955 0372 7D       		.byte	0x7d
 2956 0373 18       		.sleb128 24
 2957 0374 06000000 		.4byte	.LCFI46
 2958 0378 38010000 		.4byte	.LFE16
 2959 037c 0200     		.2byte	0x2
 2960 037e 77       		.byte	0x77
 2961 037f 18       		.sleb128 24
 2962 0380 00000000 		.4byte	0
 2963 0384 00000000 		.4byte	0
 2964              	.LLST17:
 2965 0388 00000000 		.4byte	.LFB17
 2966 038c 02000000 		.4byte	.LCFI47
 2967 0390 0200     		.2byte	0x2
 2968 0392 7D       		.byte	0x7d
 2969 0393 00       		.sleb128 0
 2970 0394 02000000 		.4byte	.LCFI47
 2971 0398 04000000 		.4byte	.LCFI48
 2972 039c 0200     		.2byte	0x2
 2973 039e 7D       		.byte	0x7d
 2974 039f 08       		.sleb128 8
 2975 03a0 04000000 		.4byte	.LCFI48
 2976 03a4 06000000 		.4byte	.LCFI49
 2977 03a8 0200     		.2byte	0x2
 2978 03aa 7D       		.byte	0x7d
 2979 03ab 20       		.sleb128 32
 2980 03ac 06000000 		.4byte	.LCFI49
 2981 03b0 62000000 		.4byte	.LFE17
 2982 03b4 0200     		.2byte	0x2
 2983 03b6 77       		.byte	0x77
 2984 03b7 18       		.sleb128 24
 2985 03b8 00000000 		.4byte	0
 2986 03bc 00000000 		.4byte	0
 2987              	.LLST18:
 2988 03c0 00000000 		.4byte	.LFB18
 2989 03c4 02000000 		.4byte	.LCFI50
 2990 03c8 0200     		.2byte	0x2
 2991 03ca 7D       		.byte	0x7d
 2992 03cb 00       		.sleb128 0
 2993 03cc 02000000 		.4byte	.LCFI50
 2994 03d0 04000000 		.4byte	.LCFI51
 2995 03d4 0200     		.2byte	0x2
 2996 03d6 7D       		.byte	0x7d
 2997 03d7 08       		.sleb128 8
 2998 03d8 04000000 		.4byte	.LCFI51
 2999 03dc 16000000 		.4byte	.LFE18
 3000 03e0 0200     		.2byte	0x2
 3001 03e2 77       		.byte	0x77
 3002 03e3 08       		.sleb128 8
 3003 03e4 00000000 		.4byte	0
 3004 03e8 00000000 		.4byte	0
 3005              		.section	.debug_aranges,"",%progbits
 3006 0000 AC000000 		.4byte	0xac
 3007 0004 0200     		.2byte	0x2
 3008 0006 00000000 		.4byte	.Ldebug_info0
 3009 000a 04       		.byte	0x4
 3010 000b 00       		.byte	0
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 83


 3011 000c 0000     		.2byte	0
 3012 000e 0000     		.2byte	0
 3013 0010 00000000 		.4byte	.LFB0
 3014 0014 2A000000 		.4byte	.LFE0-.LFB0
 3015 0018 00000000 		.4byte	.LFB1
 3016 001c 1C000000 		.4byte	.LFE1-.LFB1
 3017 0020 00000000 		.4byte	.LFB2
 3018 0024 06010000 		.4byte	.LFE2-.LFB2
 3019 0028 00000000 		.4byte	.LFB3
 3020 002c 5C000000 		.4byte	.LFE3-.LFB3
 3021 0030 00000000 		.4byte	.LFB4
 3022 0034 3A000000 		.4byte	.LFE4-.LFB4
 3023 0038 00000000 		.4byte	.LFB5
 3024 003c 3A000000 		.4byte	.LFE5-.LFB5
 3025 0040 00000000 		.4byte	.LFB6
 3026 0044 56000000 		.4byte	.LFE6-.LFB6
 3027 0048 00000000 		.4byte	.LFB7
 3028 004c 22000000 		.4byte	.LFE7-.LFB7
 3029 0050 00000000 		.4byte	.LFB8
 3030 0054 22000000 		.4byte	.LFE8-.LFB8
 3031 0058 00000000 		.4byte	.LFB9
 3032 005c 22000000 		.4byte	.LFE9-.LFB9
 3033 0060 00000000 		.4byte	.LFB10
 3034 0064 1E000000 		.4byte	.LFE10-.LFB10
 3035 0068 00000000 		.4byte	.LFB11
 3036 006c 22000000 		.4byte	.LFE11-.LFB11
 3037 0070 00000000 		.4byte	.LFB12
 3038 0074 60000000 		.4byte	.LFE12-.LFB12
 3039 0078 00000000 		.4byte	.LFB13
 3040 007c 54000000 		.4byte	.LFE13-.LFB13
 3041 0080 00000000 		.4byte	.LFB14
 3042 0084 7C010000 		.4byte	.LFE14-.LFB14
 3043 0088 00000000 		.4byte	.LFB15
 3044 008c 5C000000 		.4byte	.LFE15-.LFB15
 3045 0090 00000000 		.4byte	.LFB16
 3046 0094 38010000 		.4byte	.LFE16-.LFB16
 3047 0098 00000000 		.4byte	.LFB17
 3048 009c 62000000 		.4byte	.LFE17-.LFB17
 3049 00a0 00000000 		.4byte	.LFB18
 3050 00a4 16000000 		.4byte	.LFE18-.LFB18
 3051 00a8 00000000 		.4byte	0
 3052 00ac 00000000 		.4byte	0
 3053              		.section	.debug_ranges,"",%progbits
 3054              	.Ldebug_ranges0:
 3055 0000 00000000 		.4byte	.LFB0
 3056 0004 2A000000 		.4byte	.LFE0
 3057 0008 00000000 		.4byte	.LFB1
 3058 000c 1C000000 		.4byte	.LFE1
 3059 0010 00000000 		.4byte	.LFB2
 3060 0014 06010000 		.4byte	.LFE2
 3061 0018 00000000 		.4byte	.LFB3
 3062 001c 5C000000 		.4byte	.LFE3
 3063 0020 00000000 		.4byte	.LFB4
 3064 0024 3A000000 		.4byte	.LFE4
 3065 0028 00000000 		.4byte	.LFB5
 3066 002c 3A000000 		.4byte	.LFE5
 3067 0030 00000000 		.4byte	.LFB6
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 84


 3068 0034 56000000 		.4byte	.LFE6
 3069 0038 00000000 		.4byte	.LFB7
 3070 003c 22000000 		.4byte	.LFE7
 3071 0040 00000000 		.4byte	.LFB8
 3072 0044 22000000 		.4byte	.LFE8
 3073 0048 00000000 		.4byte	.LFB9
 3074 004c 22000000 		.4byte	.LFE9
 3075 0050 00000000 		.4byte	.LFB10
 3076 0054 1E000000 		.4byte	.LFE10
 3077 0058 00000000 		.4byte	.LFB11
 3078 005c 22000000 		.4byte	.LFE11
 3079 0060 00000000 		.4byte	.LFB12
 3080 0064 60000000 		.4byte	.LFE12
 3081 0068 00000000 		.4byte	.LFB13
 3082 006c 54000000 		.4byte	.LFE13
 3083 0070 00000000 		.4byte	.LFB14
 3084 0074 7C010000 		.4byte	.LFE14
 3085 0078 00000000 		.4byte	.LFB15
 3086 007c 5C000000 		.4byte	.LFE15
 3087 0080 00000000 		.4byte	.LFB16
 3088 0084 38010000 		.4byte	.LFE16
 3089 0088 00000000 		.4byte	.LFB17
 3090 008c 62000000 		.4byte	.LFE17
 3091 0090 00000000 		.4byte	.LFB18
 3092 0094 16000000 		.4byte	.LFE18
 3093 0098 00000000 		.4byte	0
 3094 009c 00000000 		.4byte	0
 3095              		.section	.debug_line,"",%progbits
 3096              	.Ldebug_line0:
 3097 0000 A9020000 		.section	.debug_str,"MS",%progbits,1
 3097      02005F00 
 3097      00000201 
 3097      FB0E0D00 
 3097      01010101 
 3098              	.LASF61:
 3099 0000 63757272 		.ascii	"currentSpeed\000"
 3099      656E7453 
 3099      70656564 
 3099      00
 3100              	.LASF20:
 3101 000d 61637475 		.ascii	"actualPeriod\000"
 3101      616C5065 
 3101      72696F64 
 3101      00
 3102              	.LASF10:
 3103 001a 75696E74 		.ascii	"uint16\000"
 3103      313600
 3104              	.LASF27:
 3105 0021 696E6974 		.ascii	"initRpm\000"
 3105      52706D00 
 3106              	.LASF62:
 3107 0029 46616E43 		.ascii	"FanController_GetActualSpeed\000"
 3107      6F6E7472 
 3107      6F6C6C65 
 3107      725F4765 
 3107      74416374 
 3108              	.LASF54:
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 85


 3109 0046 64757479 		.ascii	"dutyCycle\000"
 3109      4379636C 
 3109      6500
 3110              	.LASF69:
 3111 0050 75707065 		.ascii	"upperDestAddress\000"
 3111      72446573 
 3111      74416464 
 3111      72657373 
 3111      00
 3112              	.LASF40:
 3113 0061 46616E43 		.ascii	"FanController_Enable\000"
 3113      6F6E7472 
 3113      6F6C6C65 
 3113      725F456E 
 3113      61626C65 
 3114              	.LASF35:
 3115 0076 46616E43 		.ascii	"FanController_Start\000"
 3115      6F6E7472 
 3115      6F6C6C65 
 3115      725F5374 
 3115      61727400 
 3116              	.LASF49:
 3117 008a 46616E43 		.ascii	"FanController_GetAlertMask\000"
 3117      6F6E7472 
 3117      6F6C6C65 
 3117      725F4765 
 3117      74416C65 
 3118              	.LASF30:
 3119 00a5 70776D53 		.ascii	"pwmSetDutyReg\000"
 3119      65744475 
 3119      74795265 
 3119      6700
 3120              	.LASF7:
 3121 00b3 6C6F6E67 		.ascii	"long long unsigned int\000"
 3121      206C6F6E 
 3121      6720756E 
 3121      7369676E 
 3121      65642069 
 3122              	.LASF60:
 3123 00ca 6F766572 		.ascii	"overrideDuty\000"
 3123      72696465 
 3123      44757479 
 3123      00
 3124              	.LASF32:
 3125 00d7 70776D50 		.ascii	"pwmPeriodReg\000"
 3125      6572696F 
 3125      64526567 
 3125      00
 3126              	.LASF6:
 3127 00e4 6C6F6E67 		.ascii	"long long int\000"
 3127      206C6F6E 
 3127      6720696E 
 3127      7400
 3128              	.LASF0:
 3129 00f2 7369676E 		.ascii	"signed char\000"
 3129      65642063 
 3129      68617200 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 86


 3130              	.LASF55:
 3131 00fe 6E657743 		.ascii	"newCompare\000"
 3131      6F6D7061 
 3131      726500
 3132              	.LASF38:
 3133 0109 696E7465 		.ascii	"interruptState\000"
 3133      72727570 
 3133      74537461 
 3133      746500
 3134              	.LASF4:
 3135 0118 6C6F6E67 		.ascii	"long int\000"
 3135      20696E74 
 3135      00
 3136              	.LASF16:
 3137 0121 72656731 		.ascii	"reg16\000"
 3137      3600
 3138              	.LASF72:
 3139 0127 46616E43 		.ascii	"FanController_fanPwmInitRegs\000"
 3139      6F6E7472 
 3139      6F6C6C65 
 3139      725F6661 
 3139      6E50776D 
 3140              	.LASF9:
 3141 0144 75696E74 		.ascii	"uint8\000"
 3141      3800
 3142              	.LASF13:
 3143 014a 646F7562 		.ascii	"double\000"
 3143      6C6500
 3144              	.LASF45:
 3145 0151 616C6572 		.ascii	"alertMode\000"
 3145      744D6F64 
 3145      6500
 3146              	.LASF59:
 3147 015b 66616E4E 		.ascii	"fanNumber\000"
 3147      756D6265 
 3147      7200
 3148              	.LASF11:
 3149 0165 75696E74 		.ascii	"uint32\000"
 3149      333200
 3150              	.LASF43:
 3151 016c 46616E43 		.ascii	"FanController_SetAlertMode\000"
 3151      6F6E7472 
 3151      6F6C6C65 
 3151      725F5365 
 3151      74416C65 
 3152              	.LASF41:
 3153 0187 46616E43 		.ascii	"FanController_EnableAlert\000"
 3153      6F6E7472 
 3153      6F6C6C65 
 3153      725F456E 
 3153      61626C65 
 3154              	.LASF31:
 3155 01a1 46616E43 		.ascii	"FanController_fanDriverRegsStruct\000"
 3155      6F6E7472 
 3155      6F6C6C65 
 3155      725F6661 
 3155      6E447269 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 87


 3156              	.LASF70:
 3157 01c3 74616368 		.ascii	"tachOutDMA_dmaHandle\000"
 3157      4F757444 
 3157      4D415F64 
 3157      6D614861 
 3157      6E646C65 
 3158              	.LASF8:
 3159 01d8 756E7369 		.ascii	"unsigned int\000"
 3159      676E6564 
 3159      20696E74 
 3159      00
 3160              	.LASF5:
 3161 01e5 6C6F6E67 		.ascii	"long unsigned int\000"
 3161      20756E73 
 3161      69676E65 
 3161      6420696E 
 3161      7400
 3162              	.LASF42:
 3163 01f7 46616E43 		.ascii	"FanController_DisableAlert\000"
 3163      6F6E7472 
 3163      6F6C6C65 
 3163      725F4469 
 3163      7361626C 
 3164              	.LASF3:
 3165 0212 73686F72 		.ascii	"short unsigned int\000"
 3165      7420756E 
 3165      7369676E 
 3165      65642069 
 3165      6E7400
 3166              	.LASF25:
 3167 0225 64757479 		.ascii	"dutyB\000"
 3167      4200
 3168              	.LASF19:
 3169 022b 73657441 		.ascii	"setActualPeriodTD\000"
 3169      63747561 
 3169      6C506572 
 3169      696F6454 
 3169      4400
 3170              	.LASF52:
 3171 023d 46616E43 		.ascii	"FanController_SetDutyCycle\000"
 3171      6F6E7472 
 3171      6F6C6C65 
 3171      725F5365 
 3171      74447574 
 3172              	.LASF51:
 3173 0258 7374616C 		.ascii	"stallStatus\000"
 3173      6C537461 
 3173      74757300 
 3174              	.LASF37:
 3175 0264 636F756E 		.ascii	"counti\000"
 3175      746900
 3176              	.LASF66:
 3177 026b 62757273 		.ascii	"burstCount\000"
 3177      74436F75 
 3177      6E7400
 3178              	.LASF53:
 3179 0276 66616E4F 		.ascii	"fanOrBankNumber\000"
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 88


 3179      7242616E 
 3179      6B4E756D 
 3179      62657200 
 3180              	.LASF22:
 3181 0286 72706D41 		.ascii	"rpmA\000"
 3181      00
 3182              	.LASF23:
 3183 028b 72706D42 		.ascii	"rpmB\000"
 3183      00
 3184              	.LASF68:
 3185 0290 75707065 		.ascii	"upperSrcAddress\000"
 3185      72537263 
 3185      41646472 
 3185      65737300 
 3186              	.LASF75:
 3187 02a0 46616E43 		.ascii	"FanController_fanDriverRegs\000"
 3187      6F6E7472 
 3187      6F6C6C65 
 3187      725F6661 
 3187      6E447269 
 3188              	.LASF28:
 3189 02bc 696E6974 		.ascii	"initDuty\000"
 3189      44757479 
 3189      00
 3190              	.LASF24:
 3191 02c5 64757479 		.ascii	"dutyA\000"
 3191      4100
 3192              	.LASF17:
 3193 02cb 73697A65 		.ascii	"sizetype\000"
 3193      74797065 
 3193      00
 3194              	.LASF33:
 3195 02d4 70776D41 		.ascii	"pwmAuxControlReg\000"
 3195      7578436F 
 3195      6E74726F 
 3195      6C526567 
 3195      00
 3196              	.LASF34:
 3197 02e5 46616E43 		.ascii	"FanController_fanPwmInitRegsStruct\000"
 3197      6F6E7472 
 3197      6F6C6C65 
 3197      725F6661 
 3197      6E50776D 
 3198              	.LASF21:
 3199 0308 46616E43 		.ascii	"FanController_fanControlStruct\000"
 3199      6F6E7472 
 3199      6F6C6C65 
 3199      725F6661 
 3199      6E436F6E 
 3200              	.LASF82:
 3201 0327 46616E43 		.ascii	"FanController_TachOutDMA_DmaRelease\000"
 3201      6F6E7472 
 3201      6F6C6C65 
 3201      725F5461 
 3201      63684F75 
 3202              	.LASF36:
 3203 034b 46616E43 		.ascii	"FanController_Stop\000"
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 89


 3203      6F6E7472 
 3203      6F6C6C65 
 3203      725F5374 
 3203      6F7000
 3204              	.LASF47:
 3205 035e 46616E43 		.ascii	"FanController_GetAlertMode\000"
 3205      6F6E7472 
 3205      6F6C6C65 
 3205      725F4765 
 3205      74416C65 
 3206              	.LASF64:
 3207 0379 66616E4E 		.ascii	"fanNum\000"
 3207      756D00
 3208              	.LASF29:
 3209 0380 46616E43 		.ascii	"FanController_fanPropertiesStruct\000"
 3209      6F6E7472 
 3209      6F6C6C65 
 3209      725F6661 
 3209      6E50726F 
 3210              	.LASF73:
 3211 03a2 46616E43 		.ascii	"FanController_initVar\000"
 3211      6F6E7472 
 3211      6F6C6C65 
 3211      725F696E 
 3211      69745661 
 3212              	.LASF12:
 3213 03b8 666C6F61 		.ascii	"float\000"
 3213      7400
 3214              	.LASF48:
 3215 03be 46616E43 		.ascii	"FanController_GetAlertSource\000"
 3215      6F6E7472 
 3215      6F6C6C65 
 3215      725F4765 
 3215      74416C65 
 3216              	.LASF81:
 3217 03db 46616E43 		.ascii	"FanController_TachOutDMA_DmaInitialize\000"
 3217      6F6E7472 
 3217      6F6C6C65 
 3217      725F5461 
 3217      63684F75 
 3218              	.LASF77:
 3219 0402 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 3219      4320342E 
 3219      372E3320 
 3219      32303133 
 3219      30333132 
 3220 0435 616E6368 		.ascii	"anch revision 196615]\000"
 3220      20726576 
 3220      6973696F 
 3220      6E203139 
 3220      36363135 
 3221              	.LASF15:
 3222 044b 72656738 		.ascii	"reg8\000"
 3222      00
 3223              	.LASF1:
 3224 0450 756E7369 		.ascii	"unsigned char\000"
 3224      676E6564 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 90


 3224      20636861 
 3224      7200
 3225              	.LASF2:
 3226 045e 73686F72 		.ascii	"short int\000"
 3226      7420696E 
 3226      7400
 3227              	.LASF50:
 3228 0468 46616E43 		.ascii	"FanController_GetFanStallStatus\000"
 3228      6F6E7472 
 3228      6F6C6C65 
 3228      725F4765 
 3228      7446616E 
 3229              	.LASF71:
 3230 0488 46616E43 		.ascii	"FanController_TachOutDMA_channel\000"
 3230      6F6E7472 
 3230      6F6C6C65 
 3230      725F5461 
 3230      63684F75 
 3231              	.LASF46:
 3232 04a9 616C6572 		.ascii	"alertMask\000"
 3232      744D6173 
 3232      6B00
 3233              	.LASF14:
 3234 04b3 63686172 		.ascii	"char\000"
 3234      00
 3235              	.LASF57:
 3236 04b8 64757943 		.ascii	"duyCycle\000"
 3236      79636C65 
 3236      00
 3237              	.LASF80:
 3238 04c1 46616E43 		.ascii	"FanController_SetupDMA\000"
 3238      6F6E7472 
 3238      6F6C6C65 
 3238      725F5365 
 3238      74757044 
 3239              	.LASF67:
 3240 04d8 72657175 		.ascii	"requestPerBurst\000"
 3240      65737450 
 3240      65724275 
 3240      72737400 
 3241              	.LASF76:
 3242 04e8 46616E43 		.ascii	"FanController_fanProperties\000"
 3242      6F6E7472 
 3242      6F6C6C65 
 3242      725F6661 
 3242      6E50726F 
 3243              	.LASF78:
 3244 0504 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\FanController.c\000"
 3244      6E657261 
 3244      7465645F 
 3244      536F7572 
 3244      63655C50 
 3245              	.LASF44:
 3246 052d 46616E43 		.ascii	"FanController_SetAlertMask\000"
 3246      6F6E7472 
 3246      6F6C6C65 
 3246      725F5365 
ARM GAS  D:\Users\BertoTech\TEMP\ccZQ2lNI.s 			page 91


 3246      74416C65 
 3247              	.LASF79:
 3248 0548 443A5C55 		.ascii	"D:\\Users\\BertoTech\\Documents\\PID\\FW_Fan_Contro"
 3248      73657273 
 3248      5C426572 
 3248      746F5465 
 3248      63685C44 
 3249 0576 6C30312E 		.ascii	"l01.cydsn\000"
 3249      63796473 
 3249      6E00
 3250              	.LASF63:
 3251 0580 61637475 		.ascii	"actualSpeed\000"
 3251      616C5370 
 3251      65656400 
 3252              	.LASF56:
 3253 058c 46616E43 		.ascii	"FanController_GetDutyCycle\000"
 3253      6F6E7472 
 3253      6F6C6C65 
 3253      725F4765 
 3253      74447574 
 3254              	.LASF74:
 3255 05a7 46616E43 		.ascii	"FanController_fanControl\000"
 3255      6F6E7472 
 3255      6F6C6C65 
 3255      725F6661 
 3255      6E436F6E 
 3256              	.LASF65:
 3257 05c0 46616E43 		.ascii	"FanController_fanOutTds\000"
 3257      6F6E7472 
 3257      6F6C6C65 
 3257      725F6661 
 3257      6E4F7574 
 3258              	.LASF26:
 3259 05d8 64757479 		.ascii	"dutyRpmSlope\000"
 3259      52706D53 
 3259      6C6F7065 
 3259      00
 3260              	.LASF18:
 3261 05e5 46616E43 		.ascii	"FanController_fanTdOutStruct\000"
 3261      6F6E7472 
 3261      6F6C6C65 
 3261      725F6661 
 3261      6E54644F 
 3262              	.LASF39:
 3263 0602 46616E43 		.ascii	"FanController_Init\000"
 3263      6F6E7472 
 3263      6F6C6C65 
 3263      725F496E 
 3263      697400
 3264              	.LASF58:
 3265 0615 46616E43 		.ascii	"FanController_SetDesiredSpeed\000"
 3265      6F6E7472 
 3265      6F6C6C65 
 3265      725F5365 
 3265      74446573 
 3266              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
