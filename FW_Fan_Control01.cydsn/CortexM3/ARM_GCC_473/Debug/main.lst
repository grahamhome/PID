ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global _printf_float
  19              		.thumb
  20              		.section	.text.start_echo_IRR_Interrupt,"ax",%progbits
  21              		.align	2
  22              		.global	start_echo_IRR_Interrupt
  23              		.thumb
  24              		.thumb_func
  25              		.type	start_echo_IRR_Interrupt, %function
  26              	start_echo_IRR_Interrupt:
  27              	.LFB56:
  28              		.file 1 ".\\main.c"
   1:.\main.c      **** /*********************************************************************************
   2:.\main.c      **** * Project Name:      PID Control Algorithm - Performance Engineering
   3:.\main.c      **** * Version:           1.0
   4:.\main.c      **** *
   5:.\main.c      **** * Device Used:       PSoC 5 CY8C5588AXI-060ES1
   6:.\main.c      **** * Software Used:     PSoC Creator v3.
   7:.\main.c      **** * Authors:           Graham Home
   8:.\main.c      ****                      Alberto Santos-Castro
   9:.\main.c      **** *********************************************************************************
  10:.\main.c      **** * Theory of Operation:
  11:.\main.c      **** *
  12:.\main.c      **** *  The height of a ping pong ball is controlled by a Fan using a PID algorithm
  13:.\main.c      **** *  The height measurement is obtained by an ultrasonic sensor
  14:.\main.c      **** *  THe control signal of the PID algorithm is used as the input (Duty Cycle) to the
  15:.\main.c      **** *  Fan Controller
  16:.\main.c      **** *  The firmware synchornizes to hardware using the end-of-cycle (eoc) pulse
  17:.\main.c      **** *  1 Fans is supported (individual PWMs - no banks)
  18:.\main.c      **** 
  19:.\main.c      **** *  1st line of LCD displays Desired Speed and Actual Speed and PWM Duty Cycle of Fan 1
  20:.\main.c      **** *  2nd line of LCD displays Actual Speed and PWM Duty Cycle of Fan 2
  21:.\main.c      **** *  SW1 decreases desired speed in RPM
  22:.\main.c      **** *  SW2 increases desired speed in RPM
  23:.\main.c      **** *
  24:.\main.c      **** *******************************************************************************/
  25:.\main.c      **** 
  26:.\main.c      **** #define LCD_SETPOINT    (LCD_Position(0u,  0u))
  27:.\main.c      **** #define LCD_ECHO        (LCD_Position(0u,  6u))
  28:.\main.c      **** #define LCD_DELTA       (LCD_Position(0u, 12u))
  29:.\main.c      **** #define LCD_CTRL_SIG    (LCD_Position(1u,  0u))
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 2


  30:.\main.c      **** #define LCD_DUTY        (LCD_Position(1u,  6u))
  31:.\main.c      **** 
  32:.\main.c      **** #include <device.h>
  33:.\main.c      **** #include <stdio.h>
  34:.\main.c      **** 
  35:.\main.c      **** #if defined (__GNUC__)
  36:.\main.c      ****     /* Add an explicit reference to the floating point printf library */
  37:.\main.c      ****     /* to allow the usage of floating point conversion specifiers. */
  38:.\main.c      ****     /* This is not linked in by default with the newlib-nano library. */
  39:.\main.c      ****     asm (".global _printf_float");
  40:.\main.c      **** #endif
  41:.\main.c      **** 
  42:.\main.c      **** 
  43:.\main.c      **** /* PWM duty cycle controls - units are hundredths of a percent */
  44:.\main.c      **** #define MIN_DUTY            (50u)
  45:.\main.c      **** #define MAX_DUTY            (9950u)
  46:.\main.c      **** #define DUTY_STEP_COARSE    (100u)
  47:.\main.c      **** #define DUTY_STEP_FINE      (2u)
  48:.\main.c      **** 
  49:.\main.c      **** /* Speed controls - units are RPM */
  50:.\main.c      **** #define MIN_RPM             (2500u)
  51:.\main.c      **** #define MAX_RPM             (9500u)
  52:.\main.c      **** #define INIT_RPM            (4500u)
  53:.\main.c      **** #define RPM_STEP            (500u)
  54:.\main.c      **** #define RPM_DELTA_LARGE     (500u)
  55:.\main.c      **** #define RPM_TOLERANCE       (100u)
  56:.\main.c      **** 
  57:.\main.c      **** #define FAN                 (1u)
  58:.\main.c      **** 
  59:.\main.c      **** // Echo averaging factor - determined to give high accuracy and low latency of distance mesaurement
  60:.\main.c      **** #define FACTOR              (8u)
  61:.\main.c      **** 
  62:.\main.c      **** #include <device.h>
  63:.\main.c      **** #include <end_echo_IRR.h>
  64:.\main.c      **** #include <Echo_Timer.h>
  65:.\main.c      **** #include <start_echo_IRR.h>
  66:.\main.c      **** #include <stdio.h>
  67:.\main.c      **** #include <time.h>
  68:.\main.c      **** 
  69:.\main.c      **** CY_ISR(start_echo_IRR_Interrupt)
  70:.\main.c      **** {
  29              		.loc 1 70 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  71:.\main.c      ****     start_echo_IRR_ClearPending(); 
  41              		.loc 1 71 0
  42 0004 FFF7FEFF 		bl	start_echo_IRR_ClearPending
  72:.\main.c      ****     
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 3


  73:.\main.c      ****     Echo_Timer_Stop();
  43              		.loc 1 73 0
  44 0008 FFF7FEFF 		bl	Echo_Timer_Stop
  74:.\main.c      ****     Echo_Timer_Init();
  45              		.loc 1 74 0
  46 000c FFF7FEFF 		bl	Echo_Timer_Init
  75:.\main.c      ****     Echo_Timer_Start();
  47              		.loc 1 75 0
  48 0010 FFF7FEFF 		bl	Echo_Timer_Start
  76:.\main.c      **** }
  49              		.loc 1 76 0
  50 0014 80BD     		pop	{r7, pc}
  51              		.cfi_endproc
  52              	.LFE56:
  53              		.size	start_echo_IRR_Interrupt, .-start_echo_IRR_Interrupt
  54              		.global	echoes
  55 0016 00BF     		.bss
  56              		.align	2
  57              		.type	echoes, %object
  58              		.size	echoes, 32
  59              	echoes:
  60 0000 00000000 		.space	32
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.global	position
  62              		.type	position, %object
  63              		.size	position, 1
  64              	position:
  65 0020 00       		.space	1
  66              		.global	echo
  67 0021 00       		.align	1
  68              		.type	echo, %object
  69              		.size	echo, 2
  70              	echo:
  71 0022 0000     		.space	2
  72              		.section	.text.end_echo_IRR_Interrupt,"ax",%progbits
  73              		.align	2
  74              		.global	end_echo_IRR_Interrupt
  75              		.thumb
  76              		.thumb_func
  77              		.type	end_echo_IRR_Interrupt, %function
  78              	end_echo_IRR_Interrupt:
  79              	.LFB57:
  77:.\main.c      **** 
  78:.\main.c      **** uint32  echoes[FACTOR] = {0}; // The most recent echo values
  79:.\main.c      **** uint8   position = 0; // The current index in the 'echoes' list
  80:.\main.c      **** uint16  echo = 0;
  81:.\main.c      **** 
  82:.\main.c      **** CY_ISR(end_echo_IRR_Interrupt)
  83:.\main.c      **** {
  80              		.loc 1 83 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 4


  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 00AF     		add	r7, sp, #0
  90              	.LCFI3:
  91              		.cfi_def_cfa_register 7
  84:.\main.c      **** 
  85:.\main.c      ****     end_echo_IRR_ClearPending();    
  92              		.loc 1 85 0
  93 0004 FFF7FEFF 		bl	end_echo_IRR_ClearPending
  86:.\main.c      ****     echo = Echo_Timer_ReadCounter();
  94              		.loc 1 86 0
  95 0008 FFF7FEFF 		bl	Echo_Timer_ReadCounter
  96 000c 0346     		mov	r3, r0
  97 000e 1A46     		mov	r2, r3
  98 0010 40F20003 		movw	r3, #:lower16:echo
  99 0014 C0F20003 		movt	r3, #:upper16:echo
 100 0018 1A80     		strh	r2, [r3, #0]	@ movhi
  87:.\main.c      ****     //echoes[position++] = Echo_Timer_ReadCounter();
  88:.\main.c      ****     //position %= FACTOR;
  89:.\main.c      ****     Echo_Timer_Stop();
 101              		.loc 1 89 0
 102 001a FFF7FEFF 		bl	Echo_Timer_Stop
  90:.\main.c      **** }
 103              		.loc 1 90 0
 104 001e 80BD     		pop	{r7, pc}
 105              		.cfi_endproc
 106              	.LFE57:
 107              		.size	end_echo_IRR_Interrupt, .-end_echo_IRR_Interrupt
 108              		.global	kP
 109              		.data
 110              		.align	1
 111              		.type	kP, %object
 112              		.size	kP, 2
 113              	kP:
 114 0000 6400     		.short	100
 115              		.global	kI
 116              		.bss
 117              		.align	1
 118              		.type	kI, %object
 119              		.size	kI, 2
 120              	kI:
 121 0024 0000     		.space	2
 122              		.global	kD
 123              		.align	1
 124              		.type	kD, %object
 125              		.size	kD, 2
 126              	kD:
 127 0026 0000     		.space	2
 128              		.global	__aeabi_ui2f
 129              		.global	__aeabi_fdiv
 130              		.global	__aeabi_fsub
 131              		.global	__aeabi_fmul
 132              		.global	__aeabi_fadd
 133              		.global	__aeabi_f2uiz
 134              		.section	.text.main,"ax",%progbits
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 5


 135              		.align	2
 136              		.global	main
 137              		.thumb
 138              		.thumb_func
 139              		.type	main, %function
 140              	main:
 141              	.LFB58:
  91:.\main.c      **** 
  92:.\main.c      **** /* Returns the average of the most recent echo values */
  93:.\main.c      **** /*
  94:.\main.c      **** uint16 getEcho() {
  95:.\main.c      ****     uint32 sum = 0;
  96:.\main.c      ****     int i;
  97:.\main.c      ****     for (i=0; i<FACTOR; i++) {
  98:.\main.c      ****         sum += echoes[i];
  99:.\main.c      ****     }
 100:.\main.c      ****     return (sum/FACTOR)>>12; // Reduce the result to the significant digits only
 101:.\main.c      **** }
 102:.\main.c      **** */
 103:.\main.c      **** // Constants for proportinal, integral and derivative terms
 104:.\main.c      **** uint16 kP = 100;
 105:.\main.c      **** uint16 kI = 0;
 106:.\main.c      **** uint16 kD = 0;
 107:.\main.c      ****     
 108:.\main.c      **** 
 109:.\main.c      **** int main()
 110:.\main.c      **** {
 142              		.loc 1 110 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 24
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 B0B5     		push	{r4, r5, r7, lr}
 147              	.LCFI4:
 148              		.cfi_def_cfa_offset 16
 149              		.cfi_offset 4, -16
 150              		.cfi_offset 5, -12
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 86B0     		sub	sp, sp, #24
 154              	.LCFI5:
 155              		.cfi_def_cfa_offset 40
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI6:
 158              		.cfi_def_cfa_register 7
 111:.\main.c      ****     
 112:.\main.c      ****     /* Enable the global interrupt */
 113:.\main.c      ****     CyGlobalIntEnable;
 159              		.loc 1 113 0
 160              	@ 113 ".\main.c" 1
 161 0006 62B6     		CPSIE   i
 162              	@ 0 "" 2
 114:.\main.c      ****     
 115:.\main.c      ****     /* 1 - Enable the Interrupt component connected to Timer interrupt */
 116:.\main.c      ****     /* 2 - Start the components */
 117:.\main.c      **** 
 118:.\main.c      ****     Trigger_Timer_Start();
 163              		.loc 1 118 0
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 6


 164              		.thumb
 165 0008 FFF7FEFF 		bl	Trigger_Timer_Start
 119:.\main.c      ****     
 120:.\main.c      ****     start_echo_IRR_StartEx(start_echo_IRR_Interrupt);
 166              		.loc 1 120 0
 167 000c 40F20000 		movw	r0, #:lower16:start_echo_IRR_Interrupt
 168 0010 C0F20000 		movt	r0, #:upper16:start_echo_IRR_Interrupt
 169 0014 FFF7FEFF 		bl	start_echo_IRR_StartEx
 121:.\main.c      ****     start_echo_IRR_Start();
 170              		.loc 1 121 0
 171 0018 FFF7FEFF 		bl	start_echo_IRR_Start
 122:.\main.c      ****     
 123:.\main.c      ****     end_echo_IRR_StartEx(end_echo_IRR_Interrupt);
 172              		.loc 1 123 0
 173 001c 40F20000 		movw	r0, #:lower16:end_echo_IRR_Interrupt
 174 0020 C0F20000 		movt	r0, #:upper16:end_echo_IRR_Interrupt
 175 0024 FFF7FEFF 		bl	end_echo_IRR_StartEx
 124:.\main.c      ****     end_echo_IRR_Start();
 176              		.loc 1 124 0
 177 0028 FFF7FEFF 		bl	end_echo_IRR_Start
 125:.\main.c      ****     
 126:.\main.c      ****     /* Start LCD */
 127:.\main.c      ****     LCD_Start();
 178              		.loc 1 127 0
 179 002c FFF7FEFF 		bl	LCD_Start
 128:.\main.c      ****     
 129:.\main.c      ****     uint16  desiredSpeed = INIT_RPM;
 180              		.loc 1 129 0
 181 0030 41F29413 		movw	r3, #4500
 182 0034 3B82     		strh	r3, [r7, #16]	@ movhi
 130:.\main.c      ****     uint16 dutyCycle = MIN_DUTY;
 183              		.loc 1 130 0
 184 0036 4FF03203 		mov	r3, #50
 185 003a FB81     		strh	r3, [r7, #14]	@ movhi
 131:.\main.c      ****     
 132:.\main.c      ****     
 133:.\main.c      ****     /* Globally Enable Interrupts to the CPU Core */
 134:.\main.c      ****     CyGlobalIntEnable;
 186              		.loc 1 134 0
 187              	@ 134 ".\main.c" 1
 188 003c 62B6     		CPSIE   i
 189              	@ 0 "" 2
 135:.\main.c      ****     FanController_Start();
 190              		.loc 1 135 0
 191              		.thumb
 192 003e FFF7FEFF 		bl	FanController_Start
 136:.\main.c      ****     FanController_SetDesiredSpeed(FAN, desiredSpeed);
 193              		.loc 1 136 0
 194 0042 3B8A     		ldrh	r3, [r7, #16]
 195 0044 4FF00100 		mov	r0, #1
 196 0048 1946     		mov	r1, r3
 197 004a FFF7FEFF 		bl	FanController_SetDesiredSpeed
 137:.\main.c      ****     
 138:.\main.c      ****     ADC_DelSig_1_Start();
 198              		.loc 1 138 0
 199 004e FFF7FEFF 		bl	ADC_DelSig_1_Start
 139:.\main.c      **** 
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 7


 140:.\main.c      ****     /* Start the ADC conversion */
 141:.\main.c      ****     ADC_DelSig_1_StartConvert();
 200              		.loc 1 141 0
 201 0052 FFF7FEFF 		bl	ADC_DelSig_1_StartConvert
 142:.\main.c      ****     
 143:.\main.c      ****     // Wait for the ball to reach the bottom of the tube, and store the distance measured by the se
 144:.\main.c      ****     CyDelay(4000);
 202              		.loc 1 144 0
 203 0056 4FF47A60 		mov	r0, #4000
 204 005a FFF7FEFF 		bl	CyDelay
 145:.\main.c      ****     uint16 min_echo = echo; //getEcho();
 205              		.loc 1 145 0
 206 005e 40F20003 		movw	r3, #:lower16:echo
 207 0062 C0F20003 		movt	r3, #:upper16:echo
 208 0066 1B88     		ldrh	r3, [r3, #0]	@ movhi
 209 0068 BB81     		strh	r3, [r7, #12]	@ movhi
 146:.\main.c      ****     LCD_Position(0u, 0u);
 210              		.loc 1 146 0
 211 006a 4FF00000 		mov	r0, #0
 212 006e 4FF00001 		mov	r1, #0
 213 0072 FFF7FEFF 		bl	LCD_Position
 147:.\main.c      ****     LCD_PrintInt16(min_echo);
 214              		.loc 1 147 0
 215 0076 BB89     		ldrh	r3, [r7, #12]
 216 0078 1846     		mov	r0, r3
 217 007a FFF7FEFF 		bl	LCD_PrintInt16
 148:.\main.c      ****     
 149:.\main.c      ****     // Figure out min. duty cycle by increasing fan speed from 0 until the ball begins to move
 150:.\main.c      ****     // Start low for the min. and capture the value at which the ball starts to move.
 151:.\main.c      ****     uint16 minDuty = 4608u; // Determined in testing to be low enough to not quite move the ball
 218              		.loc 1 151 0
 219 007e 4FF49053 		mov	r3, #4608
 220 0082 FB82     		strh	r3, [r7, #22]	@ movhi
 152:.\main.c      ****     FanController_SetDesiredSpeed(FAN, MAX_RPM);
 221              		.loc 1 152 0
 222 0084 4FF00100 		mov	r0, #1
 223 0088 42F21C51 		movw	r1, #9500
 224 008c FFF7FEFF 		bl	FanController_SetDesiredSpeed
 153:.\main.c      ****     // Set the fan to min (not spinning)
 154:.\main.c      ****     FanController_SetDutyCycle(FAN, minDuty);
 225              		.loc 1 154 0
 226 0090 FB8A     		ldrh	r3, [r7, #22]
 227 0092 4FF00100 		mov	r0, #1
 228 0096 1946     		mov	r1, r3
 229 0098 FFF7FEFF 		bl	FanController_SetDutyCycle
 230 009c 00E0     		b	.L7
 231              	.L16:
 155:.\main.c      ****     
 156:.\main.c      ****     // Detect the minimum duty cycle needed to move the ball with this fan.
 157:.\main.c      ****     while (1u) {
 158:.\main.c      ****         
 159:.\main.c      ****         /* Synchronize firmware to end-of-cycle pulse from FanController */
 160:.\main.c      ****         if(EOC_SR_Read())
 161:.\main.c      ****         {
 162:.\main.c      ****             
 163:.\main.c      ****             // Increase fan speed
 164:.\main.c      ****             minDuty += DUTY_STEP_COARSE;
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 8


 165:.\main.c      ****             FanController_SetDutyCycle(FAN, minDuty);
 166:.\main.c      ****             CyDelay(1000u);
 167:.\main.c      ****             //uint16 echo = getEcho();
 168:.\main.c      ****         
 169:.\main.c      ****             // Check if min duty should be set (ball has moved)
 170:.\main.c      ****             if (echo>(min_echo+2)){
 171:.\main.c      ****                 break;
 172:.\main.c      ****             }
 173:.\main.c      ****             
 174:.\main.c      ****             /* Display duty */
 175:.\main.c      ****             LCD_Position(0u, 12u);
 176:.\main.c      ****             LCD_PrintInt16(minDuty);
 177:.\main.c      ****             
 178:.\main.c      ****     		CyDelay(100u);
 179:.\main.c      ****          }
 180:.\main.c      ****     }
 232              		.loc 1 180 0
 233 009e 00BF     		nop
 234              	.L7:
 160:.\main.c      ****         if(EOC_SR_Read())
 235              		.loc 1 160 0
 236 00a0 FFF7FEFF 		bl	EOC_SR_Read
 237 00a4 0346     		mov	r3, r0
 238 00a6 002B     		cmp	r3, #0
 239 00a8 F9D0     		beq	.L16
 164:.\main.c      ****             minDuty += DUTY_STEP_COARSE;
 240              		.loc 1 164 0
 241 00aa FB8A     		ldrh	r3, [r7, #22]	@ movhi
 242 00ac 03F16403 		add	r3, r3, #100
 243 00b0 FB82     		strh	r3, [r7, #22]	@ movhi
 165:.\main.c      ****             FanController_SetDutyCycle(FAN, minDuty);
 244              		.loc 1 165 0
 245 00b2 FB8A     		ldrh	r3, [r7, #22]
 246 00b4 4FF00100 		mov	r0, #1
 247 00b8 1946     		mov	r1, r3
 248 00ba FFF7FEFF 		bl	FanController_SetDutyCycle
 166:.\main.c      ****             CyDelay(1000u);
 249              		.loc 1 166 0
 250 00be 4FF47A70 		mov	r0, #1000
 251 00c2 FFF7FEFF 		bl	CyDelay
 170:.\main.c      ****             if (echo>(min_echo+2)){
 252              		.loc 1 170 0
 253 00c6 40F20003 		movw	r3, #:lower16:echo
 254 00ca C0F20003 		movt	r3, #:upper16:echo
 255 00ce 1B88     		ldrh	r3, [r3, #0]
 256 00d0 1A46     		mov	r2, r3
 257 00d2 BB89     		ldrh	r3, [r7, #12]
 258 00d4 03F10203 		add	r3, r3, #2
 259 00d8 9A42     		cmp	r2, r3
 260 00da 0EDC     		bgt	.L17
 261              	.L5:
 175:.\main.c      ****             LCD_Position(0u, 12u);
 262              		.loc 1 175 0
 263 00dc 4FF00000 		mov	r0, #0
 264 00e0 4FF00C01 		mov	r1, #12
 265 00e4 FFF7FEFF 		bl	LCD_Position
 176:.\main.c      ****             LCD_PrintInt16(minDuty);
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 9


 266              		.loc 1 176 0
 267 00e8 FB8A     		ldrh	r3, [r7, #22]
 268 00ea 1846     		mov	r0, r3
 269 00ec FFF7FEFF 		bl	LCD_PrintInt16
 178:.\main.c      ****     		CyDelay(100u);
 270              		.loc 1 178 0
 271 00f0 4FF06400 		mov	r0, #100
 272 00f4 FFF7FEFF 		bl	CyDelay
 273              		.loc 1 180 0
 274 00f8 D1E7     		b	.L16
 275              	.L17:
 171:.\main.c      ****                 break;
 276              		.loc 1 171 0
 277 00fa 00BF     		nop
 278              	.L15:
 181:.\main.c      ****     // The duty cycle at which the ball will neither rise nor fall.
 182:.\main.c      ****     // This duty cycle will be used when the control signal is 0.
 183:.\main.c      ****     uint16 zero_point = minDuty - DUTY_STEP_COARSE;
 279              		.loc 1 183 0
 280 00fc FB8A     		ldrh	r3, [r7, #22]	@ movhi
 281 00fe A3F16403 		sub	r3, r3, #100
 282 0102 7B81     		strh	r3, [r7, #10]	@ movhi
 184:.\main.c      ****     // The duty cycle at which the ball will fall as slowly as possible.
 185:.\main.c      ****     // This duty cycle will be used whenever the control signal is negative
 186:.\main.c      ****     uint16 negative_point = MIN_DUTY;
 283              		.loc 1 186 0
 284 0104 4FF03203 		mov	r3, #50
 285 0108 3B81     		strh	r3, [r7, #8]	@ movhi
 187:.\main.c      ****     
 188:.\main.c      ****     
 189:.\main.c      ****     //Let the ball move upwards until the maximum echo (minimum distance) reading is found, then st
 190:.\main.c      ****     uint16 max_echo = min_echo;
 286              		.loc 1 190 0
 287 010a BB89     		ldrh	r3, [r7, #12]	@ movhi
 288 010c BB82     		strh	r3, [r7, #20]	@ movhi
 191:.\main.c      ****     uint16 no_change_counter = 0;
 289              		.loc 1 191 0
 290 010e 4FF00003 		mov	r3, #0
 291 0112 7B82     		strh	r3, [r7, #18]	@ movhi
 292 0114 00E0     		b	.L11
 293              	.L18:
 192:.\main.c      ****     while(1u) {
 193:.\main.c      ****         CyDelay(500u);
 194:.\main.c      ****         //uint16 echo = getEcho();
 195:.\main.c      ****         if (echo > max_echo) {
 196:.\main.c      ****             max_echo = echo;
 197:.\main.c      ****             no_change_counter = 0;
 198:.\main.c      ****         } else {
 199:.\main.c      ****             if (++no_change_counter > 10) {
 200:.\main.c      ****                 break;
 201:.\main.c      ****             }
 202:.\main.c      ****         }
 203:.\main.c      ****     }
 294              		.loc 1 203 0
 295 0116 00BF     		nop
 296              	.L11:
 193:.\main.c      ****         CyDelay(500u);
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 10


 297              		.loc 1 193 0
 298 0118 4FF4FA70 		mov	r0, #500
 299 011c FFF7FEFF 		bl	CyDelay
 195:.\main.c      ****         if (echo > max_echo) {
 300              		.loc 1 195 0
 301 0120 40F20003 		movw	r3, #:lower16:echo
 302 0124 C0F20003 		movt	r3, #:upper16:echo
 303 0128 1B88     		ldrh	r3, [r3, #0]
 304 012a BA8A     		ldrh	r2, [r7, #20]
 305 012c 9A42     		cmp	r2, r3
 306 012e 09D2     		bcs	.L8
 196:.\main.c      ****             max_echo = echo;
 307              		.loc 1 196 0
 308 0130 40F20003 		movw	r3, #:lower16:echo
 309 0134 C0F20003 		movt	r3, #:upper16:echo
 310 0138 1B88     		ldrh	r3, [r3, #0]	@ movhi
 311 013a BB82     		strh	r3, [r7, #20]	@ movhi
 197:.\main.c      ****             no_change_counter = 0;
 312              		.loc 1 197 0
 313 013c 4FF00003 		mov	r3, #0
 314 0140 7B82     		strh	r3, [r7, #18]	@ movhi
 315              		.loc 1 203 0
 316 0142 E8E7     		b	.L18
 317              	.L8:
 199:.\main.c      ****             if (++no_change_counter > 10) {
 318              		.loc 1 199 0
 319 0144 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 320 0146 03F10103 		add	r3, r3, #1
 321 014a 7B82     		strh	r3, [r7, #18]	@ movhi
 322 014c 7B8A     		ldrh	r3, [r7, #18]
 323 014e 0A2B     		cmp	r3, #10
 324 0150 E1D9     		bls	.L18
 200:.\main.c      ****                 break;
 325              		.loc 1 200 0
 326 0152 00BF     		nop
 204:.\main.c      ****     
 205:.\main.c      ****     LCD_Position(0u, 6u);
 327              		.loc 1 205 0
 328 0154 4FF00000 		mov	r0, #0
 329 0158 4FF00601 		mov	r1, #6
 330 015c FFF7FEFF 		bl	LCD_Position
 206:.\main.c      ****     LCD_PrintInt16(max_echo);
 331              		.loc 1 206 0
 332 0160 BB8A     		ldrh	r3, [r7, #20]
 333 0162 1846     		mov	r0, r3
 334 0164 FFF7FEFF 		bl	LCD_PrintInt16
 207:.\main.c      ****     
 208:.\main.c      ****     FanController_SetDutyCycle(FAN, MIN_DUTY);
 335              		.loc 1 208 0
 336 0168 4FF00100 		mov	r0, #1
 337 016c 4FF03201 		mov	r1, #50
 338 0170 FFF7FEFF 		bl	FanController_SetDutyCycle
 209:.\main.c      ****     CyDelay(4000u);
 339              		.loc 1 209 0
 340 0174 4FF47A60 		mov	r0, #4000
 341 0178 FFF7FEFF 		bl	CyDelay
 342 017c 00E0     		b	.L14
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 11


 343              	.L19:
 210:.\main.c      ****     
 211:.\main.c      ****     
 212:.\main.c      ****     while(1u) {
 213:.\main.c      ****         
 214:.\main.c      ****         /* Update fan speed */
 215:.\main.c      ****         
 216:.\main.c      ****         /* Synchronize firmware to end-of-cycle pulse from FanController */
 217:.\main.c      ****         if(EOC_SR_Read())
 218:.\main.c      ****         {
 219:.\main.c      ****             
 220:.\main.c      ****              // Check for potentiometer reading to change speed
 221:.\main.c      ****             if(ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_RETURN_STATUS))
 222:.\main.c      ****             {
 223:.\main.c      ****                 uint16 output = ADC_DelSig_1_GetResult16() + 1; // Add one to overflow int at minim
 224:.\main.c      ****                 //uint16 duty = (uint16) (((float) output)/(float)256 * (((float)MAX_DUTY) - ((floa
 225:.\main.c      ****                 uint16 setPoint = (uint16)((((float) output)/(float)256 * (((float)max_echo) - ((fl
 226:.\main.c      ****                 //uint16 echo = getEcho();
 227:.\main.c      ****                 int16 delta = setPoint - echo;
 228:.\main.c      ****                 int16 control = kP*delta;
 229:.\main.c      ****                 
 230:.\main.c      ****                 LCD_Position(1u, 0u);
 231:.\main.c      ****                 LCD_PrintInt16(setPoint);
 232:.\main.c      ****                 LCD_Position(1u, 6u);
 233:.\main.c      ****                 LCD_PrintInt16(delta);
 234:.\main.c      ****                 LCD_Position(1u, 12u);
 235:.\main.c      ****                 LCD_PrintInt16(control);
 236:.\main.c      ****                 if (control >= 0) {
 237:.\main.c      ****                     FanController_SetDutyCycle(FAN, control + MIN_DUTY);
 238:.\main.c      ****                 } else {
 239:.\main.c      ****                     FanController_SetDutyCycle(FAN, MIN_DUTY);
 240:.\main.c      ****                 }
 241:.\main.c      ****             }
 242:.\main.c      ****         }
 243:.\main.c      ****     }
 344              		.loc 1 243 0
 345 017e 00BF     		nop
 346              	.L14:
 217:.\main.c      ****         if(EOC_SR_Read())
 347              		.loc 1 217 0
 348 0180 FFF7FEFF 		bl	EOC_SR_Read
 349 0184 0346     		mov	r3, r0
 350 0186 002B     		cmp	r3, #0
 351 0188 F9D0     		beq	.L19
 221:.\main.c      ****             if(ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_RETURN_STATUS))
 352              		.loc 1 221 0
 353 018a 4FF00100 		mov	r0, #1
 354 018e FFF7FEFF 		bl	ADC_DelSig_1_IsEndConversion
 355 0192 0346     		mov	r3, r0
 356 0194 002B     		cmp	r3, #0
 357 0196 F2D0     		beq	.L19
 358              	.LBB2:
 223:.\main.c      ****                 uint16 output = ADC_DelSig_1_GetResult16() + 1; // Add one to overflow int at minim
 359              		.loc 1 223 0
 360 0198 FFF7FEFF 		bl	ADC_DelSig_1_GetResult16
 361 019c 0346     		mov	r3, r0
 362 019e 9BB2     		uxth	r3, r3
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 12


 363 01a0 03F10103 		add	r3, r3, #1
 364 01a4 FB80     		strh	r3, [r7, #6]	@ movhi
 225:.\main.c      ****                 uint16 setPoint = (uint16)((((float) output)/(float)256 * (((float)max_echo) - ((fl
 365              		.loc 1 225 0
 366 01a6 FB88     		ldrh	r3, [r7, #6]
 367 01a8 1846     		mov	r0, r3
 368 01aa FFF7FEFF 		bl	__aeabi_ui2f
 369 01ae 0346     		mov	r3, r0
 370 01b0 1846     		mov	r0, r3
 371 01b2 4FF08741 		mov	r1, #1132462080
 372 01b6 FFF7FEFF 		bl	__aeabi_fdiv
 373 01ba 0346     		mov	r3, r0
 374 01bc 1C46     		mov	r4, r3
 375 01be BB8A     		ldrh	r3, [r7, #20]
 376 01c0 1846     		mov	r0, r3
 377 01c2 FFF7FEFF 		bl	__aeabi_ui2f
 378 01c6 0546     		mov	r5, r0
 379 01c8 BB89     		ldrh	r3, [r7, #12]
 380 01ca 1846     		mov	r0, r3
 381 01cc FFF7FEFF 		bl	__aeabi_ui2f
 382 01d0 0346     		mov	r3, r0
 383 01d2 2846     		mov	r0, r5
 384 01d4 1946     		mov	r1, r3
 385 01d6 FFF7FEFF 		bl	__aeabi_fsub
 386 01da 0346     		mov	r3, r0
 387 01dc 2046     		mov	r0, r4
 388 01de 1946     		mov	r1, r3
 389 01e0 FFF7FEFF 		bl	__aeabi_fmul
 390 01e4 0346     		mov	r3, r0
 391 01e6 1C46     		mov	r4, r3
 392 01e8 BB89     		ldrh	r3, [r7, #12]
 393 01ea 1846     		mov	r0, r3
 394 01ec FFF7FEFF 		bl	__aeabi_ui2f
 395 01f0 0346     		mov	r3, r0
 396 01f2 2046     		mov	r0, r4
 397 01f4 1946     		mov	r1, r3
 398 01f6 FFF7FEFF 		bl	__aeabi_fadd
 399 01fa 0346     		mov	r3, r0
 400 01fc 1846     		mov	r0, r3
 401 01fe FFF7FEFF 		bl	__aeabi_f2uiz
 402 0202 0346     		mov	r3, r0
 403 0204 BB80     		strh	r3, [r7, #4]	@ movhi
 227:.\main.c      ****                 int16 delta = setPoint - echo;
 404              		.loc 1 227 0
 405 0206 40F20003 		movw	r3, #:lower16:echo
 406 020a C0F20003 		movt	r3, #:upper16:echo
 407 020e 1B88     		ldrh	r3, [r3, #0]
 408 0210 BA88     		ldrh	r2, [r7, #4]	@ movhi
 409 0212 D31A     		subs	r3, r2, r3
 410 0214 9BB2     		uxth	r3, r3
 411 0216 7B80     		strh	r3, [r7, #2]	@ movhi
 228:.\main.c      ****                 int16 control = kP*delta;
 412              		.loc 1 228 0
 413 0218 40F20003 		movw	r3, #:lower16:kP
 414 021c C0F20003 		movt	r3, #:upper16:kP
 415 0220 1B88     		ldrh	r3, [r3, #0]
 416 0222 7A88     		ldrh	r2, [r7, #2]
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 13


 417 0224 02FB03F3 		mul	r3, r2, r3
 418 0228 9BB2     		uxth	r3, r3
 419 022a 3B80     		strh	r3, [r7, #0]	@ movhi
 230:.\main.c      ****                 LCD_Position(1u, 0u);
 420              		.loc 1 230 0
 421 022c 4FF00100 		mov	r0, #1
 422 0230 4FF00001 		mov	r1, #0
 423 0234 FFF7FEFF 		bl	LCD_Position
 231:.\main.c      ****                 LCD_PrintInt16(setPoint);
 424              		.loc 1 231 0
 425 0238 BB88     		ldrh	r3, [r7, #4]
 426 023a 1846     		mov	r0, r3
 427 023c FFF7FEFF 		bl	LCD_PrintInt16
 232:.\main.c      ****                 LCD_Position(1u, 6u);
 428              		.loc 1 232 0
 429 0240 4FF00100 		mov	r0, #1
 430 0244 4FF00601 		mov	r1, #6
 431 0248 FFF7FEFF 		bl	LCD_Position
 233:.\main.c      ****                 LCD_PrintInt16(delta);
 432              		.loc 1 233 0
 433 024c 7B88     		ldrh	r3, [r7, #2]
 434 024e 1846     		mov	r0, r3
 435 0250 FFF7FEFF 		bl	LCD_PrintInt16
 234:.\main.c      ****                 LCD_Position(1u, 12u);
 436              		.loc 1 234 0
 437 0254 4FF00100 		mov	r0, #1
 438 0258 4FF00C01 		mov	r1, #12
 439 025c FFF7FEFF 		bl	LCD_Position
 235:.\main.c      ****                 LCD_PrintInt16(control);
 440              		.loc 1 235 0
 441 0260 3B88     		ldrh	r3, [r7, #0]
 442 0262 1846     		mov	r0, r3
 443 0264 FFF7FEFF 		bl	LCD_PrintInt16
 236:.\main.c      ****                 if (control >= 0) {
 444              		.loc 1 236 0
 445 0268 B7F90030 		ldrsh	r3, [r7, #0]
 446 026c 002B     		cmp	r3, #0
 447 026e 09DB     		blt	.L13
 237:.\main.c      ****                     FanController_SetDutyCycle(FAN, control + MIN_DUTY);
 448              		.loc 1 237 0
 449 0270 3B88     		ldrh	r3, [r7, #0]
 450 0272 03F13203 		add	r3, r3, #50
 451 0276 9BB2     		uxth	r3, r3
 452 0278 4FF00100 		mov	r0, #1
 453 027c 1946     		mov	r1, r3
 454 027e FFF7FEFF 		bl	FanController_SetDutyCycle
 455              	.LBE2:
 456              		.loc 1 243 0
 457 0282 7CE7     		b	.L19
 458              	.L13:
 459              	.LBB3:
 239:.\main.c      ****                     FanController_SetDutyCycle(FAN, MIN_DUTY);
 460              		.loc 1 239 0
 461 0284 4FF00100 		mov	r0, #1
 462 0288 4FF03201 		mov	r1, #50
 463 028c FFF7FEFF 		bl	FanController_SetDutyCycle
 464              	.LBE3:
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 14


 465              		.loc 1 243 0
 466 0290 75E7     		b	.L19
 467              		.cfi_endproc
 468              	.LFE58:
 469              		.size	main, .-main
 470 0292 00BF     		.text
 471              	.Letext0:
 472              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.0\\psoc creator\\import\\gnu_cs\\arm\\4
 473              		.file 3 "./Generated_Source/PSoC5/cytypes.h"
 474              		.file 4 "./Generated_Source/PSoC5/core_cm3.h"
 475              		.section	.debug_info,"",%progbits
 476              	.Ldebug_info0:
 477 0000 43020000 		.4byte	0x243
 478 0004 0200     		.2byte	0x2
 479 0006 00000000 		.4byte	.Ldebug_abbrev0
 480 000a 04       		.byte	0x4
 481 000b 01       		.uleb128 0x1
 482 000c B7010000 		.4byte	.LASF36
 483 0010 01       		.byte	0x1
 484 0011 7B000000 		.4byte	.LASF37
 485 0015 5A010000 		.4byte	.LASF38
 486 0019 18000000 		.4byte	.Ldebug_ranges0+0x18
 487 001d 00000000 		.4byte	0
 488 0021 00000000 		.4byte	0
 489 0025 00000000 		.4byte	.Ldebug_line0
 490 0029 02       		.uleb128 0x2
 491 002a 01       		.byte	0x1
 492 002b 06       		.byte	0x6
 493 002c 61000000 		.4byte	.LASF0
 494 0030 02       		.uleb128 0x2
 495 0031 01       		.byte	0x1
 496 0032 08       		.byte	0x8
 497 0033 6D000000 		.4byte	.LASF1
 498 0037 02       		.uleb128 0x2
 499 0038 02       		.byte	0x2
 500 0039 05       		.byte	0x5
 501 003a A0010000 		.4byte	.LASF2
 502 003e 02       		.uleb128 0x2
 503 003f 02       		.byte	0x2
 504 0040 07       		.byte	0x7
 505 0041 9C000000 		.4byte	.LASF3
 506 0045 03       		.uleb128 0x3
 507 0046 3B010000 		.4byte	.LASF9
 508 004a 02       		.byte	0x2
 509 004b 4F       		.byte	0x4f
 510 004c 50000000 		.4byte	0x50
 511 0050 02       		.uleb128 0x2
 512 0051 04       		.byte	0x4
 513 0052 05       		.byte	0x5
 514 0053 00020000 		.4byte	.LASF4
 515 0057 02       		.uleb128 0x2
 516 0058 04       		.byte	0x4
 517 0059 07       		.byte	0x7
 518 005a 8A000000 		.4byte	.LASF5
 519 005e 02       		.uleb128 0x2
 520 005f 08       		.byte	0x8
 521 0060 05       		.byte	0x5
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 15


 522 0061 4C010000 		.4byte	.LASF6
 523 0065 02       		.uleb128 0x2
 524 0066 08       		.byte	0x8
 525 0067 07       		.byte	0x7
 526 0068 24010000 		.4byte	.LASF7
 527 006c 04       		.uleb128 0x4
 528 006d 04       		.byte	0x4
 529 006e 05       		.byte	0x5
 530 006f 696E7400 		.ascii	"int\000"
 531 0073 02       		.uleb128 0x2
 532 0074 04       		.byte	0x4
 533 0075 07       		.byte	0x7
 534 0076 17010000 		.4byte	.LASF8
 535 007a 03       		.uleb128 0x3
 536 007b B1010000 		.4byte	.LASF10
 537 007f 03       		.byte	0x3
 538 0080 5B       		.byte	0x5b
 539 0081 30000000 		.4byte	0x30
 540 0085 03       		.uleb128 0x3
 541 0086 00010000 		.4byte	.LASF11
 542 008a 03       		.byte	0x3
 543 008b 5C       		.byte	0x5c
 544 008c 3E000000 		.4byte	0x3e
 545 0090 03       		.uleb128 0x3
 546 0091 10010000 		.4byte	.LASF12
 547 0095 03       		.byte	0x3
 548 0096 5D       		.byte	0x5d
 549 0097 57000000 		.4byte	0x57
 550 009b 03       		.uleb128 0x3
 551 009c 84000000 		.4byte	.LASF13
 552 00a0 03       		.byte	0x3
 553 00a1 5F       		.byte	0x5f
 554 00a2 37000000 		.4byte	0x37
 555 00a6 02       		.uleb128 0x2
 556 00a7 04       		.byte	0x4
 557 00a8 04       		.byte	0x4
 558 00a9 5B000000 		.4byte	.LASF14
 559 00ad 02       		.uleb128 0x2
 560 00ae 08       		.byte	0x8
 561 00af 04       		.byte	0x4
 562 00b0 DD000000 		.4byte	.LASF15
 563 00b4 02       		.uleb128 0x2
 564 00b5 01       		.byte	0x1
 565 00b6 08       		.byte	0x8
 566 00b7 92010000 		.4byte	.LASF16
 567 00bb 02       		.uleb128 0x2
 568 00bc 04       		.byte	0x4
 569 00bd 07       		.byte	0x7
 570 00be 43010000 		.4byte	.LASF17
 571 00c2 05       		.uleb128 0x5
 572 00c3 01       		.byte	0x1
 573 00c4 B7000000 		.4byte	.LASF18
 574 00c8 01       		.byte	0x1
 575 00c9 45       		.byte	0x45
 576 00ca 01       		.byte	0x1
 577 00cb 00000000 		.4byte	.LFB56
 578 00cf 16000000 		.4byte	.LFE56
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 16


 579 00d3 00000000 		.4byte	.LLST0
 580 00d7 01       		.byte	0x1
 581 00d8 05       		.uleb128 0x5
 582 00d9 01       		.byte	0x1
 583 00da E9000000 		.4byte	.LASF19
 584 00de 01       		.byte	0x1
 585 00df 52       		.byte	0x52
 586 00e0 01       		.byte	0x1
 587 00e1 00000000 		.4byte	.LFB57
 588 00e5 20000000 		.4byte	.LFE57
 589 00e9 2C000000 		.4byte	.LLST1
 590 00ed 01       		.byte	0x1
 591 00ee 06       		.uleb128 0x6
 592 00ef 01       		.byte	0x1
 593 00f0 E4000000 		.4byte	.LASF39
 594 00f4 01       		.byte	0x1
 595 00f5 6D       		.byte	0x6d
 596 00f6 6C000000 		.4byte	0x6c
 597 00fa 00000000 		.4byte	.LFB58
 598 00fe 92020000 		.4byte	.LFE58
 599 0102 58000000 		.4byte	.LLST2
 600 0106 01       		.byte	0x1
 601 0107 BA010000 		.4byte	0x1ba
 602 010b 07       		.uleb128 0x7
 603 010c 4E000000 		.4byte	.LASF20
 604 0110 01       		.byte	0x1
 605 0111 81       		.byte	0x81
 606 0112 85000000 		.4byte	0x85
 607 0116 02       		.byte	0x2
 608 0117 91       		.byte	0x91
 609 0118 68       		.sleb128 -24
 610 0119 07       		.uleb128 0x7
 611 011a 12000000 		.4byte	.LASF21
 612 011e 01       		.byte	0x1
 613 011f 82       		.byte	0x82
 614 0120 85000000 		.4byte	0x85
 615 0124 02       		.byte	0x2
 616 0125 91       		.byte	0x91
 617 0126 66       		.sleb128 -26
 618 0127 07       		.uleb128 0x7
 619 0128 25000000 		.4byte	.LASF22
 620 012c 01       		.byte	0x1
 621 012d 91       		.byte	0x91
 622 012e 85000000 		.4byte	0x85
 623 0132 02       		.byte	0x2
 624 0133 91       		.byte	0x91
 625 0134 64       		.sleb128 -28
 626 0135 07       		.uleb128 0x7
 627 0136 09020000 		.4byte	.LASF23
 628 013a 01       		.byte	0x1
 629 013b 97       		.byte	0x97
 630 013c 85000000 		.4byte	0x85
 631 0140 02       		.byte	0x2
 632 0141 91       		.byte	0x91
 633 0142 6E       		.sleb128 -18
 634 0143 07       		.uleb128 0x7
 635 0144 43000000 		.4byte	.LASF24
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 17


 636 0148 01       		.byte	0x1
 637 0149 B7       		.byte	0xb7
 638 014a 85000000 		.4byte	0x85
 639 014e 02       		.byte	0x2
 640 014f 91       		.byte	0x91
 641 0150 62       		.sleb128 -30
 642 0151 07       		.uleb128 0x7
 643 0152 34000000 		.4byte	.LASF25
 644 0156 01       		.byte	0x1
 645 0157 BA       		.byte	0xba
 646 0158 85000000 		.4byte	0x85
 647 015c 02       		.byte	0x2
 648 015d 91       		.byte	0x91
 649 015e 60       		.sleb128 -32
 650 015f 07       		.uleb128 0x7
 651 0160 1C000000 		.4byte	.LASF26
 652 0164 01       		.byte	0x1
 653 0165 BE       		.byte	0xbe
 654 0166 85000000 		.4byte	0x85
 655 016a 02       		.byte	0x2
 656 016b 91       		.byte	0x91
 657 016c 6C       		.sleb128 -20
 658 016d 07       		.uleb128 0x7
 659 016e 00000000 		.4byte	.LASF27
 660 0172 01       		.byte	0x1
 661 0173 BF       		.byte	0xbf
 662 0174 85000000 		.4byte	0x85
 663 0178 02       		.byte	0x2
 664 0179 91       		.byte	0x91
 665 017a 6A       		.sleb128 -22
 666 017b 08       		.uleb128 0x8
 667 017c 00000000 		.4byte	.Ldebug_ranges0+0
 668 0180 07       		.uleb128 0x7
 669 0181 AA010000 		.4byte	.LASF28
 670 0185 01       		.byte	0x1
 671 0186 DF       		.byte	0xdf
 672 0187 85000000 		.4byte	0x85
 673 018b 02       		.byte	0x2
 674 018c 91       		.byte	0x91
 675 018d 5E       		.sleb128 -34
 676 018e 07       		.uleb128 0x7
 677 018f 97010000 		.4byte	.LASF29
 678 0193 01       		.byte	0x1
 679 0194 E1       		.byte	0xe1
 680 0195 85000000 		.4byte	0x85
 681 0199 02       		.byte	0x2
 682 019a 91       		.byte	0x91
 683 019b 5C       		.sleb128 -36
 684 019c 07       		.uleb128 0x7
 685 019d 2E000000 		.4byte	.LASF30
 686 01a1 01       		.byte	0x1
 687 01a2 E3       		.byte	0xe3
 688 01a3 9B000000 		.4byte	0x9b
 689 01a7 02       		.byte	0x2
 690 01a8 91       		.byte	0x91
 691 01a9 5A       		.sleb128 -38
 692 01aa 07       		.uleb128 0x7
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 18


 693 01ab AF000000 		.4byte	.LASF31
 694 01af 01       		.byte	0x1
 695 01b0 E4       		.byte	0xe4
 696 01b1 9B000000 		.4byte	0x9b
 697 01b5 02       		.byte	0x2
 698 01b6 91       		.byte	0x91
 699 01b7 58       		.sleb128 -40
 700 01b8 00       		.byte	0
 701 01b9 00       		.byte	0
 702 01ba 09       		.uleb128 0x9
 703 01bb D0000000 		.4byte	.LASF32
 704 01bf 04       		.byte	0x4
 705 01c0 1606     		.2byte	0x616
 706 01c2 C8010000 		.4byte	0x1c8
 707 01c6 01       		.byte	0x1
 708 01c7 01       		.byte	0x1
 709 01c8 0A       		.uleb128 0xa
 710 01c9 45000000 		.4byte	0x45
 711 01cd 0B       		.uleb128 0xb
 712 01ce 90000000 		.4byte	0x90
 713 01d2 DD010000 		.4byte	0x1dd
 714 01d6 0C       		.uleb128 0xc
 715 01d7 BB000000 		.4byte	0xbb
 716 01db 07       		.byte	0x7
 717 01dc 00       		.byte	0
 718 01dd 0D       		.uleb128 0xd
 719 01de 11020000 		.4byte	.LASF33
 720 01e2 01       		.byte	0x1
 721 01e3 4E       		.byte	0x4e
 722 01e4 CD010000 		.4byte	0x1cd
 723 01e8 01       		.byte	0x1
 724 01e9 05       		.byte	0x5
 725 01ea 03       		.byte	0x3
 726 01eb 00000000 		.4byte	echoes
 727 01ef 0D       		.uleb128 0xd
 728 01f0 07010000 		.4byte	.LASF34
 729 01f4 01       		.byte	0x1
 730 01f5 4F       		.byte	0x4f
 731 01f6 7A000000 		.4byte	0x7a
 732 01fa 01       		.byte	0x1
 733 01fb 05       		.byte	0x5
 734 01fc 03       		.byte	0x3
 735 01fd 00000000 		.4byte	position
 736 0201 0D       		.uleb128 0xd
 737 0202 18020000 		.4byte	.LASF35
 738 0206 01       		.byte	0x1
 739 0207 50       		.byte	0x50
 740 0208 85000000 		.4byte	0x85
 741 020c 01       		.byte	0x1
 742 020d 05       		.byte	0x5
 743 020e 03       		.byte	0x3
 744 020f 00000000 		.4byte	echo
 745 0213 0E       		.uleb128 0xe
 746 0214 6B5000   		.ascii	"kP\000"
 747 0217 01       		.byte	0x1
 748 0218 68       		.byte	0x68
 749 0219 85000000 		.4byte	0x85
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 19


 750 021d 01       		.byte	0x1
 751 021e 05       		.byte	0x5
 752 021f 03       		.byte	0x3
 753 0220 00000000 		.4byte	kP
 754 0224 0E       		.uleb128 0xe
 755 0225 6B4900   		.ascii	"kI\000"
 756 0228 01       		.byte	0x1
 757 0229 69       		.byte	0x69
 758 022a 85000000 		.4byte	0x85
 759 022e 01       		.byte	0x1
 760 022f 05       		.byte	0x5
 761 0230 03       		.byte	0x3
 762 0231 00000000 		.4byte	kI
 763 0235 0E       		.uleb128 0xe
 764 0236 6B4400   		.ascii	"kD\000"
 765 0239 01       		.byte	0x1
 766 023a 6A       		.byte	0x6a
 767 023b 85000000 		.4byte	0x85
 768 023f 01       		.byte	0x1
 769 0240 05       		.byte	0x5
 770 0241 03       		.byte	0x3
 771 0242 00000000 		.4byte	kD
 772 0246 00       		.byte	0
 773              		.section	.debug_abbrev,"",%progbits
 774              	.Ldebug_abbrev0:
 775 0000 01       		.uleb128 0x1
 776 0001 11       		.uleb128 0x11
 777 0002 01       		.byte	0x1
 778 0003 25       		.uleb128 0x25
 779 0004 0E       		.uleb128 0xe
 780 0005 13       		.uleb128 0x13
 781 0006 0B       		.uleb128 0xb
 782 0007 03       		.uleb128 0x3
 783 0008 0E       		.uleb128 0xe
 784 0009 1B       		.uleb128 0x1b
 785 000a 0E       		.uleb128 0xe
 786 000b 55       		.uleb128 0x55
 787 000c 06       		.uleb128 0x6
 788 000d 11       		.uleb128 0x11
 789 000e 01       		.uleb128 0x1
 790 000f 52       		.uleb128 0x52
 791 0010 01       		.uleb128 0x1
 792 0011 10       		.uleb128 0x10
 793 0012 06       		.uleb128 0x6
 794 0013 00       		.byte	0
 795 0014 00       		.byte	0
 796 0015 02       		.uleb128 0x2
 797 0016 24       		.uleb128 0x24
 798 0017 00       		.byte	0
 799 0018 0B       		.uleb128 0xb
 800 0019 0B       		.uleb128 0xb
 801 001a 3E       		.uleb128 0x3e
 802 001b 0B       		.uleb128 0xb
 803 001c 03       		.uleb128 0x3
 804 001d 0E       		.uleb128 0xe
 805 001e 00       		.byte	0
 806 001f 00       		.byte	0
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 20


 807 0020 03       		.uleb128 0x3
 808 0021 16       		.uleb128 0x16
 809 0022 00       		.byte	0
 810 0023 03       		.uleb128 0x3
 811 0024 0E       		.uleb128 0xe
 812 0025 3A       		.uleb128 0x3a
 813 0026 0B       		.uleb128 0xb
 814 0027 3B       		.uleb128 0x3b
 815 0028 0B       		.uleb128 0xb
 816 0029 49       		.uleb128 0x49
 817 002a 13       		.uleb128 0x13
 818 002b 00       		.byte	0
 819 002c 00       		.byte	0
 820 002d 04       		.uleb128 0x4
 821 002e 24       		.uleb128 0x24
 822 002f 00       		.byte	0
 823 0030 0B       		.uleb128 0xb
 824 0031 0B       		.uleb128 0xb
 825 0032 3E       		.uleb128 0x3e
 826 0033 0B       		.uleb128 0xb
 827 0034 03       		.uleb128 0x3
 828 0035 08       		.uleb128 0x8
 829 0036 00       		.byte	0
 830 0037 00       		.byte	0
 831 0038 05       		.uleb128 0x5
 832 0039 2E       		.uleb128 0x2e
 833 003a 00       		.byte	0
 834 003b 3F       		.uleb128 0x3f
 835 003c 0C       		.uleb128 0xc
 836 003d 03       		.uleb128 0x3
 837 003e 0E       		.uleb128 0xe
 838 003f 3A       		.uleb128 0x3a
 839 0040 0B       		.uleb128 0xb
 840 0041 3B       		.uleb128 0x3b
 841 0042 0B       		.uleb128 0xb
 842 0043 27       		.uleb128 0x27
 843 0044 0C       		.uleb128 0xc
 844 0045 11       		.uleb128 0x11
 845 0046 01       		.uleb128 0x1
 846 0047 12       		.uleb128 0x12
 847 0048 01       		.uleb128 0x1
 848 0049 40       		.uleb128 0x40
 849 004a 06       		.uleb128 0x6
 850 004b 9642     		.uleb128 0x2116
 851 004d 0C       		.uleb128 0xc
 852 004e 00       		.byte	0
 853 004f 00       		.byte	0
 854 0050 06       		.uleb128 0x6
 855 0051 2E       		.uleb128 0x2e
 856 0052 01       		.byte	0x1
 857 0053 3F       		.uleb128 0x3f
 858 0054 0C       		.uleb128 0xc
 859 0055 03       		.uleb128 0x3
 860 0056 0E       		.uleb128 0xe
 861 0057 3A       		.uleb128 0x3a
 862 0058 0B       		.uleb128 0xb
 863 0059 3B       		.uleb128 0x3b
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 21


 864 005a 0B       		.uleb128 0xb
 865 005b 49       		.uleb128 0x49
 866 005c 13       		.uleb128 0x13
 867 005d 11       		.uleb128 0x11
 868 005e 01       		.uleb128 0x1
 869 005f 12       		.uleb128 0x12
 870 0060 01       		.uleb128 0x1
 871 0061 40       		.uleb128 0x40
 872 0062 06       		.uleb128 0x6
 873 0063 9642     		.uleb128 0x2116
 874 0065 0C       		.uleb128 0xc
 875 0066 01       		.uleb128 0x1
 876 0067 13       		.uleb128 0x13
 877 0068 00       		.byte	0
 878 0069 00       		.byte	0
 879 006a 07       		.uleb128 0x7
 880 006b 34       		.uleb128 0x34
 881 006c 00       		.byte	0
 882 006d 03       		.uleb128 0x3
 883 006e 0E       		.uleb128 0xe
 884 006f 3A       		.uleb128 0x3a
 885 0070 0B       		.uleb128 0xb
 886 0071 3B       		.uleb128 0x3b
 887 0072 0B       		.uleb128 0xb
 888 0073 49       		.uleb128 0x49
 889 0074 13       		.uleb128 0x13
 890 0075 02       		.uleb128 0x2
 891 0076 0A       		.uleb128 0xa
 892 0077 00       		.byte	0
 893 0078 00       		.byte	0
 894 0079 08       		.uleb128 0x8
 895 007a 0B       		.uleb128 0xb
 896 007b 01       		.byte	0x1
 897 007c 55       		.uleb128 0x55
 898 007d 06       		.uleb128 0x6
 899 007e 00       		.byte	0
 900 007f 00       		.byte	0
 901 0080 09       		.uleb128 0x9
 902 0081 34       		.uleb128 0x34
 903 0082 00       		.byte	0
 904 0083 03       		.uleb128 0x3
 905 0084 0E       		.uleb128 0xe
 906 0085 3A       		.uleb128 0x3a
 907 0086 0B       		.uleb128 0xb
 908 0087 3B       		.uleb128 0x3b
 909 0088 05       		.uleb128 0x5
 910 0089 49       		.uleb128 0x49
 911 008a 13       		.uleb128 0x13
 912 008b 3F       		.uleb128 0x3f
 913 008c 0C       		.uleb128 0xc
 914 008d 3C       		.uleb128 0x3c
 915 008e 0C       		.uleb128 0xc
 916 008f 00       		.byte	0
 917 0090 00       		.byte	0
 918 0091 0A       		.uleb128 0xa
 919 0092 35       		.uleb128 0x35
 920 0093 00       		.byte	0
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 22


 921 0094 49       		.uleb128 0x49
 922 0095 13       		.uleb128 0x13
 923 0096 00       		.byte	0
 924 0097 00       		.byte	0
 925 0098 0B       		.uleb128 0xb
 926 0099 01       		.uleb128 0x1
 927 009a 01       		.byte	0x1
 928 009b 49       		.uleb128 0x49
 929 009c 13       		.uleb128 0x13
 930 009d 01       		.uleb128 0x1
 931 009e 13       		.uleb128 0x13
 932 009f 00       		.byte	0
 933 00a0 00       		.byte	0
 934 00a1 0C       		.uleb128 0xc
 935 00a2 21       		.uleb128 0x21
 936 00a3 00       		.byte	0
 937 00a4 49       		.uleb128 0x49
 938 00a5 13       		.uleb128 0x13
 939 00a6 2F       		.uleb128 0x2f
 940 00a7 0B       		.uleb128 0xb
 941 00a8 00       		.byte	0
 942 00a9 00       		.byte	0
 943 00aa 0D       		.uleb128 0xd
 944 00ab 34       		.uleb128 0x34
 945 00ac 00       		.byte	0
 946 00ad 03       		.uleb128 0x3
 947 00ae 0E       		.uleb128 0xe
 948 00af 3A       		.uleb128 0x3a
 949 00b0 0B       		.uleb128 0xb
 950 00b1 3B       		.uleb128 0x3b
 951 00b2 0B       		.uleb128 0xb
 952 00b3 49       		.uleb128 0x49
 953 00b4 13       		.uleb128 0x13
 954 00b5 3F       		.uleb128 0x3f
 955 00b6 0C       		.uleb128 0xc
 956 00b7 02       		.uleb128 0x2
 957 00b8 0A       		.uleb128 0xa
 958 00b9 00       		.byte	0
 959 00ba 00       		.byte	0
 960 00bb 0E       		.uleb128 0xe
 961 00bc 34       		.uleb128 0x34
 962 00bd 00       		.byte	0
 963 00be 03       		.uleb128 0x3
 964 00bf 08       		.uleb128 0x8
 965 00c0 3A       		.uleb128 0x3a
 966 00c1 0B       		.uleb128 0xb
 967 00c2 3B       		.uleb128 0x3b
 968 00c3 0B       		.uleb128 0xb
 969 00c4 49       		.uleb128 0x49
 970 00c5 13       		.uleb128 0x13
 971 00c6 3F       		.uleb128 0x3f
 972 00c7 0C       		.uleb128 0xc
 973 00c8 02       		.uleb128 0x2
 974 00c9 0A       		.uleb128 0xa
 975 00ca 00       		.byte	0
 976 00cb 00       		.byte	0
 977 00cc 00       		.byte	0
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 23


 978              		.section	.debug_loc,"",%progbits
 979              	.Ldebug_loc0:
 980              	.LLST0:
 981 0000 00000000 		.4byte	.LFB56
 982 0004 02000000 		.4byte	.LCFI0
 983 0008 0200     		.2byte	0x2
 984 000a 7D       		.byte	0x7d
 985 000b 00       		.sleb128 0
 986 000c 02000000 		.4byte	.LCFI0
 987 0010 04000000 		.4byte	.LCFI1
 988 0014 0200     		.2byte	0x2
 989 0016 7D       		.byte	0x7d
 990 0017 08       		.sleb128 8
 991 0018 04000000 		.4byte	.LCFI1
 992 001c 16000000 		.4byte	.LFE56
 993 0020 0200     		.2byte	0x2
 994 0022 77       		.byte	0x77
 995 0023 08       		.sleb128 8
 996 0024 00000000 		.4byte	0
 997 0028 00000000 		.4byte	0
 998              	.LLST1:
 999 002c 00000000 		.4byte	.LFB57
 1000 0030 02000000 		.4byte	.LCFI2
 1001 0034 0200     		.2byte	0x2
 1002 0036 7D       		.byte	0x7d
 1003 0037 00       		.sleb128 0
 1004 0038 02000000 		.4byte	.LCFI2
 1005 003c 04000000 		.4byte	.LCFI3
 1006 0040 0200     		.2byte	0x2
 1007 0042 7D       		.byte	0x7d
 1008 0043 08       		.sleb128 8
 1009 0044 04000000 		.4byte	.LCFI3
 1010 0048 20000000 		.4byte	.LFE57
 1011 004c 0200     		.2byte	0x2
 1012 004e 77       		.byte	0x77
 1013 004f 08       		.sleb128 8
 1014 0050 00000000 		.4byte	0
 1015 0054 00000000 		.4byte	0
 1016              	.LLST2:
 1017 0058 00000000 		.4byte	.LFB58
 1018 005c 02000000 		.4byte	.LCFI4
 1019 0060 0200     		.2byte	0x2
 1020 0062 7D       		.byte	0x7d
 1021 0063 00       		.sleb128 0
 1022 0064 02000000 		.4byte	.LCFI4
 1023 0068 04000000 		.4byte	.LCFI5
 1024 006c 0200     		.2byte	0x2
 1025 006e 7D       		.byte	0x7d
 1026 006f 10       		.sleb128 16
 1027 0070 04000000 		.4byte	.LCFI5
 1028 0074 06000000 		.4byte	.LCFI6
 1029 0078 0200     		.2byte	0x2
 1030 007a 7D       		.byte	0x7d
 1031 007b 28       		.sleb128 40
 1032 007c 06000000 		.4byte	.LCFI6
 1033 0080 92020000 		.4byte	.LFE58
 1034 0084 0200     		.2byte	0x2
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 24


 1035 0086 77       		.byte	0x77
 1036 0087 28       		.sleb128 40
 1037 0088 00000000 		.4byte	0
 1038 008c 00000000 		.4byte	0
 1039              		.section	.debug_aranges,"",%progbits
 1040 0000 2C000000 		.4byte	0x2c
 1041 0004 0200     		.2byte	0x2
 1042 0006 00000000 		.4byte	.Ldebug_info0
 1043 000a 04       		.byte	0x4
 1044 000b 00       		.byte	0
 1045 000c 0000     		.2byte	0
 1046 000e 0000     		.2byte	0
 1047 0010 00000000 		.4byte	.LFB56
 1048 0014 16000000 		.4byte	.LFE56-.LFB56
 1049 0018 00000000 		.4byte	.LFB57
 1050 001c 20000000 		.4byte	.LFE57-.LFB57
 1051 0020 00000000 		.4byte	.LFB58
 1052 0024 92020000 		.4byte	.LFE58-.LFB58
 1053 0028 00000000 		.4byte	0
 1054 002c 00000000 		.4byte	0
 1055              		.section	.debug_ranges,"",%progbits
 1056              	.Ldebug_ranges0:
 1057 0000 98010000 		.4byte	.LBB2
 1058 0004 82020000 		.4byte	.LBE2
 1059 0008 84020000 		.4byte	.LBB3
 1060 000c 90020000 		.4byte	.LBE3
 1061 0010 00000000 		.4byte	0
 1062 0014 00000000 		.4byte	0
 1063 0018 00000000 		.4byte	.LFB56
 1064 001c 16000000 		.4byte	.LFE56
 1065 0020 00000000 		.4byte	.LFB57
 1066 0024 20000000 		.4byte	.LFE57
 1067 0028 00000000 		.4byte	.LFB58
 1068 002c 92020000 		.4byte	.LFE58
 1069 0030 00000000 		.4byte	0
 1070 0034 00000000 		.4byte	0
 1071              		.section	.debug_line,"",%progbits
 1072              	.Ldebug_line0:
 1073 0000 8C010000 		.section	.debug_str,"MS",%progbits,1
 1073      0200F900 
 1073      00000201 
 1073      FB0E0D00 
 1073      01010101 
 1074              	.LASF27:
 1075 0000 6E6F5F63 		.ascii	"no_change_counter\000"
 1075      68616E67 
 1075      655F636F 
 1075      756E7465 
 1075      7200
 1076              	.LASF21:
 1077 0012 64757479 		.ascii	"dutyCycle\000"
 1077      4379636C 
 1077      6500
 1078              	.LASF26:
 1079 001c 6D61785F 		.ascii	"max_echo\000"
 1079      6563686F 
 1079      00
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 25


 1080              	.LASF22:
 1081 0025 6D696E5F 		.ascii	"min_echo\000"
 1081      6563686F 
 1081      00
 1082              	.LASF30:
 1083 002e 64656C74 		.ascii	"delta\000"
 1083      6100
 1084              	.LASF25:
 1085 0034 6E656761 		.ascii	"negative_point\000"
 1085      74697665 
 1085      5F706F69 
 1085      6E7400
 1086              	.LASF24:
 1087 0043 7A65726F 		.ascii	"zero_point\000"
 1087      5F706F69 
 1087      6E7400
 1088              	.LASF20:
 1089 004e 64657369 		.ascii	"desiredSpeed\000"
 1089      72656453 
 1089      70656564 
 1089      00
 1090              	.LASF14:
 1091 005b 666C6F61 		.ascii	"float\000"
 1091      7400
 1092              	.LASF0:
 1093 0061 7369676E 		.ascii	"signed char\000"
 1093      65642063 
 1093      68617200 
 1094              	.LASF1:
 1095 006d 756E7369 		.ascii	"unsigned char\000"
 1095      676E6564 
 1095      20636861 
 1095      7200
 1096              	.LASF37:
 1097 007b 2E5C6D61 		.ascii	".\\main.c\000"
 1097      696E2E63 
 1097      00
 1098              	.LASF13:
 1099 0084 696E7431 		.ascii	"int16\000"
 1099      3600
 1100              	.LASF5:
 1101 008a 6C6F6E67 		.ascii	"long unsigned int\000"
 1101      20756E73 
 1101      69676E65 
 1101      6420696E 
 1101      7400
 1102              	.LASF3:
 1103 009c 73686F72 		.ascii	"short unsigned int\000"
 1103      7420756E 
 1103      7369676E 
 1103      65642069 
 1103      6E7400
 1104              	.LASF31:
 1105 00af 636F6E74 		.ascii	"control\000"
 1105      726F6C00 
 1106              	.LASF18:
 1107 00b7 73746172 		.ascii	"start_echo_IRR_Interrupt\000"
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 26


 1107      745F6563 
 1107      686F5F49 
 1107      52525F49 
 1107      6E746572 
 1108              	.LASF32:
 1109 00d0 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1109      52784275 
 1109      66666572 
 1109      00
 1110              	.LASF15:
 1111 00dd 646F7562 		.ascii	"double\000"
 1111      6C6500
 1112              	.LASF39:
 1113 00e4 6D61696E 		.ascii	"main\000"
 1113      00
 1114              	.LASF19:
 1115 00e9 656E645F 		.ascii	"end_echo_IRR_Interrupt\000"
 1115      6563686F 
 1115      5F495252 
 1115      5F496E74 
 1115      65727275 
 1116              	.LASF11:
 1117 0100 75696E74 		.ascii	"uint16\000"
 1117      313600
 1118              	.LASF34:
 1119 0107 706F7369 		.ascii	"position\000"
 1119      74696F6E 
 1119      00
 1120              	.LASF12:
 1121 0110 75696E74 		.ascii	"uint32\000"
 1121      333200
 1122              	.LASF8:
 1123 0117 756E7369 		.ascii	"unsigned int\000"
 1123      676E6564 
 1123      20696E74 
 1123      00
 1124              	.LASF7:
 1125 0124 6C6F6E67 		.ascii	"long long unsigned int\000"
 1125      206C6F6E 
 1125      6720756E 
 1125      7369676E 
 1125      65642069 
 1126              	.LASF9:
 1127 013b 696E7433 		.ascii	"int32_t\000"
 1127      325F7400 
 1128              	.LASF17:
 1129 0143 73697A65 		.ascii	"sizetype\000"
 1129      74797065 
 1129      00
 1130              	.LASF6:
 1131 014c 6C6F6E67 		.ascii	"long long int\000"
 1131      206C6F6E 
 1131      6720696E 
 1131      7400
 1132              	.LASF38:
 1133 015a 443A5C55 		.ascii	"D:\\Users\\BertoTech\\Documents\\PID\\FW_Fan_Contro"
 1133      73657273 
ARM GAS  D:\Users\BertoTech\TEMP\ccK0kaWM.s 			page 27


 1133      5C426572 
 1133      746F5465 
 1133      63685C44 
 1134 0188 6C30312E 		.ascii	"l01.cydsn\000"
 1134      63796473 
 1134      6E00
 1135              	.LASF16:
 1136 0192 63686172 		.ascii	"char\000"
 1136      00
 1137              	.LASF29:
 1138 0197 73657450 		.ascii	"setPoint\000"
 1138      6F696E74 
 1138      00
 1139              	.LASF2:
 1140 01a0 73686F72 		.ascii	"short int\000"
 1140      7420696E 
 1140      7400
 1141              	.LASF28:
 1142 01aa 6F757470 		.ascii	"output\000"
 1142      757400
 1143              	.LASF10:
 1144 01b1 75696E74 		.ascii	"uint8\000"
 1144      3800
 1145              	.LASF36:
 1146 01b7 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 1146      4320342E 
 1146      372E3320 
 1146      32303133 
 1146      30333132 
 1147 01ea 616E6368 		.ascii	"anch revision 196615]\000"
 1147      20726576 
 1147      6973696F 
 1147      6E203139 
 1147      36363135 
 1148              	.LASF4:
 1149 0200 6C6F6E67 		.ascii	"long int\000"
 1149      20696E74 
 1149      00
 1150              	.LASF23:
 1151 0209 6D696E44 		.ascii	"minDuty\000"
 1151      75747900 
 1152              	.LASF33:
 1153 0211 6563686F 		.ascii	"echoes\000"
 1153      657300
 1154              	.LASF35:
 1155 0218 6563686F 		.ascii	"echo\000"
 1155      00
 1156              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
